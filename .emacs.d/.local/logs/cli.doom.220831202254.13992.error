;; -*- lisp-interaction -*-
;; vim: set ft=lisp:
;; command=("C:\\Users\\threddast\\Programs\\emacs-28.1\\bin\\emacs.exe" "-scriptload" ".\\doom" "--" "doctor")
;; date="2022-08-31 20-22-54"

;;;; ENVIRONMENT
GNU Emacs     v28.1            nil
Doom core     v3.0.0-dev       grafted, HEAD -> master, origin/master, origin/HEAD c44bc81 2022-08-19 11:24:34 +0200
Doom modules  v22.08.0-dev     grafted, HEAD -> master, origin/master, origin/HEAD c44bc81 2022-08-19 11:24:34 +0200

;;;; 0
((call-process-region 1 6 "grep" "c:/Users/THREDD~1/AppData/Local/Temp/emVzzBe6" nil nil "-P" "^(?=.*b)(?=.*a)")
 ((debugger-may-continue . t)
  (inhibit-redisplay)
  (inhibit-debugger . t)
  (inhibit-changing-match-data)))

;;;; 1
((apply call-process-region 1 6 "grep" nil nil nil
        ("-P" "^(?=.*b)(?=.*a)"))
 nil)

;;;; 2
((consult--grep-lookahead-p "grep" "-P")
 nil)

;;;; 3
((if
     (consult--grep-lookahead-p "grep" "-P")
     nil
   (progn
     (if inhibit-message nil
       (doom-print
        (doom-print--format
         (doom-print--class 'warn "The installed grep binary was not built with support for PCRE lookaheads.\n  Some advanced consult filtering features will not work as a result, see the module readme."))
        :format nil))
     (setq doom-doctor--warnings
           (cons
            (doom-print--format
             (doom-print--class 'warn "The installed grep binary was not built with support for PCRE lookaheads.\n  Some advanced consult filtering features will not work as a result, see the module readme."))
            doom-doctor--warnings))))
 nil)

;;;; 4
((load-with-code-conversion "c:/Users/threddast/.emacs.d/modules/completion/vertico/doctor.el" "c:/Users/threddast/.emacs.d/modules/completion/vertico/doctor.el" t t)
 ((load-in-progress . t)
  (inhibit-file-name-operation)
  (set-auto-coding-for-load . t)
  (load-file-name . "c:/Users/threddast/.emacs.d/modules/completion/vertico/doctor.el")
  (load-true-file-name . "c:/Users/threddast/.emacs.d/modules/completion/vertico/doctor.el")
  (read-symbol-shorthands)
  (eval-buffer-list #<buffer  *load*-430796> #<buffer  *load*>)
  (standard-output)
  (lexical-binding . t)
  (standard-input . #<buffer  *load*-430796>)
  (current-load-list
   (require . evil-collection-consult)
   +vertico--consult-org-source
   (defun . +vertico--consult-recent-file-a)
   (require . consult)
   "c:/Users/threddast/.emacs.d/modules/completion/vertico/doctor.el")))

;;;; 5
((load "c:/Users/threddast/.emacs.d/modules/completion/vertico/doctor.el" noerror nomessage)
 ((lexical-binding)
  (lread--unescaped-character-literals)))

;;;; 6
((let
     ((inhibit-message t))
   (load doctor-file 'noerror 'nomessage))
 ((inhibit-message . t)))

;;;; 7
((let
     ((doctor-file
       (doom-module-path
        (car key)
        (cdr key)
        "doctor.el"))
      (packages-file
       (doom-module-path
        (car key)
        (cdr key)
        "packages.el")))
   (let*
       ((doom-output-indent 6)
        (--cl-var--
         (let
             (doom-packages doom-disabled-packages)
           (load packages-file 'noerror 'nomessage)
           (mapcar #'car doom-packages)))
        (name nil))
     (while
         (consp --cl-var--)
       (setq name
             (car --cl-var--))
       (if
           (or
            (doom-package-get name :disable)
            (eval
             (doom-package-get name :ignore))
            (plist-member
             (doom-package-get name :recipe)
             :local-repo)
            (locate-library
             (symbol-name name))
            (doom-package-built-in-p name)
            (doom-package-installed-p name))
           (progn)
         (doom-print
          (doom-print--format
           (doom-print--class 'error "Missing emacs package: %S")
           name)
          :format nil))
       (setq --cl-var--
             (cdr --cl-var--)))
     nil)
   (let
       ((inhibit-message t))
     (load doctor-file 'noerror 'nomessage)))
 ((cli . #s(doom-cli
            ("doom" "doctor")
            nil
            (("SUMMARY" . "Diagnoses common issues on your system.")
             ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
            nil nil nil nil
            (:benchmark nil :prefix
                        (doom)
                        :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
            (closure
             (t)
             (cli alist)
             (let nil
               (doom-print
                (doom-print--format "The doctor will see you now...\n")
                :format nil)
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking your Emacs version..."))
                :format nil)
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (cond
                  ((string= ".50"
                            (substring emacs-version -3))
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                            doom-doctor--errors)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                           "\n")))
                      :format nil)))
                  ((> emacs-major-version 28)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Emacs %s detected" emacs-version))
                        :format nil))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Emacs %s detected" emacs-version))
                            doom-doctor--warnings)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                           "\n")))
                      :format nil)))
                  ((< emacs-major-version 27)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                            doom-doctor--errors))))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for Doom's prerequisites..."))
                :format nil)
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (if
                     (not
                      (executable-find "git"))
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                          :format nil))
                       (setq doom-doctor--errors
                             (cons
                              (doom-print--format
                               (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                              doom-doctor--errors)))
                   (let
                       ((save-match-data-internal
                         (match-data)))
                     (unwind-protect
                         (progn
                           (let*
                               ((version
                                 (cdr
                                  (doom-call-process "git" "version")))
                                (version
                                 (and
                                  (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                  (match-string 1 version))))
                             (if version
                                 (if
                                     (version< version "2.23")
                                     (progn
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                doom-doctor--errors)))))
                               (progn
                                 (if inhibit-message nil
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                    :format nil))
                                 (setq doom-doctor--warnings
                                       (cons
                                        (doom-print--format
                                         (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                        doom-doctor--warnings))))))
                       (set-match-data save-match-data-internal 'evaporate))))
                 (if
                     (executable-find "rg")
                     nil
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                            doom-doctor--errors)))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for Emacs config conflicts..."))
                :format nil)
               (if
                   (file-exists-p "~/.emacs")
                   (progn
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                          :format nil))
                       (setq doom-doctor--warnings
                             (cons
                              (doom-print--format
                               (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                              doom-doctor--warnings)))
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'fill
                                            (string-join
                                             (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                             "\n")))
                        :format nil))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for great Emacs features..."))
                :format nil)
               (if
                   (functionp 'json-serialize)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native JSON support"))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native JSON support"))
                          doom-doctor--warnings)))
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'fill
                                        (string-join
                                         (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                         "\n")))
                    :format nil)))
               (if
                   (featurep 'native-compile)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native compilation support"))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native compilation support"))
                          doom-doctor--warnings)))
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'fill
                                        (string-join
                                         (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                         "\n")))
                    :format nil)))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for private config conflicts..."))
                :format nil)
               (let*
                   ((xdg-dir
                     (concat
                      (or
                       (getenv "XDG_CONFIG_HOME")
                       "~/.config")
                      "/doom/"))
                    (doom-dir
                     (or
                      (getenv "DOOMDIR")
                      "~/.doom.d/"))
                    (dir
                     (if
                         (file-directory-p xdg-dir)
                         xdg-dir doom-dir)))
                 (if
                     (file-equal-p dir doom-emacs-dir)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                            (doom-print--class 'path dir)))
                        :format nil)
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'fill
                                              (string-join
                                               (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                               "\n")))
                          :format nil))))
                 (if
                     (and
                      (not
                       (file-equal-p xdg-dir doom-dir))
                      (file-directory-p xdg-dir)
                      (file-directory-p doom-dir))
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Detected two private configs, in %s and %s")
                         (abbreviate-file-name xdg-dir)
                         doom-dir)
                        :format nil)
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'fill
                                              (string-join
                                               (list "The second directory will be ignored, as it has lower precedence.")
                                               "\n")))
                          :format nil)))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for stale elc files..."))
                :format nil)
               (elc-check-dir doom-emacs-dir)
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for problematic git global settings..."))
                :format nil)
               (if
                   (executable-find "git")
                   (if
                       (= 0
                          (car
                           (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                       (progn
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                              :format nil))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                  doom-doctor--warnings)))
                         (let
                             ((doom-print-indent
                               (+
                                (if t doom-print-indent-increment 0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'fill
                                                (string-join
                                                 (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                                 "\n")))
                            :format nil))))
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                      :format nil))
                   (setq doom-doctor--errors
                         (cons
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                          doom-doctor--errors))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking Doom Emacs..."))
                :format nil)
               (condition-case ex
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (let
                         ((noninteractive nil)
                          kill-emacs-query-functions kill-emacs-hook)
                       (defvar doom-reloading-p nil)
                       (if
                           (file-exists-p doom-autoloads-file)
                           nil
                         (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                       (require 'doom-start)
                       (doom-initialize-packages))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'success "Initialized Doom Emacs %s")
                       doom-version)
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (if
                           (hash-table-p doom-modules)
                           (doom-print--class 'success "Detected %d modules"
                                              (hash-table-count doom-modules))
                         (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'success "Detected %d packages")
                       (length doom-packages))
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'start "Checking Doom core for irregularities..."))
                      :format nil)
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (let
                           ((--dolist-tail--
                             (list "savehist" "projectile.cache")))
                         (while --dolist-tail--
                           (let
                               ((file
                                 (car --dolist-tail--)))
                             (let*
                                 ((size
                                   (and t
                                        (condition-case nil
                                            (progn
                                              (doom-file-size file doom-cache-dir))
                                          (error nil)))))
                               (if size
                                   (if
                                       (> size 1048576)
                                       (progn
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                  (/ size 1024 1024.0)))
                                              :format nil))
                                           (setq doom-doctor--warnings
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                      (/ size 1024 1024.0)))
                                                  doom-doctor--warnings)))
                                         (let
                                             ((doom-print-indent
                                               (+
                                                (if t doom-print-indent-increment 0)
                                                doom-print-indent)))
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'fill
                                                                (string-join
                                                                 (list "Consider deleting it from your system (manually)")
                                                                 "\n")))
                                            :format nil))))
                                 nil))
                             (setq --dolist-tail--
                                   (cdr --dolist-tail--)))))
                       (if
                           (condition-case nil
                               (progn
                                 (executable-find doom-projectile-fd-binary))
                             (error nil))
                           nil
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                              :format nil))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                  doom-doctor--warnings))))
                       (require 'projectile)
                       (if
                           (projectile-project-root "~")
                           (progn
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                  :format nil))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                      doom-doctor--warnings)))
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'fill
                                                    (string-join
                                                     (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                     "\n")))
                                :format nil))))
                       (if
                           (and
                            (file-equal-p doom-user-dir "~/.config/doom")
                            (file-directory-p "~/.doom.d"))
                           (progn
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                               (doom-print--class 'path doom-user-dir))
                              :format nil)
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'fill
                                                    (string-join
                                                     (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                     "\n")))
                                :format nil))))
                       (if
                           (not
                            (executable-find "fc-list"))
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                :format nil))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                    doom-doctor--warnings)))
                         (if
                             (and
                              (cond
                               ((eq system-type 'gnu/linux)
                                (let nil
                                  (concat
                                   (or
                                    (getenv "XDG_DATA_HOME")
                                    "~/.local/share")
                                   "/fonts/")))
                               ((eq system-type 'darwin)
                                (let nil "~/Library/Fonts/")))
                              (require 'all-the-icons nil t))
                             (progn
                               (let
                                   ((temp-buffer
                                     (generate-new-buffer " *temp*" t)))
                                 (save-current-buffer
                                   (set-buffer temp-buffer)
                                   (unwind-protect
                                       (progn
                                         (let
                                             ((errors 0))
                                           (let*
                                               ((output
                                                 (doom-call-process "fc-list" "" "file"))
                                                (status
                                                 (if output
                                                     (car-safe
                                                      (prog1 output
                                                        (setq output
                                                              (cdr output))))
                                                   (signal 'wrong-number-of-arguments
                                                           (list
                                                            '(status . output)
                                                            (length output))))))
                                             (if
                                                 (not
                                                  (= 0 status))
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                                  :format nil)
                                               (insert
                                                (cdr
                                                 (doom-call-process "fc-list" "" "file")))
                                               (let
                                                   ((--dolist-tail-- all-the-icons-font-names))
                                                 (while --dolist-tail--
                                                   (let
                                                       ((font
                                                         (car --dolist-tail--)))
                                                     (if
                                                         (save-excursion
                                                           (re-search-backward font nil t))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--style 'green "Found font %s" font))
                                                          :format nil)
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'warn "Warning: couldn't find %S font")
                                                         font)
                                                        :format nil))
                                                     (setq --dolist-tail--
                                                           (cdr --dolist-tail--)))))
                                               (if
                                                   (> errors 0)
                                                   (progn
                                                     (let
                                                         ((doom-print-indent
                                                           (+
                                                            (if t doom-print-indent-increment 0)
                                                            doom-print-indent)))
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'fill
                                                                            (string-join
                                                                             (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                             "\n")))
                                                        :format nil))))))))
                                     (and
                                      (buffer-name temp-buffer)
                                      (kill-buffer temp-buffer)))))))))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                      :format nil)
                     (if
                         (file-directory-p doom-user-dir)
                         (progn
                           (let
                               ((doom-print-indent
                                 (+
                                  (if t doom-print-indent-increment 0)
                                  doom-print-indent)))
                             (elc-check-dir doom-user-dir))))
                     (if doom-modules
                         (progn
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'start "Checking your enabled modules..."))
                            :format nil)
                           (advice-add #'require :around #'doom-shut-up-a)
                           (maphash
                            #'(lambda
                                (key plist)
                                (let
                                    (doom-local-errors doom-local-warnings)
                                  (let
                                      (doom-doctor--errors doom-doctor--warnings)
                                    (condition-case ex
                                        (let
                                            ((doctor-file
                                              (doom-module-path
                                               (car key)
                                               (cdr key)
                                               "doctor.el"))
                                             (packages-file
                                              (doom-module-path
                                               (car key)
                                               (cdr key)
                                               "packages.el")))
                                          (let*
                                              ((doom-output-indent 6)
                                               (--cl-var--
                                                (let
                                                    (doom-packages doom-disabled-packages)
                                                  (load packages-file 'noerror 'nomessage)
                                                  (mapcar #'car doom-packages)))
                                               (name nil))
                                            (while
                                                (consp --cl-var--)
                                              (setq name
                                                    (car --cl-var--))
                                              (if
                                                  (or
                                                   (doom-package-get name :disable)
                                                   (eval
                                                    (doom-package-get name :ignore))
                                                   (plist-member
                                                    (doom-package-get name :recipe)
                                                    :local-repo)
                                                   (locate-library
                                                    (symbol-name name))
                                                   (doom-package-built-in-p name)
                                                   (doom-package-installed-p name))
                                                  (progn)
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'error "Missing emacs package: %S")
                                                  name)
                                                 :format nil))
                                              (setq --cl-var--
                                                    (cdr --cl-var--)))
                                            nil)
                                          (let
                                              ((inhibit-message t))
                                            (load doctor-file 'noerror 'nomessage)))
                                      ((debug file-missing)
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "%s"
                                                                (error-message-string ex)))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "%s"
                                                                    (error-message-string ex)))
                                                doom-doctor--errors))))
                                      ((debug error)
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Syntax error: %s" ex))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "Syntax error: %s" ex))
                                                doom-doctor--errors)))))
                                    (if
                                        (or doom-doctor--errors doom-doctor--warnings)
                                        (progn
                                          (let
                                              ((doom-print-indent
                                                (+
                                                 (if t doom-print-indent-increment 0)
                                                 doom-print-indent)))
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'start
                                                                 (doom-print--style 'bold "%s %s"))
                                              (car key)
                                              (cdr key))
                                             :format nil)
                                            (doom-print
                                             (doom-print--format "%s"
                                                                 (string-join
                                                                  (append doom-doctor--errors doom-doctor--warnings)
                                                                  "\n"))
                                             :format nil))
                                          (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                                  (setq doom-doctor--errors
                                        (append doom-doctor--errors doom-local-errors))
                                  (setq doom-doctor--warnings
                                        (append doom-doctor--warnings doom-local-warnings))))
                            doom-modules))))
                 ((debug error)
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                           (or
                                            (cdr-safe ex)
                                            (car ex))))
                       :format nil))
                    (setq doom-doctor--warnings
                          (cons
                           (doom-print--format
                            (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                               (or
                                                (cdr-safe ex)
                                                (car ex))))
                           doom-doctor--warnings)))
                  (setq doom-modules nil)))
               (terpri)
               (let
                   ((--dolist-tail--
                     (list
                      (list doom-doctor--warnings "warning" 'yellow)
                      (list doom-doctor--errors "error" 'red))))
                 (while --dolist-tail--
                   (let
                       ((msg
                         (car --dolist-tail--)))
                     (if
                         (car msg)
                         (progn
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'color
                                                (nth 2 msg)
                                                (if
                                                    (cdr msg)
                                                    "There are %d %ss!" "There is %d %s!")
                                                (length
                                                 (car msg))
                                                (nth 1 msg)))
                            :format nil)))
                     (setq --dolist-tail--
                           (cdr --dolist-tail--)))))
               (if
                   (or doom-doctor--errors doom-doctor--warnings)
                   nil
                 (doom-print
                  (doom-print--format
                   (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
                  :format nil))
               (exit! :pager\? "+G")))))
  (alist)
  (key :completion . vertico)
  (plist :flags nil :path "c:/Users/threddast/.emacs.d/modules/completion/vertico/")
  (doom-local-errors)
  (doom-local-warnings)
  (doctor-file . "c:/Users/threddast/.emacs.d/modules/completion/vertico/doctor.el")
  (packages-file . "c:/Users/threddast/.emacs.d/modules/completion/vertico/packages.el")))

;;;; 8
((condition-case ex
     (let
         ((doctor-file
           (doom-module-path
            (car key)
            (cdr key)
            "doctor.el"))
          (packages-file
           (doom-module-path
            (car key)
            (cdr key)
            "packages.el")))
       (let*
           ((doom-output-indent 6)
            (--cl-var--
             (let
                 (doom-packages doom-disabled-packages)
               (load packages-file 'noerror 'nomessage)
               (mapcar #'car doom-packages)))
            (name nil))
         (while
             (consp --cl-var--)
           (setq name
                 (car --cl-var--))
           (if
               (or
                (doom-package-get name :disable)
                (eval
                 (doom-package-get name :ignore))
                (plist-member
                 (doom-package-get name :recipe)
                 :local-repo)
                (locate-library
                 (symbol-name name))
                (doom-package-built-in-p name)
                (doom-package-installed-p name))
               (progn)
             (doom-print
              (doom-print--format
               (doom-print--class 'error "Missing emacs package: %S")
               name)
              :format nil))
           (setq --cl-var--
                 (cdr --cl-var--)))
         nil)
       (let
           ((inhibit-message t))
         (load doctor-file 'noerror 'nomessage)))
   ((debug file-missing)
    (progn
      (if inhibit-message nil
        (doom-print
         (doom-print--format
          (doom-print--class 'error "%s"
                             (error-message-string ex)))
         :format nil))
      (setq doom-doctor--errors
            (cons
             (doom-print--format
              (doom-print--class 'error "%s"
                                 (error-message-string ex)))
             doom-doctor--errors))))
   ((debug error)
    (progn
      (if inhibit-message nil
        (doom-print
         (doom-print--format
          (doom-print--class 'error "Syntax error: %s" ex))
         :format nil))
      (setq doom-doctor--errors
            (cons
             (doom-print--format
              (doom-print--class 'error "Syntax error: %s" ex))
             doom-doctor--errors)))))
 nil)

;;;; 9
((let
     (doom-doctor--errors doom-doctor--warnings)
   (condition-case ex
       (let
           ((doctor-file
             (doom-module-path
              (car key)
              (cdr key)
              "doctor.el"))
            (packages-file
             (doom-module-path
              (car key)
              (cdr key)
              "packages.el")))
         (let*
             ((doom-output-indent 6)
              (--cl-var--
               (let
                   (doom-packages doom-disabled-packages)
                 (load packages-file 'noerror 'nomessage)
                 (mapcar #'car doom-packages)))
              (name nil))
           (while
               (consp --cl-var--)
             (setq name
                   (car --cl-var--))
             (if
                 (or
                  (doom-package-get name :disable)
                  (eval
                   (doom-package-get name :ignore))
                  (plist-member
                   (doom-package-get name :recipe)
                   :local-repo)
                  (locate-library
                   (symbol-name name))
                  (doom-package-built-in-p name)
                  (doom-package-installed-p name))
                 (progn)
               (doom-print
                (doom-print--format
                 (doom-print--class 'error "Missing emacs package: %S")
                 name)
                :format nil))
             (setq --cl-var--
                   (cdr --cl-var--)))
           nil)
         (let
             ((inhibit-message t))
           (load doctor-file 'noerror 'nomessage)))
     ((debug file-missing)
      (progn
        (if inhibit-message nil
          (doom-print
           (doom-print--format
            (doom-print--class 'error "%s"
                               (error-message-string ex)))
           :format nil))
        (setq doom-doctor--errors
              (cons
               (doom-print--format
                (doom-print--class 'error "%s"
                                   (error-message-string ex)))
               doom-doctor--errors))))
     ((debug error)
      (progn
        (if inhibit-message nil
          (doom-print
           (doom-print--format
            (doom-print--class 'error "Syntax error: %s" ex))
           :format nil))
        (setq doom-doctor--errors
              (cons
               (doom-print--format
                (doom-print--class 'error "Syntax error: %s" ex))
               doom-doctor--errors)))))
   (if
       (or doom-doctor--errors doom-doctor--warnings)
       (progn
         (let
             ((doom-print-indent
               (+
                (if t doom-print-indent-increment 0)
                doom-print-indent)))
           (doom-print
            (doom-print--format
             (doom-print--class 'start
                                (doom-print--style 'bold "%s %s"))
             (car key)
             (cdr key))
            :format nil)
           (doom-print
            (doom-print--format "%s"
                                (string-join
                                 (append doom-doctor--errors doom-doctor--warnings)
                                 "\n"))
            :format nil))
         (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
 ((doom-doctor--errors)
  (doom-doctor--warnings)))

;;;; 10
((let
     (doom-local-errors doom-local-warnings)
   (let
       (doom-doctor--errors doom-doctor--warnings)
     (condition-case ex
         (let
             ((doctor-file
               (doom-module-path
                (car key)
                (cdr key)
                "doctor.el"))
              (packages-file
               (doom-module-path
                (car key)
                (cdr key)
                "packages.el")))
           (let*
               ((doom-output-indent 6)
                (--cl-var--
                 (let
                     (doom-packages doom-disabled-packages)
                   (load packages-file 'noerror 'nomessage)
                   (mapcar #'car doom-packages)))
                (name nil))
             (while
                 (consp --cl-var--)
               (setq name
                     (car --cl-var--))
               (if
                   (or
                    (doom-package-get name :disable)
                    (eval
                     (doom-package-get name :ignore))
                    (plist-member
                     (doom-package-get name :recipe)
                     :local-repo)
                    (locate-library
                     (symbol-name name))
                    (doom-package-built-in-p name)
                    (doom-package-installed-p name))
                   (progn)
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'error "Missing emacs package: %S")
                   name)
                  :format nil))
               (setq --cl-var--
                     (cdr --cl-var--)))
             nil)
           (let
               ((inhibit-message t))
             (load doctor-file 'noerror 'nomessage)))
       ((debug file-missing)
        (progn
          (if inhibit-message nil
            (doom-print
             (doom-print--format
              (doom-print--class 'error "%s"
                                 (error-message-string ex)))
             :format nil))
          (setq doom-doctor--errors
                (cons
                 (doom-print--format
                  (doom-print--class 'error "%s"
                                     (error-message-string ex)))
                 doom-doctor--errors))))
       ((debug error)
        (progn
          (if inhibit-message nil
            (doom-print
             (doom-print--format
              (doom-print--class 'error "Syntax error: %s" ex))
             :format nil))
          (setq doom-doctor--errors
                (cons
                 (doom-print--format
                  (doom-print--class 'error "Syntax error: %s" ex))
                 doom-doctor--errors)))))
     (if
         (or doom-doctor--errors doom-doctor--warnings)
         (progn
           (let
               ((doom-print-indent
                 (+
                  (if t doom-print-indent-increment 0)
                  doom-print-indent)))
             (doom-print
              (doom-print--format
               (doom-print--class 'start
                                  (doom-print--style 'bold "%s %s"))
               (car key)
               (cdr key))
              :format nil)
             (doom-print
              (doom-print--format "%s"
                                  (string-join
                                   (append doom-doctor--errors doom-doctor--warnings)
                                   "\n"))
              :format nil))
           (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
   (setq doom-doctor--errors
         (append doom-doctor--errors doom-local-errors))
   (setq doom-doctor--warnings
         (append doom-doctor--warnings doom-local-warnings)))
 ((cli . #s(doom-cli
            ("doom" "doctor")
            nil
            (("SUMMARY" . "Diagnoses common issues on your system.")
             ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
            nil nil nil nil
            (:benchmark nil :prefix
                        (doom)
                        :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
            (closure
             (t)
             (cli alist)
             (let nil
               (doom-print
                (doom-print--format "The doctor will see you now...\n")
                :format nil)
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking your Emacs version..."))
                :format nil)
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (cond
                  ((string= ".50"
                            (substring emacs-version -3))
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                            doom-doctor--errors)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                           "\n")))
                      :format nil)))
                  ((> emacs-major-version 28)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Emacs %s detected" emacs-version))
                        :format nil))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Emacs %s detected" emacs-version))
                            doom-doctor--warnings)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                           "\n")))
                      :format nil)))
                  ((< emacs-major-version 27)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                            doom-doctor--errors))))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for Doom's prerequisites..."))
                :format nil)
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (if
                     (not
                      (executable-find "git"))
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                          :format nil))
                       (setq doom-doctor--errors
                             (cons
                              (doom-print--format
                               (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                              doom-doctor--errors)))
                   (let
                       ((save-match-data-internal
                         (match-data)))
                     (unwind-protect
                         (progn
                           (let*
                               ((version
                                 (cdr
                                  (doom-call-process "git" "version")))
                                (version
                                 (and
                                  (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                  (match-string 1 version))))
                             (if version
                                 (if
                                     (version< version "2.23")
                                     (progn
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                doom-doctor--errors)))))
                               (progn
                                 (if inhibit-message nil
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                    :format nil))
                                 (setq doom-doctor--warnings
                                       (cons
                                        (doom-print--format
                                         (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                        doom-doctor--warnings))))))
                       (set-match-data save-match-data-internal 'evaporate))))
                 (if
                     (executable-find "rg")
                     nil
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                            doom-doctor--errors)))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for Emacs config conflicts..."))
                :format nil)
               (if
                   (file-exists-p "~/.emacs")
                   (progn
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                          :format nil))
                       (setq doom-doctor--warnings
                             (cons
                              (doom-print--format
                               (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                              doom-doctor--warnings)))
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'fill
                                            (string-join
                                             (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                             "\n")))
                        :format nil))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for great Emacs features..."))
                :format nil)
               (if
                   (functionp 'json-serialize)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native JSON support"))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native JSON support"))
                          doom-doctor--warnings)))
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'fill
                                        (string-join
                                         (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                         "\n")))
                    :format nil)))
               (if
                   (featurep 'native-compile)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native compilation support"))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native compilation support"))
                          doom-doctor--warnings)))
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'fill
                                        (string-join
                                         (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                         "\n")))
                    :format nil)))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for private config conflicts..."))
                :format nil)
               (let*
                   ((xdg-dir
                     (concat
                      (or
                       (getenv "XDG_CONFIG_HOME")
                       "~/.config")
                      "/doom/"))
                    (doom-dir
                     (or
                      (getenv "DOOMDIR")
                      "~/.doom.d/"))
                    (dir
                     (if
                         (file-directory-p xdg-dir)
                         xdg-dir doom-dir)))
                 (if
                     (file-equal-p dir doom-emacs-dir)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                            (doom-print--class 'path dir)))
                        :format nil)
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'fill
                                              (string-join
                                               (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                               "\n")))
                          :format nil))))
                 (if
                     (and
                      (not
                       (file-equal-p xdg-dir doom-dir))
                      (file-directory-p xdg-dir)
                      (file-directory-p doom-dir))
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Detected two private configs, in %s and %s")
                         (abbreviate-file-name xdg-dir)
                         doom-dir)
                        :format nil)
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'fill
                                              (string-join
                                               (list "The second directory will be ignored, as it has lower precedence.")
                                               "\n")))
                          :format nil)))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for stale elc files..."))
                :format nil)
               (elc-check-dir doom-emacs-dir)
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for problematic git global settings..."))
                :format nil)
               (if
                   (executable-find "git")
                   (if
                       (= 0
                          (car
                           (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                       (progn
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                              :format nil))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                  doom-doctor--warnings)))
                         (let
                             ((doom-print-indent
                               (+
                                (if t doom-print-indent-increment 0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'fill
                                                (string-join
                                                 (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                                 "\n")))
                            :format nil))))
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                      :format nil))
                   (setq doom-doctor--errors
                         (cons
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                          doom-doctor--errors))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking Doom Emacs..."))
                :format nil)
               (condition-case ex
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (let
                         ((noninteractive nil)
                          kill-emacs-query-functions kill-emacs-hook)
                       (defvar doom-reloading-p nil)
                       (if
                           (file-exists-p doom-autoloads-file)
                           nil
                         (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                       (require 'doom-start)
                       (doom-initialize-packages))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'success "Initialized Doom Emacs %s")
                       doom-version)
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (if
                           (hash-table-p doom-modules)
                           (doom-print--class 'success "Detected %d modules"
                                              (hash-table-count doom-modules))
                         (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'success "Detected %d packages")
                       (length doom-packages))
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'start "Checking Doom core for irregularities..."))
                      :format nil)
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (let
                           ((--dolist-tail--
                             (list "savehist" "projectile.cache")))
                         (while --dolist-tail--
                           (let
                               ((file
                                 (car --dolist-tail--)))
                             (let*
                                 ((size
                                   (and t
                                        (condition-case nil
                                            (progn
                                              (doom-file-size file doom-cache-dir))
                                          (error nil)))))
                               (if size
                                   (if
                                       (> size 1048576)
                                       (progn
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                  (/ size 1024 1024.0)))
                                              :format nil))
                                           (setq doom-doctor--warnings
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                      (/ size 1024 1024.0)))
                                                  doom-doctor--warnings)))
                                         (let
                                             ((doom-print-indent
                                               (+
                                                (if t doom-print-indent-increment 0)
                                                doom-print-indent)))
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'fill
                                                                (string-join
                                                                 (list "Consider deleting it from your system (manually)")
                                                                 "\n")))
                                            :format nil))))
                                 nil))
                             (setq --dolist-tail--
                                   (cdr --dolist-tail--)))))
                       (if
                           (condition-case nil
                               (progn
                                 (executable-find doom-projectile-fd-binary))
                             (error nil))
                           nil
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                              :format nil))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                  doom-doctor--warnings))))
                       (require 'projectile)
                       (if
                           (projectile-project-root "~")
                           (progn
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                  :format nil))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                      doom-doctor--warnings)))
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'fill
                                                    (string-join
                                                     (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                     "\n")))
                                :format nil))))
                       (if
                           (and
                            (file-equal-p doom-user-dir "~/.config/doom")
                            (file-directory-p "~/.doom.d"))
                           (progn
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                               (doom-print--class 'path doom-user-dir))
                              :format nil)
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'fill
                                                    (string-join
                                                     (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                     "\n")))
                                :format nil))))
                       (if
                           (not
                            (executable-find "fc-list"))
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                :format nil))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                    doom-doctor--warnings)))
                         (if
                             (and
                              (cond
                               ((eq system-type 'gnu/linux)
                                (let nil
                                  (concat
                                   (or
                                    (getenv "XDG_DATA_HOME")
                                    "~/.local/share")
                                   "/fonts/")))
                               ((eq system-type 'darwin)
                                (let nil "~/Library/Fonts/")))
                              (require 'all-the-icons nil t))
                             (progn
                               (let
                                   ((temp-buffer
                                     (generate-new-buffer " *temp*" t)))
                                 (save-current-buffer
                                   (set-buffer temp-buffer)
                                   (unwind-protect
                                       (progn
                                         (let
                                             ((errors 0))
                                           (let*
                                               ((output
                                                 (doom-call-process "fc-list" "" "file"))
                                                (status
                                                 (if output
                                                     (car-safe
                                                      (prog1 output
                                                        (setq output
                                                              (cdr output))))
                                                   (signal 'wrong-number-of-arguments
                                                           (list
                                                            '(status . output)
                                                            (length output))))))
                                             (if
                                                 (not
                                                  (= 0 status))
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                                  :format nil)
                                               (insert
                                                (cdr
                                                 (doom-call-process "fc-list" "" "file")))
                                               (let
                                                   ((--dolist-tail-- all-the-icons-font-names))
                                                 (while --dolist-tail--
                                                   (let
                                                       ((font
                                                         (car --dolist-tail--)))
                                                     (if
                                                         (save-excursion
                                                           (re-search-backward font nil t))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--style 'green "Found font %s" font))
                                                          :format nil)
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'warn "Warning: couldn't find %S font")
                                                         font)
                                                        :format nil))
                                                     (setq --dolist-tail--
                                                           (cdr --dolist-tail--)))))
                                               (if
                                                   (> errors 0)
                                                   (progn
                                                     (let
                                                         ((doom-print-indent
                                                           (+
                                                            (if t doom-print-indent-increment 0)
                                                            doom-print-indent)))
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'fill
                                                                            (string-join
                                                                             (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                             "\n")))
                                                        :format nil))))))))
                                     (and
                                      (buffer-name temp-buffer)
                                      (kill-buffer temp-buffer)))))))))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                      :format nil)
                     (if
                         (file-directory-p doom-user-dir)
                         (progn
                           (let
                               ((doom-print-indent
                                 (+
                                  (if t doom-print-indent-increment 0)
                                  doom-print-indent)))
                             (elc-check-dir doom-user-dir))))
                     (if doom-modules
                         (progn
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'start "Checking your enabled modules..."))
                            :format nil)
                           (advice-add #'require :around #'doom-shut-up-a)
                           (maphash
                            #'(lambda
                                (key plist)
                                (let
                                    (doom-local-errors doom-local-warnings)
                                  (let
                                      (doom-doctor--errors doom-doctor--warnings)
                                    (condition-case ex
                                        (let
                                            ((doctor-file
                                              (doom-module-path
                                               (car key)
                                               (cdr key)
                                               "doctor.el"))
                                             (packages-file
                                              (doom-module-path
                                               (car key)
                                               (cdr key)
                                               "packages.el")))
                                          (let*
                                              ((doom-output-indent 6)
                                               (--cl-var--
                                                (let
                                                    (doom-packages doom-disabled-packages)
                                                  (load packages-file 'noerror 'nomessage)
                                                  (mapcar #'car doom-packages)))
                                               (name nil))
                                            (while
                                                (consp --cl-var--)
                                              (setq name
                                                    (car --cl-var--))
                                              (if
                                                  (or
                                                   (doom-package-get name :disable)
                                                   (eval
                                                    (doom-package-get name :ignore))
                                                   (plist-member
                                                    (doom-package-get name :recipe)
                                                    :local-repo)
                                                   (locate-library
                                                    (symbol-name name))
                                                   (doom-package-built-in-p name)
                                                   (doom-package-installed-p name))
                                                  (progn)
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'error "Missing emacs package: %S")
                                                  name)
                                                 :format nil))
                                              (setq --cl-var--
                                                    (cdr --cl-var--)))
                                            nil)
                                          (let
                                              ((inhibit-message t))
                                            (load doctor-file 'noerror 'nomessage)))
                                      ((debug file-missing)
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "%s"
                                                                (error-message-string ex)))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "%s"
                                                                    (error-message-string ex)))
                                                doom-doctor--errors))))
                                      ((debug error)
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Syntax error: %s" ex))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "Syntax error: %s" ex))
                                                doom-doctor--errors)))))
                                    (if
                                        (or doom-doctor--errors doom-doctor--warnings)
                                        (progn
                                          (let
                                              ((doom-print-indent
                                                (+
                                                 (if t doom-print-indent-increment 0)
                                                 doom-print-indent)))
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'start
                                                                 (doom-print--style 'bold "%s %s"))
                                              (car key)
                                              (cdr key))
                                             :format nil)
                                            (doom-print
                                             (doom-print--format "%s"
                                                                 (string-join
                                                                  (append doom-doctor--errors doom-doctor--warnings)
                                                                  "\n"))
                                             :format nil))
                                          (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                                  (setq doom-doctor--errors
                                        (append doom-doctor--errors doom-local-errors))
                                  (setq doom-doctor--warnings
                                        (append doom-doctor--warnings doom-local-warnings))))
                            doom-modules))))
                 ((debug error)
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                           (or
                                            (cdr-safe ex)
                                            (car ex))))
                       :format nil))
                    (setq doom-doctor--warnings
                          (cons
                           (doom-print--format
                            (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                               (or
                                                (cdr-safe ex)
                                                (car ex))))
                           doom-doctor--warnings)))
                  (setq doom-modules nil)))
               (terpri)
               (let
                   ((--dolist-tail--
                     (list
                      (list doom-doctor--warnings "warning" 'yellow)
                      (list doom-doctor--errors "error" 'red))))
                 (while --dolist-tail--
                   (let
                       ((msg
                         (car --dolist-tail--)))
                     (if
                         (car msg)
                         (progn
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'color
                                                (nth 2 msg)
                                                (if
                                                    (cdr msg)
                                                    "There are %d %ss!" "There is %d %s!")
                                                (length
                                                 (car msg))
                                                (nth 1 msg)))
                            :format nil)))
                     (setq --dolist-tail--
                           (cdr --dolist-tail--)))))
               (if
                   (or doom-doctor--errors doom-doctor--warnings)
                   nil
                 (doom-print
                  (doom-print--format
                   (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
                  :format nil))
               (exit! :pager\? "+G")))))
  (alist)
  (key :completion . vertico)
  (plist :flags nil :path "c:/Users/threddast/.emacs.d/modules/completion/vertico/")
  (doom-local-errors)
  (doom-local-warnings)))

;;;; 11
(((closure
   ((alist)
    (cli . #s(doom-cli
              ("doom" "doctor")
              nil
              (("SUMMARY" . "Diagnoses common issues on your system.")
               ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
              nil nil nil nil
              (:benchmark nil :prefix
                          (doom)
                          :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
              (closure
               (t)
               (cli alist)
               (let nil
                 (doom-print
                  (doom-print--format "The doctor will see you now...\n")
                  :format nil)
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'start "Checking your Emacs version..."))
                  :format nil)
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (cond
                    ((string= ".50"
                              (substring emacs-version -3))
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                          :format nil))
                       (setq doom-doctor--errors
                             (cons
                              (doom-print--format
                               (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                              doom-doctor--errors)))
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'fill
                                            (string-join
                                             (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                             "\n")))
                        :format nil)))
                    ((> emacs-major-version 28)
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Emacs %s detected" emacs-version))
                          :format nil))
                       (setq doom-doctor--warnings
                             (cons
                              (doom-print--format
                               (doom-print--class 'warn "Emacs %s detected" emacs-version))
                              doom-doctor--warnings)))
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'fill
                                            (string-join
                                             (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                             "\n")))
                        :format nil)))
                    ((< emacs-major-version 27)
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                          :format nil))
                       (setq doom-doctor--errors
                             (cons
                              (doom-print--format
                               (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                              doom-doctor--errors))))))
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'start "Checking for Doom's prerequisites..."))
                  :format nil)
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (if
                       (not
                        (executable-find "git"))
                       (progn
                         (if inhibit-message nil
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                            :format nil))
                         (setq doom-doctor--errors
                               (cons
                                (doom-print--format
                                 (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                                doom-doctor--errors)))
                     (let
                         ((save-match-data-internal
                           (match-data)))
                       (unwind-protect
                           (progn
                             (let*
                                 ((version
                                   (cdr
                                    (doom-call-process "git" "version")))
                                  (version
                                   (and
                                    (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                    (match-string 1 version))))
                               (if version
                                   (if
                                       (version< version "2.23")
                                       (progn
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                              :format nil))
                                           (setq doom-doctor--errors
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                  doom-doctor--errors)))))
                                 (progn
                                   (if inhibit-message nil
                                     (doom-print
                                      (doom-print--format
                                       (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                      :format nil))
                                   (setq doom-doctor--warnings
                                         (cons
                                          (doom-print--format
                                           (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                          doom-doctor--warnings))))))
                         (set-match-data save-match-data-internal 'evaporate))))
                   (if
                       (executable-find "rg")
                       nil
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                          :format nil))
                       (setq doom-doctor--errors
                             (cons
                              (doom-print--format
                               (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                              doom-doctor--errors)))))
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'start "Checking for Emacs config conflicts..."))
                  :format nil)
                 (if
                     (file-exists-p "~/.emacs")
                     (progn
                       (progn
                         (if inhibit-message nil
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                            :format nil))
                         (setq doom-doctor--warnings
                               (cons
                                (doom-print--format
                                 (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                                doom-doctor--warnings)))
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'fill
                                              (string-join
                                               (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                               "\n")))
                          :format nil))))
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'start "Checking for great Emacs features..."))
                  :format nil)
                 (if
                     (functionp 'json-serialize)
                     nil
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Emacs was not built with native JSON support"))
                        :format nil))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Emacs was not built with native JSON support"))
                            doom-doctor--warnings)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                           "\n")))
                      :format nil)))
                 (if
                     (featurep 'native-compile)
                     nil
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Emacs was not built with native compilation support"))
                        :format nil))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Emacs was not built with native compilation support"))
                            doom-doctor--warnings)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                           "\n")))
                      :format nil)))
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'start "Checking for private config conflicts..."))
                  :format nil)
                 (let*
                     ((xdg-dir
                       (concat
                        (or
                         (getenv "XDG_CONFIG_HOME")
                         "~/.config")
                        "/doom/"))
                      (doom-dir
                       (or
                        (getenv "DOOMDIR")
                        "~/.doom.d/"))
                      (dir
                       (if
                           (file-directory-p xdg-dir)
                           xdg-dir doom-dir)))
                   (if
                       (file-equal-p dir doom-emacs-dir)
                       (progn
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                              (doom-print--class 'path dir)))
                          :format nil)
                         (let
                             ((doom-print-indent
                               (+
                                (if t doom-print-indent-increment 0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'fill
                                                (string-join
                                                 (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                                 "\n")))
                            :format nil))))
                   (if
                       (and
                        (not
                         (file-equal-p xdg-dir doom-dir))
                        (file-directory-p xdg-dir)
                        (file-directory-p doom-dir))
                       (progn
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Detected two private configs, in %s and %s")
                           (abbreviate-file-name xdg-dir)
                           doom-dir)
                          :format nil)
                         (let
                             ((doom-print-indent
                               (+
                                (if t doom-print-indent-increment 0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'fill
                                                (string-join
                                                 (list "The second directory will be ignored, as it has lower precedence.")
                                                 "\n")))
                            :format nil)))))
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'start "Checking for stale elc files..."))
                  :format nil)
                 (elc-check-dir doom-emacs-dir)
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'start "Checking for problematic git global settings..."))
                  :format nil)
                 (if
                     (executable-find "git")
                     (if
                         (= 0
                            (car
                             (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                         (progn
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                :format nil))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                    doom-doctor--warnings)))
                           (let
                               ((doom-print-indent
                                 (+
                                  (if t doom-print-indent-increment 0)
                                  doom-print-indent)))
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'fill
                                                  (string-join
                                                   (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                                   "\n")))
                              :format nil))))
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                            doom-doctor--errors))))
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'start "Checking Doom Emacs..."))
                  :format nil)
                 (condition-case ex
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (let
                           ((noninteractive nil)
                            kill-emacs-query-functions kill-emacs-hook)
                         (defvar doom-reloading-p nil)
                         (if
                             (file-exists-p doom-autoloads-file)
                             nil
                           (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                         (require 'doom-start)
                         (doom-initialize-packages))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'success "Initialized Doom Emacs %s")
                         doom-version)
                        :format nil)
                       (doom-print
                        (doom-print--format
                         (if
                             (hash-table-p doom-modules)
                             (doom-print--class 'success "Detected %d modules"
                                                (hash-table-count doom-modules))
                           (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                        :format nil)
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'success "Detected %d packages")
                         (length doom-packages))
                        :format nil)
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'start "Checking Doom core for irregularities..."))
                        :format nil)
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (let
                             ((--dolist-tail--
                               (list "savehist" "projectile.cache")))
                           (while --dolist-tail--
                             (let
                                 ((file
                                   (car --dolist-tail--)))
                               (let*
                                   ((size
                                     (and t
                                          (condition-case nil
                                              (progn
                                                (doom-file-size file doom-cache-dir))
                                            (error nil)))))
                                 (if size
                                     (if
                                         (> size 1048576)
                                         (progn
                                           (progn
                                             (if inhibit-message nil
                                               (doom-print
                                                (doom-print--format
                                                 (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                    (/ size 1024 1024.0)))
                                                :format nil))
                                             (setq doom-doctor--warnings
                                                   (cons
                                                    (doom-print--format
                                                     (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                        (/ size 1024 1024.0)))
                                                    doom-doctor--warnings)))
                                           (let
                                               ((doom-print-indent
                                                 (+
                                                  (if t doom-print-indent-increment 0)
                                                  doom-print-indent)))
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'fill
                                                                  (string-join
                                                                   (list "Consider deleting it from your system (manually)")
                                                                   "\n")))
                                              :format nil))))
                                   nil))
                               (setq --dolist-tail--
                                     (cdr --dolist-tail--)))))
                         (if
                             (condition-case nil
                                 (progn
                                   (executable-find doom-projectile-fd-binary))
                               (error nil))
                             nil
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                :format nil))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                    doom-doctor--warnings))))
                         (require 'projectile)
                         (if
                             (projectile-project-root "~")
                             (progn
                               (progn
                                 (if inhibit-message nil
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                    :format nil))
                                 (setq doom-doctor--warnings
                                       (cons
                                        (doom-print--format
                                         (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                        doom-doctor--warnings)))
                               (let
                                   ((doom-print-indent
                                     (+
                                      (if t doom-print-indent-increment 0)
                                      doom-print-indent)))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'fill
                                                      (string-join
                                                       (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                       "\n")))
                                  :format nil))))
                         (if
                             (and
                              (file-equal-p doom-user-dir "~/.config/doom")
                              (file-directory-p "~/.doom.d"))
                             (progn
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                                 (doom-print--class 'path doom-user-dir))
                                :format nil)
                               (let
                                   ((doom-print-indent
                                     (+
                                      (if t doom-print-indent-increment 0)
                                      doom-print-indent)))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'fill
                                                      (string-join
                                                       (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                       "\n")))
                                  :format nil))))
                         (if
                             (not
                              (executable-find "fc-list"))
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                  :format nil))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                      doom-doctor--warnings)))
                           (if
                               (and
                                (cond
                                 ((eq system-type 'gnu/linux)
                                  (let nil
                                    (concat
                                     (or
                                      (getenv "XDG_DATA_HOME")
                                      "~/.local/share")
                                     "/fonts/")))
                                 ((eq system-type 'darwin)
                                  (let nil "~/Library/Fonts/")))
                                (require 'all-the-icons nil t))
                               (progn
                                 (let
                                     ((temp-buffer
                                       (generate-new-buffer " *temp*" t)))
                                   (save-current-buffer
                                     (set-buffer temp-buffer)
                                     (unwind-protect
                                         (progn
                                           (let
                                               ((errors 0))
                                             (let*
                                                 ((output
                                                   (doom-call-process "fc-list" "" "file"))
                                                  (status
                                                   (if output
                                                       (car-safe
                                                        (prog1 output
                                                          (setq output
                                                                (cdr output))))
                                                     (signal 'wrong-number-of-arguments
                                                             (list
                                                              '(status . output)
                                                              (length output))))))
                                               (if
                                                   (not
                                                    (= 0 status))
                                                   (doom-print
                                                    (doom-print--format
                                                     (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                                    :format nil)
                                                 (insert
                                                  (cdr
                                                   (doom-call-process "fc-list" "" "file")))
                                                 (let
                                                     ((--dolist-tail-- all-the-icons-font-names))
                                                   (while --dolist-tail--
                                                     (let
                                                         ((font
                                                           (car --dolist-tail--)))
                                                       (if
                                                           (save-excursion
                                                             (re-search-backward font nil t))
                                                           (doom-print
                                                            (doom-print--format
                                                             (doom-print--style 'green "Found font %s" font))
                                                            :format nil)
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--class 'warn "Warning: couldn't find %S font")
                                                           font)
                                                          :format nil))
                                                       (setq --dolist-tail--
                                                             (cdr --dolist-tail--)))))
                                                 (if
                                                     (> errors 0)
                                                     (progn
                                                       (let
                                                           ((doom-print-indent
                                                             (+
                                                              (if t doom-print-indent-increment 0)
                                                              doom-print-indent)))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--class 'fill
                                                                              (string-join
                                                                               (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                               "\n")))
                                                          :format nil))))))))
                                       (and
                                        (buffer-name temp-buffer)
                                        (kill-buffer temp-buffer)))))))))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                        :format nil)
                       (if
                           (file-directory-p doom-user-dir)
                           (progn
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (elc-check-dir doom-user-dir))))
                       (if doom-modules
                           (progn
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'start "Checking your enabled modules..."))
                              :format nil)
                             (advice-add #'require :around #'doom-shut-up-a)
                             (maphash
                              #'(lambda
                                  (key plist)
                                  (let
                                      (doom-local-errors doom-local-warnings)
                                    (let
                                        (doom-doctor--errors doom-doctor--warnings)
                                      (condition-case ex
                                          (let
                                              ((doctor-file
                                                (doom-module-path
                                                 (car key)
                                                 (cdr key)
                                                 "doctor.el"))
                                               (packages-file
                                                (doom-module-path
                                                 (car key)
                                                 (cdr key)
                                                 "packages.el")))
                                            (let*
                                                ((doom-output-indent 6)
                                                 (--cl-var--
                                                  (let
                                                      (doom-packages doom-disabled-packages)
                                                    (load packages-file 'noerror 'nomessage)
                                                    (mapcar #'car doom-packages)))
                                                 (name nil))
                                              (while
                                                  (consp --cl-var--)
                                                (setq name
                                                      (car --cl-var--))
                                                (if
                                                    (or
                                                     (doom-package-get name :disable)
                                                     (eval
                                                      (doom-package-get name :ignore))
                                                     (plist-member
                                                      (doom-package-get name :recipe)
                                                      :local-repo)
                                                     (locate-library
                                                      (symbol-name name))
                                                     (doom-package-built-in-p name)
                                                     (doom-package-installed-p name))
                                                    (progn)
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'error "Missing emacs package: %S")
                                                    name)
                                                   :format nil))
                                                (setq --cl-var--
                                                      (cdr --cl-var--)))
                                              nil)
                                            (let
                                                ((inhibit-message t))
                                              (load doctor-file 'noerror 'nomessage)))
                                        ((debug file-missing)
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'error "%s"
                                                                  (error-message-string ex)))
                                              :format nil))
                                           (setq doom-doctor--errors
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'error "%s"
                                                                      (error-message-string ex)))
                                                  doom-doctor--errors))))
                                        ((debug error)
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'error "Syntax error: %s" ex))
                                              :format nil))
                                           (setq doom-doctor--errors
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'error "Syntax error: %s" ex))
                                                  doom-doctor--errors)))))
                                      (if
                                          (or doom-doctor--errors doom-doctor--warnings)
                                          (progn
                                            (let
                                                ((doom-print-indent
                                                  (+
                                                   (if t doom-print-indent-increment 0)
                                                   doom-print-indent)))
                                              (doom-print
                                               (doom-print--format
                                                (doom-print--class 'start
                                                                   (doom-print--style 'bold "%s %s"))
                                                (car key)
                                                (cdr key))
                                               :format nil)
                                              (doom-print
                                               (doom-print--format "%s"
                                                                   (string-join
                                                                    (append doom-doctor--errors doom-doctor--warnings)
                                                                    "\n"))
                                               :format nil))
                                            (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                                    (setq doom-doctor--errors
                                          (append doom-doctor--errors doom-local-errors))
                                    (setq doom-doctor--warnings
                                          (append doom-doctor--warnings doom-local-warnings))))
                              doom-modules))))
                   ((debug error)
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                             (or
                                              (cdr-safe ex)
                                              (car ex))))
                         :format nil))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                                 (or
                                                  (cdr-safe ex)
                                                  (car ex))))
                             doom-doctor--warnings)))
                    (setq doom-modules nil)))
                 (terpri)
                 (let
                     ((--dolist-tail--
                       (list
                        (list doom-doctor--warnings "warning" 'yellow)
                        (list doom-doctor--errors "error" 'red))))
                   (while --dolist-tail--
                     (let
                         ((msg
                           (car --dolist-tail--)))
                       (if
                           (car msg)
                           (progn
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'color
                                                  (nth 2 msg)
                                                  (if
                                                      (cdr msg)
                                                      "There are %d %ss!" "There is %d %s!")
                                                  (length
                                                   (car msg))
                                                  (nth 1 msg)))
                              :format nil)))
                       (setq --dolist-tail--
                             (cdr --dolist-tail--)))))
                 (if
                     (or doom-doctor--errors doom-doctor--warnings)
                     nil
                   (doom-print
                    (doom-print--format
                     (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
                    :format nil))
                 (exit! :pager\? "+G")))))
    t)
   (key plist)
   (let
       (doom-local-errors doom-local-warnings)
     (let
         (doom-doctor--errors doom-doctor--warnings)
       (condition-case ex
           (let
               ((doctor-file
                 (doom-module-path
                  (car key)
                  (cdr key)
                  "doctor.el"))
                (packages-file
                 (doom-module-path
                  (car key)
                  (cdr key)
                  "packages.el")))
             (let*
                 ((doom-output-indent 6)
                  (--cl-var--
                   (let
                       (doom-packages doom-disabled-packages)
                     (load packages-file 'noerror 'nomessage)
                     (mapcar #'car doom-packages)))
                  (name nil))
               (while
                   (consp --cl-var--)
                 (setq name
                       (car --cl-var--))
                 (if
                     (or
                      (doom-package-get name :disable)
                      (eval
                       (doom-package-get name :ignore))
                      (plist-member
                       (doom-package-get name :recipe)
                       :local-repo)
                      (locate-library
                       (symbol-name name))
                      (doom-package-built-in-p name)
                      (doom-package-installed-p name))
                     (progn)
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'error "Missing emacs package: %S")
                     name)
                    :format nil))
                 (setq --cl-var--
                       (cdr --cl-var--)))
               nil)
             (let
                 ((inhibit-message t))
               (load doctor-file 'noerror 'nomessage)))
         ((debug file-missing)
          (progn
            (if inhibit-message nil
              (doom-print
               (doom-print--format
                (doom-print--class 'error "%s"
                                   (error-message-string ex)))
               :format nil))
            (setq doom-doctor--errors
                  (cons
                   (doom-print--format
                    (doom-print--class 'error "%s"
                                       (error-message-string ex)))
                   doom-doctor--errors))))
         ((debug error)
          (progn
            (if inhibit-message nil
              (doom-print
               (doom-print--format
                (doom-print--class 'error "Syntax error: %s" ex))
               :format nil))
            (setq doom-doctor--errors
                  (cons
                   (doom-print--format
                    (doom-print--class 'error "Syntax error: %s" ex))
                   doom-doctor--errors)))))
       (if
           (or doom-doctor--errors doom-doctor--warnings)
           (progn
             (let
                 ((doom-print-indent
                   (+
                    (if t doom-print-indent-increment 0)
                    doom-print-indent)))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start
                                    (doom-print--style 'bold "%s %s"))
                 (car key)
                 (cdr key))
                :format nil)
               (doom-print
                (doom-print--format "%s"
                                    (string-join
                                     (append doom-doctor--errors doom-doctor--warnings)
                                     "\n"))
                :format nil))
             (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
     (setq doom-doctor--errors
           (append doom-doctor--errors doom-local-errors))
     (setq doom-doctor--warnings
           (append doom-doctor--warnings doom-local-warnings))))
  (:completion . vertico)
  (:flags nil :path "c:/Users/threddast/.emacs.d/modules/completion/vertico/"))
 ((cli . #s(doom-cli
            ("doom" "doctor")
            nil
            (("SUMMARY" . "Diagnoses common issues on your system.")
             ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
            nil nil nil nil
            (:benchmark nil :prefix
                        (doom)
                        :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
            (closure
             (t)
             (cli alist)
             (let nil
               (doom-print
                (doom-print--format "The doctor will see you now...\n")
                :format nil)
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking your Emacs version..."))
                :format nil)
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (cond
                  ((string= ".50"
                            (substring emacs-version -3))
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                            doom-doctor--errors)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                           "\n")))
                      :format nil)))
                  ((> emacs-major-version 28)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Emacs %s detected" emacs-version))
                        :format nil))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Emacs %s detected" emacs-version))
                            doom-doctor--warnings)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                           "\n")))
                      :format nil)))
                  ((< emacs-major-version 27)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                            doom-doctor--errors))))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for Doom's prerequisites..."))
                :format nil)
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (if
                     (not
                      (executable-find "git"))
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                          :format nil))
                       (setq doom-doctor--errors
                             (cons
                              (doom-print--format
                               (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                              doom-doctor--errors)))
                   (let
                       ((save-match-data-internal
                         (match-data)))
                     (unwind-protect
                         (progn
                           (let*
                               ((version
                                 (cdr
                                  (doom-call-process "git" "version")))
                                (version
                                 (and
                                  (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                  (match-string 1 version))))
                             (if version
                                 (if
                                     (version< version "2.23")
                                     (progn
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                doom-doctor--errors)))))
                               (progn
                                 (if inhibit-message nil
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                    :format nil))
                                 (setq doom-doctor--warnings
                                       (cons
                                        (doom-print--format
                                         (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                        doom-doctor--warnings))))))
                       (set-match-data save-match-data-internal 'evaporate))))
                 (if
                     (executable-find "rg")
                     nil
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                            doom-doctor--errors)))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for Emacs config conflicts..."))
                :format nil)
               (if
                   (file-exists-p "~/.emacs")
                   (progn
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                          :format nil))
                       (setq doom-doctor--warnings
                             (cons
                              (doom-print--format
                               (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                              doom-doctor--warnings)))
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'fill
                                            (string-join
                                             (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                             "\n")))
                        :format nil))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for great Emacs features..."))
                :format nil)
               (if
                   (functionp 'json-serialize)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native JSON support"))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native JSON support"))
                          doom-doctor--warnings)))
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'fill
                                        (string-join
                                         (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                         "\n")))
                    :format nil)))
               (if
                   (featurep 'native-compile)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native compilation support"))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native compilation support"))
                          doom-doctor--warnings)))
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'fill
                                        (string-join
                                         (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                         "\n")))
                    :format nil)))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for private config conflicts..."))
                :format nil)
               (let*
                   ((xdg-dir
                     (concat
                      (or
                       (getenv "XDG_CONFIG_HOME")
                       "~/.config")
                      "/doom/"))
                    (doom-dir
                     (or
                      (getenv "DOOMDIR")
                      "~/.doom.d/"))
                    (dir
                     (if
                         (file-directory-p xdg-dir)
                         xdg-dir doom-dir)))
                 (if
                     (file-equal-p dir doom-emacs-dir)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                            (doom-print--class 'path dir)))
                        :format nil)
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'fill
                                              (string-join
                                               (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                               "\n")))
                          :format nil))))
                 (if
                     (and
                      (not
                       (file-equal-p xdg-dir doom-dir))
                      (file-directory-p xdg-dir)
                      (file-directory-p doom-dir))
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Detected two private configs, in %s and %s")
                         (abbreviate-file-name xdg-dir)
                         doom-dir)
                        :format nil)
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'fill
                                              (string-join
                                               (list "The second directory will be ignored, as it has lower precedence.")
                                               "\n")))
                          :format nil)))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for stale elc files..."))
                :format nil)
               (elc-check-dir doom-emacs-dir)
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for problematic git global settings..."))
                :format nil)
               (if
                   (executable-find "git")
                   (if
                       (= 0
                          (car
                           (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                       (progn
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                              :format nil))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                  doom-doctor--warnings)))
                         (let
                             ((doom-print-indent
                               (+
                                (if t doom-print-indent-increment 0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'fill
                                                (string-join
                                                 (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                                 "\n")))
                            :format nil))))
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                      :format nil))
                   (setq doom-doctor--errors
                         (cons
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                          doom-doctor--errors))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking Doom Emacs..."))
                :format nil)
               (condition-case ex
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (let
                         ((noninteractive nil)
                          kill-emacs-query-functions kill-emacs-hook)
                       (defvar doom-reloading-p nil)
                       (if
                           (file-exists-p doom-autoloads-file)
                           nil
                         (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                       (require 'doom-start)
                       (doom-initialize-packages))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'success "Initialized Doom Emacs %s")
                       doom-version)
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (if
                           (hash-table-p doom-modules)
                           (doom-print--class 'success "Detected %d modules"
                                              (hash-table-count doom-modules))
                         (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'success "Detected %d packages")
                       (length doom-packages))
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'start "Checking Doom core for irregularities..."))
                      :format nil)
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (let
                           ((--dolist-tail--
                             (list "savehist" "projectile.cache")))
                         (while --dolist-tail--
                           (let
                               ((file
                                 (car --dolist-tail--)))
                             (let*
                                 ((size
                                   (and t
                                        (condition-case nil
                                            (progn
                                              (doom-file-size file doom-cache-dir))
                                          (error nil)))))
                               (if size
                                   (if
                                       (> size 1048576)
                                       (progn
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                  (/ size 1024 1024.0)))
                                              :format nil))
                                           (setq doom-doctor--warnings
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                      (/ size 1024 1024.0)))
                                                  doom-doctor--warnings)))
                                         (let
                                             ((doom-print-indent
                                               (+
                                                (if t doom-print-indent-increment 0)
                                                doom-print-indent)))
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'fill
                                                                (string-join
                                                                 (list "Consider deleting it from your system (manually)")
                                                                 "\n")))
                                            :format nil))))
                                 nil))
                             (setq --dolist-tail--
                                   (cdr --dolist-tail--)))))
                       (if
                           (condition-case nil
                               (progn
                                 (executable-find doom-projectile-fd-binary))
                             (error nil))
                           nil
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                              :format nil))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                  doom-doctor--warnings))))
                       (require 'projectile)
                       (if
                           (projectile-project-root "~")
                           (progn
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                  :format nil))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                      doom-doctor--warnings)))
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'fill
                                                    (string-join
                                                     (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                     "\n")))
                                :format nil))))
                       (if
                           (and
                            (file-equal-p doom-user-dir "~/.config/doom")
                            (file-directory-p "~/.doom.d"))
                           (progn
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                               (doom-print--class 'path doom-user-dir))
                              :format nil)
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'fill
                                                    (string-join
                                                     (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                     "\n")))
                                :format nil))))
                       (if
                           (not
                            (executable-find "fc-list"))
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                :format nil))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                    doom-doctor--warnings)))
                         (if
                             (and
                              (cond
                               ((eq system-type 'gnu/linux)
                                (let nil
                                  (concat
                                   (or
                                    (getenv "XDG_DATA_HOME")
                                    "~/.local/share")
                                   "/fonts/")))
                               ((eq system-type 'darwin)
                                (let nil "~/Library/Fonts/")))
                              (require 'all-the-icons nil t))
                             (progn
                               (let
                                   ((temp-buffer
                                     (generate-new-buffer " *temp*" t)))
                                 (save-current-buffer
                                   (set-buffer temp-buffer)
                                   (unwind-protect
                                       (progn
                                         (let
                                             ((errors 0))
                                           (let*
                                               ((output
                                                 (doom-call-process "fc-list" "" "file"))
                                                (status
                                                 (if output
                                                     (car-safe
                                                      (prog1 output
                                                        (setq output
                                                              (cdr output))))
                                                   (signal 'wrong-number-of-arguments
                                                           (list
                                                            '(status . output)
                                                            (length output))))))
                                             (if
                                                 (not
                                                  (= 0 status))
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                                  :format nil)
                                               (insert
                                                (cdr
                                                 (doom-call-process "fc-list" "" "file")))
                                               (let
                                                   ((--dolist-tail-- all-the-icons-font-names))
                                                 (while --dolist-tail--
                                                   (let
                                                       ((font
                                                         (car --dolist-tail--)))
                                                     (if
                                                         (save-excursion
                                                           (re-search-backward font nil t))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--style 'green "Found font %s" font))
                                                          :format nil)
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'warn "Warning: couldn't find %S font")
                                                         font)
                                                        :format nil))
                                                     (setq --dolist-tail--
                                                           (cdr --dolist-tail--)))))
                                               (if
                                                   (> errors 0)
                                                   (progn
                                                     (let
                                                         ((doom-print-indent
                                                           (+
                                                            (if t doom-print-indent-increment 0)
                                                            doom-print-indent)))
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'fill
                                                                            (string-join
                                                                             (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                             "\n")))
                                                        :format nil))))))))
                                     (and
                                      (buffer-name temp-buffer)
                                      (kill-buffer temp-buffer)))))))))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                      :format nil)
                     (if
                         (file-directory-p doom-user-dir)
                         (progn
                           (let
                               ((doom-print-indent
                                 (+
                                  (if t doom-print-indent-increment 0)
                                  doom-print-indent)))
                             (elc-check-dir doom-user-dir))))
                     (if doom-modules
                         (progn
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'start "Checking your enabled modules..."))
                            :format nil)
                           (advice-add #'require :around #'doom-shut-up-a)
                           (maphash
                            #'(lambda
                                (key plist)
                                (let
                                    (doom-local-errors doom-local-warnings)
                                  (let
                                      (doom-doctor--errors doom-doctor--warnings)
                                    (condition-case ex
                                        (let
                                            ((doctor-file
                                              (doom-module-path
                                               (car key)
                                               (cdr key)
                                               "doctor.el"))
                                             (packages-file
                                              (doom-module-path
                                               (car key)
                                               (cdr key)
                                               "packages.el")))
                                          (let*
                                              ((doom-output-indent 6)
                                               (--cl-var--
                                                (let
                                                    (doom-packages doom-disabled-packages)
                                                  (load packages-file 'noerror 'nomessage)
                                                  (mapcar #'car doom-packages)))
                                               (name nil))
                                            (while
                                                (consp --cl-var--)
                                              (setq name
                                                    (car --cl-var--))
                                              (if
                                                  (or
                                                   (doom-package-get name :disable)
                                                   (eval
                                                    (doom-package-get name :ignore))
                                                   (plist-member
                                                    (doom-package-get name :recipe)
                                                    :local-repo)
                                                   (locate-library
                                                    (symbol-name name))
                                                   (doom-package-built-in-p name)
                                                   (doom-package-installed-p name))
                                                  (progn)
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'error "Missing emacs package: %S")
                                                  name)
                                                 :format nil))
                                              (setq --cl-var--
                                                    (cdr --cl-var--)))
                                            nil)
                                          (let
                                              ((inhibit-message t))
                                            (load doctor-file 'noerror 'nomessage)))
                                      ((debug file-missing)
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "%s"
                                                                (error-message-string ex)))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "%s"
                                                                    (error-message-string ex)))
                                                doom-doctor--errors))))
                                      ((debug error)
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Syntax error: %s" ex))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "Syntax error: %s" ex))
                                                doom-doctor--errors)))))
                                    (if
                                        (or doom-doctor--errors doom-doctor--warnings)
                                        (progn
                                          (let
                                              ((doom-print-indent
                                                (+
                                                 (if t doom-print-indent-increment 0)
                                                 doom-print-indent)))
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'start
                                                                 (doom-print--style 'bold "%s %s"))
                                              (car key)
                                              (cdr key))
                                             :format nil)
                                            (doom-print
                                             (doom-print--format "%s"
                                                                 (string-join
                                                                  (append doom-doctor--errors doom-doctor--warnings)
                                                                  "\n"))
                                             :format nil))
                                          (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                                  (setq doom-doctor--errors
                                        (append doom-doctor--errors doom-local-errors))
                                  (setq doom-doctor--warnings
                                        (append doom-doctor--warnings doom-local-warnings))))
                            doom-modules))))
                 ((debug error)
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                           (or
                                            (cdr-safe ex)
                                            (car ex))))
                       :format nil))
                    (setq doom-doctor--warnings
                          (cons
                           (doom-print--format
                            (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                               (or
                                                (cdr-safe ex)
                                                (car ex))))
                           doom-doctor--warnings)))
                  (setq doom-modules nil)))
               (terpri)
               (let
                   ((--dolist-tail--
                     (list
                      (list doom-doctor--warnings "warning" 'yellow)
                      (list doom-doctor--errors "error" 'red))))
                 (while --dolist-tail--
                   (let
                       ((msg
                         (car --dolist-tail--)))
                     (if
                         (car msg)
                         (progn
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'color
                                                (nth 2 msg)
                                                (if
                                                    (cdr msg)
                                                    "There are %d %ss!" "There is %d %s!")
                                                (length
                                                 (car msg))
                                                (nth 1 msg)))
                            :format nil)))
                     (setq --dolist-tail--
                           (cdr --dolist-tail--)))))
               (if
                   (or doom-doctor--errors doom-doctor--warnings)
                   nil
                 (doom-print
                  (doom-print--format
                   (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
                  :format nil))
               (exit! :pager\? "+G")))))
  (alist)
  (key :completion . vertico)
  (plist :flags nil :path "c:/Users/threddast/.emacs.d/modules/completion/vertico/")))

;;;; 12
((maphash
  (closure
   ((alist)
    (cli . #s(doom-cli
              ("doom" "doctor")
              nil
              (("SUMMARY" . "Diagnoses common issues on your system.")
               ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
              nil nil nil nil
              (:benchmark nil :prefix
                          (doom)
                          :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
              (closure
               (t)
               (cli alist)
               (let nil
                 (doom-print
                  (doom-print--format "The doctor will see you now...\n")
                  :format nil)
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'start "Checking your Emacs version..."))
                  :format nil)
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (cond
                    ((string= ".50"
                              (substring emacs-version -3))
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                          :format nil))
                       (setq doom-doctor--errors
                             (cons
                              (doom-print--format
                               (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                              doom-doctor--errors)))
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'fill
                                            (string-join
                                             (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                             "\n")))
                        :format nil)))
                    ((> emacs-major-version 28)
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Emacs %s detected" emacs-version))
                          :format nil))
                       (setq doom-doctor--warnings
                             (cons
                              (doom-print--format
                               (doom-print--class 'warn "Emacs %s detected" emacs-version))
                              doom-doctor--warnings)))
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'fill
                                            (string-join
                                             (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                             "\n")))
                        :format nil)))
                    ((< emacs-major-version 27)
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                          :format nil))
                       (setq doom-doctor--errors
                             (cons
                              (doom-print--format
                               (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                              doom-doctor--errors))))))
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'start "Checking for Doom's prerequisites..."))
                  :format nil)
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (if
                       (not
                        (executable-find "git"))
                       (progn
                         (if inhibit-message nil
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                            :format nil))
                         (setq doom-doctor--errors
                               (cons
                                (doom-print--format
                                 (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                                doom-doctor--errors)))
                     (let
                         ((save-match-data-internal
                           (match-data)))
                       (unwind-protect
                           (progn
                             (let*
                                 ((version
                                   (cdr
                                    (doom-call-process "git" "version")))
                                  (version
                                   (and
                                    (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                    (match-string 1 version))))
                               (if version
                                   (if
                                       (version< version "2.23")
                                       (progn
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                              :format nil))
                                           (setq doom-doctor--errors
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                  doom-doctor--errors)))))
                                 (progn
                                   (if inhibit-message nil
                                     (doom-print
                                      (doom-print--format
                                       (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                      :format nil))
                                   (setq doom-doctor--warnings
                                         (cons
                                          (doom-print--format
                                           (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                          doom-doctor--warnings))))))
                         (set-match-data save-match-data-internal 'evaporate))))
                   (if
                       (executable-find "rg")
                       nil
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                          :format nil))
                       (setq doom-doctor--errors
                             (cons
                              (doom-print--format
                               (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                              doom-doctor--errors)))))
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'start "Checking for Emacs config conflicts..."))
                  :format nil)
                 (if
                     (file-exists-p "~/.emacs")
                     (progn
                       (progn
                         (if inhibit-message nil
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                            :format nil))
                         (setq doom-doctor--warnings
                               (cons
                                (doom-print--format
                                 (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                                doom-doctor--warnings)))
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'fill
                                              (string-join
                                               (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                               "\n")))
                          :format nil))))
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'start "Checking for great Emacs features..."))
                  :format nil)
                 (if
                     (functionp 'json-serialize)
                     nil
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Emacs was not built with native JSON support"))
                        :format nil))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Emacs was not built with native JSON support"))
                            doom-doctor--warnings)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                           "\n")))
                      :format nil)))
                 (if
                     (featurep 'native-compile)
                     nil
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Emacs was not built with native compilation support"))
                        :format nil))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Emacs was not built with native compilation support"))
                            doom-doctor--warnings)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                           "\n")))
                      :format nil)))
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'start "Checking for private config conflicts..."))
                  :format nil)
                 (let*
                     ((xdg-dir
                       (concat
                        (or
                         (getenv "XDG_CONFIG_HOME")
                         "~/.config")
                        "/doom/"))
                      (doom-dir
                       (or
                        (getenv "DOOMDIR")
                        "~/.doom.d/"))
                      (dir
                       (if
                           (file-directory-p xdg-dir)
                           xdg-dir doom-dir)))
                   (if
                       (file-equal-p dir doom-emacs-dir)
                       (progn
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                              (doom-print--class 'path dir)))
                          :format nil)
                         (let
                             ((doom-print-indent
                               (+
                                (if t doom-print-indent-increment 0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'fill
                                                (string-join
                                                 (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                                 "\n")))
                            :format nil))))
                   (if
                       (and
                        (not
                         (file-equal-p xdg-dir doom-dir))
                        (file-directory-p xdg-dir)
                        (file-directory-p doom-dir))
                       (progn
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Detected two private configs, in %s and %s")
                           (abbreviate-file-name xdg-dir)
                           doom-dir)
                          :format nil)
                         (let
                             ((doom-print-indent
                               (+
                                (if t doom-print-indent-increment 0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'fill
                                                (string-join
                                                 (list "The second directory will be ignored, as it has lower precedence.")
                                                 "\n")))
                            :format nil)))))
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'start "Checking for stale elc files..."))
                  :format nil)
                 (elc-check-dir doom-emacs-dir)
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'start "Checking for problematic git global settings..."))
                  :format nil)
                 (if
                     (executable-find "git")
                     (if
                         (= 0
                            (car
                             (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                         (progn
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                :format nil))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                    doom-doctor--warnings)))
                           (let
                               ((doom-print-indent
                                 (+
                                  (if t doom-print-indent-increment 0)
                                  doom-print-indent)))
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'fill
                                                  (string-join
                                                   (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                                   "\n")))
                              :format nil))))
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                            doom-doctor--errors))))
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'start "Checking Doom Emacs..."))
                  :format nil)
                 (condition-case ex
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (let
                           ((noninteractive nil)
                            kill-emacs-query-functions kill-emacs-hook)
                         (defvar doom-reloading-p nil)
                         (if
                             (file-exists-p doom-autoloads-file)
                             nil
                           (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                         (require 'doom-start)
                         (doom-initialize-packages))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'success "Initialized Doom Emacs %s")
                         doom-version)
                        :format nil)
                       (doom-print
                        (doom-print--format
                         (if
                             (hash-table-p doom-modules)
                             (doom-print--class 'success "Detected %d modules"
                                                (hash-table-count doom-modules))
                           (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                        :format nil)
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'success "Detected %d packages")
                         (length doom-packages))
                        :format nil)
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'start "Checking Doom core for irregularities..."))
                        :format nil)
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (let
                             ((--dolist-tail--
                               (list "savehist" "projectile.cache")))
                           (while --dolist-tail--
                             (let
                                 ((file
                                   (car --dolist-tail--)))
                               (let*
                                   ((size
                                     (and t
                                          (condition-case nil
                                              (progn
                                                (doom-file-size file doom-cache-dir))
                                            (error nil)))))
                                 (if size
                                     (if
                                         (> size 1048576)
                                         (progn
                                           (progn
                                             (if inhibit-message nil
                                               (doom-print
                                                (doom-print--format
                                                 (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                    (/ size 1024 1024.0)))
                                                :format nil))
                                             (setq doom-doctor--warnings
                                                   (cons
                                                    (doom-print--format
                                                     (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                        (/ size 1024 1024.0)))
                                                    doom-doctor--warnings)))
                                           (let
                                               ((doom-print-indent
                                                 (+
                                                  (if t doom-print-indent-increment 0)
                                                  doom-print-indent)))
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'fill
                                                                  (string-join
                                                                   (list "Consider deleting it from your system (manually)")
                                                                   "\n")))
                                              :format nil))))
                                   nil))
                               (setq --dolist-tail--
                                     (cdr --dolist-tail--)))))
                         (if
                             (condition-case nil
                                 (progn
                                   (executable-find doom-projectile-fd-binary))
                               (error nil))
                             nil
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                :format nil))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                    doom-doctor--warnings))))
                         (require 'projectile)
                         (if
                             (projectile-project-root "~")
                             (progn
                               (progn
                                 (if inhibit-message nil
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                    :format nil))
                                 (setq doom-doctor--warnings
                                       (cons
                                        (doom-print--format
                                         (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                        doom-doctor--warnings)))
                               (let
                                   ((doom-print-indent
                                     (+
                                      (if t doom-print-indent-increment 0)
                                      doom-print-indent)))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'fill
                                                      (string-join
                                                       (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                       "\n")))
                                  :format nil))))
                         (if
                             (and
                              (file-equal-p doom-user-dir "~/.config/doom")
                              (file-directory-p "~/.doom.d"))
                             (progn
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                                 (doom-print--class 'path doom-user-dir))
                                :format nil)
                               (let
                                   ((doom-print-indent
                                     (+
                                      (if t doom-print-indent-increment 0)
                                      doom-print-indent)))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'fill
                                                      (string-join
                                                       (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                       "\n")))
                                  :format nil))))
                         (if
                             (not
                              (executable-find "fc-list"))
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                  :format nil))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                      doom-doctor--warnings)))
                           (if
                               (and
                                (cond
                                 ((eq system-type 'gnu/linux)
                                  (let nil
                                    (concat
                                     (or
                                      (getenv "XDG_DATA_HOME")
                                      "~/.local/share")
                                     "/fonts/")))
                                 ((eq system-type 'darwin)
                                  (let nil "~/Library/Fonts/")))
                                (require 'all-the-icons nil t))
                               (progn
                                 (let
                                     ((temp-buffer
                                       (generate-new-buffer " *temp*" t)))
                                   (save-current-buffer
                                     (set-buffer temp-buffer)
                                     (unwind-protect
                                         (progn
                                           (let
                                               ((errors 0))
                                             (let*
                                                 ((output
                                                   (doom-call-process "fc-list" "" "file"))
                                                  (status
                                                   (if output
                                                       (car-safe
                                                        (prog1 output
                                                          (setq output
                                                                (cdr output))))
                                                     (signal 'wrong-number-of-arguments
                                                             (list
                                                              '(status . output)
                                                              (length output))))))
                                               (if
                                                   (not
                                                    (= 0 status))
                                                   (doom-print
                                                    (doom-print--format
                                                     (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                                    :format nil)
                                                 (insert
                                                  (cdr
                                                   (doom-call-process "fc-list" "" "file")))
                                                 (let
                                                     ((--dolist-tail-- all-the-icons-font-names))
                                                   (while --dolist-tail--
                                                     (let
                                                         ((font
                                                           (car --dolist-tail--)))
                                                       (if
                                                           (save-excursion
                                                             (re-search-backward font nil t))
                                                           (doom-print
                                                            (doom-print--format
                                                             (doom-print--style 'green "Found font %s" font))
                                                            :format nil)
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--class 'warn "Warning: couldn't find %S font")
                                                           font)
                                                          :format nil))
                                                       (setq --dolist-tail--
                                                             (cdr --dolist-tail--)))))
                                                 (if
                                                     (> errors 0)
                                                     (progn
                                                       (let
                                                           ((doom-print-indent
                                                             (+
                                                              (if t doom-print-indent-increment 0)
                                                              doom-print-indent)))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--class 'fill
                                                                              (string-join
                                                                               (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                               "\n")))
                                                          :format nil))))))))
                                       (and
                                        (buffer-name temp-buffer)
                                        (kill-buffer temp-buffer)))))))))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                        :format nil)
                       (if
                           (file-directory-p doom-user-dir)
                           (progn
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (elc-check-dir doom-user-dir))))
                       (if doom-modules
                           (progn
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'start "Checking your enabled modules..."))
                              :format nil)
                             (advice-add #'require :around #'doom-shut-up-a)
                             (maphash
                              #'(lambda
                                  (key plist)
                                  (let
                                      (doom-local-errors doom-local-warnings)
                                    (let
                                        (doom-doctor--errors doom-doctor--warnings)
                                      (condition-case ex
                                          (let
                                              ((doctor-file
                                                (doom-module-path
                                                 (car key)
                                                 (cdr key)
                                                 "doctor.el"))
                                               (packages-file
                                                (doom-module-path
                                                 (car key)
                                                 (cdr key)
                                                 "packages.el")))
                                            (let*
                                                ((doom-output-indent 6)
                                                 (--cl-var--
                                                  (let
                                                      (doom-packages doom-disabled-packages)
                                                    (load packages-file 'noerror 'nomessage)
                                                    (mapcar #'car doom-packages)))
                                                 (name nil))
                                              (while
                                                  (consp --cl-var--)
                                                (setq name
                                                      (car --cl-var--))
                                                (if
                                                    (or
                                                     (doom-package-get name :disable)
                                                     (eval
                                                      (doom-package-get name :ignore))
                                                     (plist-member
                                                      (doom-package-get name :recipe)
                                                      :local-repo)
                                                     (locate-library
                                                      (symbol-name name))
                                                     (doom-package-built-in-p name)
                                                     (doom-package-installed-p name))
                                                    (progn)
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'error "Missing emacs package: %S")
                                                    name)
                                                   :format nil))
                                                (setq --cl-var--
                                                      (cdr --cl-var--)))
                                              nil)
                                            (let
                                                ((inhibit-message t))
                                              (load doctor-file 'noerror 'nomessage)))
                                        ((debug file-missing)
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'error "%s"
                                                                  (error-message-string ex)))
                                              :format nil))
                                           (setq doom-doctor--errors
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'error "%s"
                                                                      (error-message-string ex)))
                                                  doom-doctor--errors))))
                                        ((debug error)
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'error "Syntax error: %s" ex))
                                              :format nil))
                                           (setq doom-doctor--errors
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'error "Syntax error: %s" ex))
                                                  doom-doctor--errors)))))
                                      (if
                                          (or doom-doctor--errors doom-doctor--warnings)
                                          (progn
                                            (let
                                                ((doom-print-indent
                                                  (+
                                                   (if t doom-print-indent-increment 0)
                                                   doom-print-indent)))
                                              (doom-print
                                               (doom-print--format
                                                (doom-print--class 'start
                                                                   (doom-print--style 'bold "%s %s"))
                                                (car key)
                                                (cdr key))
                                               :format nil)
                                              (doom-print
                                               (doom-print--format "%s"
                                                                   (string-join
                                                                    (append doom-doctor--errors doom-doctor--warnings)
                                                                    "\n"))
                                               :format nil))
                                            (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                                    (setq doom-doctor--errors
                                          (append doom-doctor--errors doom-local-errors))
                                    (setq doom-doctor--warnings
                                          (append doom-doctor--warnings doom-local-warnings))))
                              doom-modules))))
                   ((debug error)
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                             (or
                                              (cdr-safe ex)
                                              (car ex))))
                         :format nil))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                                 (or
                                                  (cdr-safe ex)
                                                  (car ex))))
                             doom-doctor--warnings)))
                    (setq doom-modules nil)))
                 (terpri)
                 (let
                     ((--dolist-tail--
                       (list
                        (list doom-doctor--warnings "warning" 'yellow)
                        (list doom-doctor--errors "error" 'red))))
                   (while --dolist-tail--
                     (let
                         ((msg
                           (car --dolist-tail--)))
                       (if
                           (car msg)
                           (progn
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'color
                                                  (nth 2 msg)
                                                  (if
                                                      (cdr msg)
                                                      "There are %d %ss!" "There is %d %s!")
                                                  (length
                                                   (car msg))
                                                  (nth 1 msg)))
                              :format nil)))
                       (setq --dolist-tail--
                             (cdr --dolist-tail--)))))
                 (if
                     (or doom-doctor--errors doom-doctor--warnings)
                     nil
                   (doom-print
                    (doom-print--format
                     (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
                    :format nil))
                 (exit! :pager\? "+G")))))
    t)
   (key plist)
   (let
       (doom-local-errors doom-local-warnings)
     (let
         (doom-doctor--errors doom-doctor--warnings)
       (condition-case ex
           (let
               ((doctor-file
                 (doom-module-path
                  (car key)
                  (cdr key)
                  "doctor.el"))
                (packages-file
                 (doom-module-path
                  (car key)
                  (cdr key)
                  "packages.el")))
             (let*
                 ((doom-output-indent 6)
                  (--cl-var--
                   (let
                       (doom-packages doom-disabled-packages)
                     (load packages-file 'noerror 'nomessage)
                     (mapcar #'car doom-packages)))
                  (name nil))
               (while
                   (consp --cl-var--)
                 (setq name
                       (car --cl-var--))
                 (if
                     (or
                      (doom-package-get name :disable)
                      (eval
                       (doom-package-get name :ignore))
                      (plist-member
                       (doom-package-get name :recipe)
                       :local-repo)
                      (locate-library
                       (symbol-name name))
                      (doom-package-built-in-p name)
                      (doom-package-installed-p name))
                     (progn)
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'error "Missing emacs package: %S")
                     name)
                    :format nil))
                 (setq --cl-var--
                       (cdr --cl-var--)))
               nil)
             (let
                 ((inhibit-message t))
               (load doctor-file 'noerror 'nomessage)))
         ((debug file-missing)
          (progn
            (if inhibit-message nil
              (doom-print
               (doom-print--format
                (doom-print--class 'error "%s"
                                   (error-message-string ex)))
               :format nil))
            (setq doom-doctor--errors
                  (cons
                   (doom-print--format
                    (doom-print--class 'error "%s"
                                       (error-message-string ex)))
                   doom-doctor--errors))))
         ((debug error)
          (progn
            (if inhibit-message nil
              (doom-print
               (doom-print--format
                (doom-print--class 'error "Syntax error: %s" ex))
               :format nil))
            (setq doom-doctor--errors
                  (cons
                   (doom-print--format
                    (doom-print--class 'error "Syntax error: %s" ex))
                   doom-doctor--errors)))))
       (if
           (or doom-doctor--errors doom-doctor--warnings)
           (progn
             (let
                 ((doom-print-indent
                   (+
                    (if t doom-print-indent-increment 0)
                    doom-print-indent)))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start
                                    (doom-print--style 'bold "%s %s"))
                 (car key)
                 (cdr key))
                :format nil)
               (doom-print
                (doom-print--format "%s"
                                    (string-join
                                     (append doom-doctor--errors doom-doctor--warnings)
                                     "\n"))
                :format nil))
             (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
     (setq doom-doctor--errors
           (append doom-doctor--errors doom-local-errors))
     (setq doom-doctor--warnings
           (append doom-doctor--warnings doom-local-warnings))))
  #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data
                ((:completion . company)
                 (:flags nil :path "c:/Users/threddast/.emacs.d/modules/completion/company/")
                 (:completion . vertico)
                 (:flags nil :path "c:/Users/threddast/.emacs.d/modules/completion/vertico/")
                 (:ui . doom)
                 (:flags nil :path "c:/Users/threddast/.emacs.d/modules/ui/doom/")
                 (:ui . doom-dashboard)
                 (:flags nil :path "c:/Users/threddast/.emacs.d/modules/ui/doom-dashboard/")
                 (:ui . hl-todo)
                 (:flags nil :path "c:/Users/threddast/.emacs.d/modules/ui/hl-todo/")
                 (:ui . modeline)
                 (:flags nil :path "c:/Users/threddast/.emacs.d/modules/ui/modeline/")
                 (:ui . ophints)
                 (:flags nil :path "c:/Users/threddast/.emacs.d/modules/ui/ophints/")
                 (:ui . popup)
                 (:flags
                  (+defaults)
                  :path "c:/Users/threddast/.emacs.d/modules/ui/popup/")
                 (:ui . vc-gutter)
                 (:flags
                  (+pretty)
                  :path "c:/Users/threddast/.emacs.d/modules/ui/vc-gutter/")
                 (:ui . vi-tilde-fringe)
                 (:flags nil :path "c:/Users/threddast/.emacs.d/modules/ui/vi-tilde-fringe/")
                 (:ui . workspaces)
                 (:flags nil :path "c:/Users/threddast/.emacs.d/modules/ui/workspaces/")
                 (:editor . evil)
                 (:flags
                  (+everywhere)
                  :path "c:/Users/threddast/.emacs.d/modules/editor/evil/")
                 (:editor . file-templates)
                 (:flags nil :path "c:/Users/threddast/.emacs.d/modules/editor/file-templates/")
                 (:editor . fold)
                 (:flags nil :path "c:/Users/threddast/.emacs.d/modules/editor/fold/")
                 (:editor . snippets)
                 (:flags nil :path "c:/Users/threddast/.emacs.d/modules/editor/snippets/")
                 (:emacs . dired)
                 (:flags nil :path "c:/Users/threddast/.emacs.d/modules/emacs/dired/")
                 (:emacs . electric)
                 (:flags nil :path "c:/Users/threddast/.emacs.d/modules/emacs/electric/")
                 (:emacs . undo)
                 (:flags nil :path "c:/Users/threddast/.emacs.d/modules/emacs/undo/")
                 (:emacs . vc)
                 (:flags nil :path "c:/Users/threddast/.emacs.d/modules/emacs/vc/")
                 (:checkers . syntax)
                 (:flags nil :path "c:/Users/threddast/.emacs.d/modules/checkers/syntax/")
                 (:tools . eval)
                 (:flags
                  (+overlay)
                  :path "c:/Users/threddast/.emacs.d/modules/tools/eval/")
                 (:tools . lookup)
                 (:flags nil :path "c:/Users/threddast/.emacs.d/modules/tools/lookup/")
                 (:tools . magit)
                 (:flags nil :path "c:/Users/threddast/.emacs.d/modules/tools/magit/")
                 (:lang . emacs-lisp)
                 (:flags nil :path "c:/Users/threddast/.emacs.d/modules/lang/emacs-lisp/")
                 (:lang . markdown)
                 (:flags nil :path "c:/Users/threddast/.emacs.d/modules/lang/markdown/")
                 (:lang . org)
                 (:flags nil :path "c:/Users/threddast/.emacs.d/modules/lang/org/")
                 (:lang . sh)
                 (:flags nil :path "c:/Users/threddast/.emacs.d/modules/lang/sh/")
                 (:config . default)
                 (:flags
                  (+bindings +smartparens)
                  :path "c:/Users/threddast/.emacs.d/modules/config/default/"))))
 nil)

;;;; 13
((progn
   (doom-print
    (doom-print--format
     (doom-print--class 'start "Checking your enabled modules..."))
    :format nil)
   (advice-add #'require :around #'doom-shut-up-a)
   (maphash
    #'(lambda
        (key plist)
        (let
            (doom-local-errors doom-local-warnings)
          (let
              (doom-doctor--errors doom-doctor--warnings)
            (condition-case ex
                (let
                    ((doctor-file
                      (doom-module-path
                       (car key)
                       (cdr key)
                       "doctor.el"))
                     (packages-file
                      (doom-module-path
                       (car key)
                       (cdr key)
                       "packages.el")))
                  (let*
                      ((doom-output-indent 6)
                       (--cl-var--
                        (let
                            (doom-packages doom-disabled-packages)
                          (load packages-file 'noerror 'nomessage)
                          (mapcar #'car doom-packages)))
                       (name nil))
                    (while
                        (consp --cl-var--)
                      (setq name
                            (car --cl-var--))
                      (if
                          (or
                           (doom-package-get name :disable)
                           (eval
                            (doom-package-get name :ignore))
                           (plist-member
                            (doom-package-get name :recipe)
                            :local-repo)
                           (locate-library
                            (symbol-name name))
                           (doom-package-built-in-p name)
                           (doom-package-installed-p name))
                          (progn)
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'error "Missing emacs package: %S")
                          name)
                         :format nil))
                      (setq --cl-var--
                            (cdr --cl-var--)))
                    nil)
                  (let
                      ((inhibit-message t))
                    (load doctor-file 'noerror 'nomessage)))
              ((debug file-missing)
               (progn
                 (if inhibit-message nil
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'error "%s"
                                        (error-message-string ex)))
                    :format nil))
                 (setq doom-doctor--errors
                       (cons
                        (doom-print--format
                         (doom-print--class 'error "%s"
                                            (error-message-string ex)))
                        doom-doctor--errors))))
              ((debug error)
               (progn
                 (if inhibit-message nil
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'error "Syntax error: %s" ex))
                    :format nil))
                 (setq doom-doctor--errors
                       (cons
                        (doom-print--format
                         (doom-print--class 'error "Syntax error: %s" ex))
                        doom-doctor--errors)))))
            (if
                (or doom-doctor--errors doom-doctor--warnings)
                (progn
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'start
                                         (doom-print--style 'bold "%s %s"))
                      (car key)
                      (cdr key))
                     :format nil)
                    (doom-print
                     (doom-print--format "%s"
                                         (string-join
                                          (append doom-doctor--errors doom-doctor--warnings)
                                          "\n"))
                     :format nil))
                  (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
          (setq doom-doctor--errors
                (append doom-doctor--errors doom-local-errors))
          (setq doom-doctor--warnings
                (append doom-doctor--warnings doom-local-warnings))))
    doom-modules))
 nil)

;;;; 14
((if doom-modules
     (progn
       (doom-print
        (doom-print--format
         (doom-print--class 'start "Checking your enabled modules..."))
        :format nil)
       (advice-add #'require :around #'doom-shut-up-a)
       (maphash
        #'(lambda
            (key plist)
            (let
                (doom-local-errors doom-local-warnings)
              (let
                  (doom-doctor--errors doom-doctor--warnings)
                (condition-case ex
                    (let
                        ((doctor-file
                          (doom-module-path
                           (car key)
                           (cdr key)
                           "doctor.el"))
                         (packages-file
                          (doom-module-path
                           (car key)
                           (cdr key)
                           "packages.el")))
                      (let*
                          ((doom-output-indent 6)
                           (--cl-var--
                            (let
                                (doom-packages doom-disabled-packages)
                              (load packages-file 'noerror 'nomessage)
                              (mapcar #'car doom-packages)))
                           (name nil))
                        (while
                            (consp --cl-var--)
                          (setq name
                                (car --cl-var--))
                          (if
                              (or
                               (doom-package-get name :disable)
                               (eval
                                (doom-package-get name :ignore))
                               (plist-member
                                (doom-package-get name :recipe)
                                :local-repo)
                               (locate-library
                                (symbol-name name))
                               (doom-package-built-in-p name)
                               (doom-package-installed-p name))
                              (progn)
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'error "Missing emacs package: %S")
                              name)
                             :format nil))
                          (setq --cl-var--
                                (cdr --cl-var--)))
                        nil)
                      (let
                          ((inhibit-message t))
                        (load doctor-file 'noerror 'nomessage)))
                  ((debug file-missing)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "%s"
                                            (error-message-string ex)))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "%s"
                                                (error-message-string ex)))
                            doom-doctor--errors))))
                  ((debug error)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Syntax error: %s" ex))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Syntax error: %s" ex))
                            doom-doctor--errors)))))
                (if
                    (or doom-doctor--errors doom-doctor--warnings)
                    (progn
                      (let
                          ((doom-print-indent
                            (+
                             (if t doom-print-indent-increment 0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'start
                                             (doom-print--style 'bold "%s %s"))
                          (car key)
                          (cdr key))
                         :format nil)
                        (doom-print
                         (doom-print--format "%s"
                                             (string-join
                                              (append doom-doctor--errors doom-doctor--warnings)
                                              "\n"))
                         :format nil))
                      (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
              (setq doom-doctor--errors
                    (append doom-doctor--errors doom-local-errors))
              (setq doom-doctor--warnings
                    (append doom-doctor--warnings doom-local-warnings))))
        doom-modules)))
 nil)

;;;; 15
((let
     ((doom-print-indent
       (+
        (if t doom-print-indent-increment 0)
        doom-print-indent)))
   (let
       ((noninteractive nil)
        kill-emacs-query-functions kill-emacs-hook)
     (defvar doom-reloading-p nil)
     (if
         (file-exists-p doom-autoloads-file)
         nil
       (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
     (require 'doom-start)
     (doom-initialize-packages))
   (doom-print
    (doom-print--format
     (doom-print--class 'success "Initialized Doom Emacs %s")
     doom-version)
    :format nil)
   (doom-print
    (doom-print--format
     (if
         (hash-table-p doom-modules)
         (doom-print--class 'success "Detected %d modules"
                            (hash-table-count doom-modules))
       (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
    :format nil)
   (doom-print
    (doom-print--format
     (doom-print--class 'success "Detected %d packages")
     (length doom-packages))
    :format nil)
   (doom-print
    (doom-print--format
     (doom-print--class 'start "Checking Doom core for irregularities..."))
    :format nil)
   (let
       ((doom-print-indent
         (+
          (if t doom-print-indent-increment 0)
          doom-print-indent)))
     (let
         ((--dolist-tail--
           (list "savehist" "projectile.cache")))
       (while --dolist-tail--
         (let
             ((file
               (car --dolist-tail--)))
           (let*
               ((size
                 (and t
                      (condition-case nil
                          (progn
                            (doom-file-size file doom-cache-dir))
                        (error nil)))))
             (if size
                 (if
                     (> size 1048576)
                     (progn
                       (progn
                         (if inhibit-message nil
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                (/ size 1024 1024.0)))
                            :format nil))
                         (setq doom-doctor--warnings
                               (cons
                                (doom-print--format
                                 (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                    (/ size 1024 1024.0)))
                                doom-doctor--warnings)))
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'fill
                                              (string-join
                                               (list "Consider deleting it from your system (manually)")
                                               "\n")))
                          :format nil))))
               nil))
           (setq --dolist-tail--
                 (cdr --dolist-tail--)))))
     (if
         (condition-case nil
             (progn
               (executable-find doom-projectile-fd-binary))
           (error nil))
         nil
       (progn
         (if inhibit-message nil
           (doom-print
            (doom-print--format
             (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
            :format nil))
         (setq doom-doctor--warnings
               (cons
                (doom-print--format
                 (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                doom-doctor--warnings))))
     (require 'projectile)
     (if
         (projectile-project-root "~")
         (progn
           (progn
             (if inhibit-message nil
               (doom-print
                (doom-print--format
                 (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                :format nil))
             (setq doom-doctor--warnings
                   (cons
                    (doom-print--format
                     (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                    doom-doctor--warnings)))
           (let
               ((doom-print-indent
                 (+
                  (if t doom-print-indent-increment 0)
                  doom-print-indent)))
             (doom-print
              (doom-print--format
               (doom-print--class 'fill
                                  (string-join
                                   (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                   "\n")))
              :format nil))))
     (if
         (and
          (file-equal-p doom-user-dir "~/.config/doom")
          (file-directory-p "~/.doom.d"))
         (progn
           (doom-print
            (doom-print--format
             (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
             (doom-print--class 'path doom-user-dir))
            :format nil)
           (let
               ((doom-print-indent
                 (+
                  (if t doom-print-indent-increment 0)
                  doom-print-indent)))
             (doom-print
              (doom-print--format
               (doom-print--class 'fill
                                  (string-join
                                   (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                   "\n")))
              :format nil))))
     (if
         (not
          (executable-find "fc-list"))
         (progn
           (if inhibit-message nil
             (doom-print
              (doom-print--format
               (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
              :format nil))
           (setq doom-doctor--warnings
                 (cons
                  (doom-print--format
                   (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                  doom-doctor--warnings)))
       (if
           (and
            (cond
             ((eq system-type 'gnu/linux)
              (let nil
                (concat
                 (or
                  (getenv "XDG_DATA_HOME")
                  "~/.local/share")
                 "/fonts/")))
             ((eq system-type 'darwin)
              (let nil "~/Library/Fonts/")))
            (require 'all-the-icons nil t))
           (progn
             (let
                 ((temp-buffer
                   (generate-new-buffer " *temp*" t)))
               (save-current-buffer
                 (set-buffer temp-buffer)
                 (unwind-protect
                     (progn
                       (let
                           ((errors 0))
                         (let*
                             ((output
                               (doom-call-process "fc-list" "" "file"))
                              (status
                               (if output
                                   (car-safe
                                    (prog1 output
                                      (setq output
                                            (cdr output))))
                                 (signal 'wrong-number-of-arguments
                                         (list
                                          '(status . output)
                                          (length output))))))
                           (if
                               (not
                                (= 0 status))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                :format nil)
                             (insert
                              (cdr
                               (doom-call-process "fc-list" "" "file")))
                             (let
                                 ((--dolist-tail-- all-the-icons-font-names))
                               (while --dolist-tail--
                                 (let
                                     ((font
                                       (car --dolist-tail--)))
                                   (if
                                       (save-excursion
                                         (re-search-backward font nil t))
                                       (doom-print
                                        (doom-print--format
                                         (doom-print--style 'green "Found font %s" font))
                                        :format nil)
                                     (doom-print
                                      (doom-print--format
                                       (doom-print--class 'warn "Warning: couldn't find %S font")
                                       font)
                                      :format nil))
                                   (setq --dolist-tail--
                                         (cdr --dolist-tail--)))))
                             (if
                                 (> errors 0)
                                 (progn
                                   (let
                                       ((doom-print-indent
                                         (+
                                          (if t doom-print-indent-increment 0)
                                          doom-print-indent)))
                                     (doom-print
                                      (doom-print--format
                                       (doom-print--class 'fill
                                                          (string-join
                                                           (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                           "\n")))
                                      :format nil))))))))
                   (and
                    (buffer-name temp-buffer)
                    (kill-buffer temp-buffer)))))))))
   (doom-print
    (doom-print--format
     (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
    :format nil)
   (if
       (file-directory-p doom-user-dir)
       (progn
         (let
             ((doom-print-indent
               (+
                (if t doom-print-indent-increment 0)
                doom-print-indent)))
           (elc-check-dir doom-user-dir))))
   (if doom-modules
       (progn
         (doom-print
          (doom-print--format
           (doom-print--class 'start "Checking your enabled modules..."))
          :format nil)
         (advice-add #'require :around #'doom-shut-up-a)
         (maphash
          #'(lambda
              (key plist)
              (let
                  (doom-local-errors doom-local-warnings)
                (let
                    (doom-doctor--errors doom-doctor--warnings)
                  (condition-case ex
                      (let
                          ((doctor-file
                            (doom-module-path
                             (car key)
                             (cdr key)
                             "doctor.el"))
                           (packages-file
                            (doom-module-path
                             (car key)
                             (cdr key)
                             "packages.el")))
                        (let*
                            ((doom-output-indent 6)
                             (--cl-var--
                              (let
                                  (doom-packages doom-disabled-packages)
                                (load packages-file 'noerror 'nomessage)
                                (mapcar #'car doom-packages)))
                             (name nil))
                          (while
                              (consp --cl-var--)
                            (setq name
                                  (car --cl-var--))
                            (if
                                (or
                                 (doom-package-get name :disable)
                                 (eval
                                  (doom-package-get name :ignore))
                                 (plist-member
                                  (doom-package-get name :recipe)
                                  :local-repo)
                                 (locate-library
                                  (symbol-name name))
                                 (doom-package-built-in-p name)
                                 (doom-package-installed-p name))
                                (progn)
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'error "Missing emacs package: %S")
                                name)
                               :format nil))
                            (setq --cl-var--
                                  (cdr --cl-var--)))
                          nil)
                        (let
                            ((inhibit-message t))
                          (load doctor-file 'noerror 'nomessage)))
                    ((debug file-missing)
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'error "%s"
                                              (error-message-string ex)))
                          :format nil))
                       (setq doom-doctor--errors
                             (cons
                              (doom-print--format
                               (doom-print--class 'error "%s"
                                                  (error-message-string ex)))
                              doom-doctor--errors))))
                    ((debug error)
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'error "Syntax error: %s" ex))
                          :format nil))
                       (setq doom-doctor--errors
                             (cons
                              (doom-print--format
                               (doom-print--class 'error "Syntax error: %s" ex))
                              doom-doctor--errors)))))
                  (if
                      (or doom-doctor--errors doom-doctor--warnings)
                      (progn
                        (let
                            ((doom-print-indent
                              (+
                               (if t doom-print-indent-increment 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'start
                                               (doom-print--style 'bold "%s %s"))
                            (car key)
                            (cdr key))
                           :format nil)
                          (doom-print
                           (doom-print--format "%s"
                                               (string-join
                                                (append doom-doctor--errors doom-doctor--warnings)
                                                "\n"))
                           :format nil))
                        (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                (setq doom-doctor--errors
                      (append doom-doctor--errors doom-local-errors))
                (setq doom-doctor--warnings
                      (append doom-doctor--warnings doom-local-warnings))))
          doom-modules))))
 ((doom-print-indent . 2)))

;;;; 16
((condition-case ex
     (let
         ((doom-print-indent
           (+
            (if t doom-print-indent-increment 0)
            doom-print-indent)))
       (let
           ((noninteractive nil)
            kill-emacs-query-functions kill-emacs-hook)
         (defvar doom-reloading-p nil)
         (if
             (file-exists-p doom-autoloads-file)
             nil
           (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
         (require 'doom-start)
         (doom-initialize-packages))
       (doom-print
        (doom-print--format
         (doom-print--class 'success "Initialized Doom Emacs %s")
         doom-version)
        :format nil)
       (doom-print
        (doom-print--format
         (if
             (hash-table-p doom-modules)
             (doom-print--class 'success "Detected %d modules"
                                (hash-table-count doom-modules))
           (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
        :format nil)
       (doom-print
        (doom-print--format
         (doom-print--class 'success "Detected %d packages")
         (length doom-packages))
        :format nil)
       (doom-print
        (doom-print--format
         (doom-print--class 'start "Checking Doom core for irregularities..."))
        :format nil)
       (let
           ((doom-print-indent
             (+
              (if t doom-print-indent-increment 0)
              doom-print-indent)))
         (let
             ((--dolist-tail--
               (list "savehist" "projectile.cache")))
           (while --dolist-tail--
             (let
                 ((file
                   (car --dolist-tail--)))
               (let*
                   ((size
                     (and t
                          (condition-case nil
                              (progn
                                (doom-file-size file doom-cache-dir))
                            (error nil)))))
                 (if size
                     (if
                         (> size 1048576)
                         (progn
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                    (/ size 1024 1024.0)))
                                :format nil))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                        (/ size 1024 1024.0)))
                                    doom-doctor--warnings)))
                           (let
                               ((doom-print-indent
                                 (+
                                  (if t doom-print-indent-increment 0)
                                  doom-print-indent)))
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'fill
                                                  (string-join
                                                   (list "Consider deleting it from your system (manually)")
                                                   "\n")))
                              :format nil))))
                   nil))
               (setq --dolist-tail--
                     (cdr --dolist-tail--)))))
         (if
             (condition-case nil
                 (progn
                   (executable-find doom-projectile-fd-binary))
               (error nil))
             nil
           (progn
             (if inhibit-message nil
               (doom-print
                (doom-print--format
                 (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                :format nil))
             (setq doom-doctor--warnings
                   (cons
                    (doom-print--format
                     (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                    doom-doctor--warnings))))
         (require 'projectile)
         (if
             (projectile-project-root "~")
             (progn
               (progn
                 (if inhibit-message nil
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                    :format nil))
                 (setq doom-doctor--warnings
                       (cons
                        (doom-print--format
                         (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                        doom-doctor--warnings)))
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'fill
                                      (string-join
                                       (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                       "\n")))
                  :format nil))))
         (if
             (and
              (file-equal-p doom-user-dir "~/.config/doom")
              (file-directory-p "~/.doom.d"))
             (progn
               (doom-print
                (doom-print--format
                 (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                 (doom-print--class 'path doom-user-dir))
                :format nil)
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'fill
                                      (string-join
                                       (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                       "\n")))
                  :format nil))))
         (if
             (not
              (executable-find "fc-list"))
             (progn
               (if inhibit-message nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                  :format nil))
               (setq doom-doctor--warnings
                     (cons
                      (doom-print--format
                       (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                      doom-doctor--warnings)))
           (if
               (and
                (cond
                 ((eq system-type 'gnu/linux)
                  (let nil
                    (concat
                     (or
                      (getenv "XDG_DATA_HOME")
                      "~/.local/share")
                     "/fonts/")))
                 ((eq system-type 'darwin)
                  (let nil "~/Library/Fonts/")))
                (require 'all-the-icons nil t))
               (progn
                 (let
                     ((temp-buffer
                       (generate-new-buffer " *temp*" t)))
                   (save-current-buffer
                     (set-buffer temp-buffer)
                     (unwind-protect
                         (progn
                           (let
                               ((errors 0))
                             (let*
                                 ((output
                                   (doom-call-process "fc-list" "" "file"))
                                  (status
                                   (if output
                                       (car-safe
                                        (prog1 output
                                          (setq output
                                                (cdr output))))
                                     (signal 'wrong-number-of-arguments
                                             (list
                                              '(status . output)
                                              (length output))))))
                               (if
                                   (not
                                    (= 0 status))
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                    :format nil)
                                 (insert
                                  (cdr
                                   (doom-call-process "fc-list" "" "file")))
                                 (let
                                     ((--dolist-tail-- all-the-icons-font-names))
                                   (while --dolist-tail--
                                     (let
                                         ((font
                                           (car --dolist-tail--)))
                                       (if
                                           (save-excursion
                                             (re-search-backward font nil t))
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--style 'green "Found font %s" font))
                                            :format nil)
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--class 'warn "Warning: couldn't find %S font")
                                           font)
                                          :format nil))
                                       (setq --dolist-tail--
                                             (cdr --dolist-tail--)))))
                                 (if
                                     (> errors 0)
                                     (progn
                                       (let
                                           ((doom-print-indent
                                             (+
                                              (if t doom-print-indent-increment 0)
                                              doom-print-indent)))
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--class 'fill
                                                              (string-join
                                                               (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                               "\n")))
                                          :format nil))))))))
                       (and
                        (buffer-name temp-buffer)
                        (kill-buffer temp-buffer)))))))))
       (doom-print
        (doom-print--format
         (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
        :format nil)
       (if
           (file-directory-p doom-user-dir)
           (progn
             (let
                 ((doom-print-indent
                   (+
                    (if t doom-print-indent-increment 0)
                    doom-print-indent)))
               (elc-check-dir doom-user-dir))))
       (if doom-modules
           (progn
             (doom-print
              (doom-print--format
               (doom-print--class 'start "Checking your enabled modules..."))
              :format nil)
             (advice-add #'require :around #'doom-shut-up-a)
             (maphash
              #'(lambda
                  (key plist)
                  (let
                      (doom-local-errors doom-local-warnings)
                    (let
                        (doom-doctor--errors doom-doctor--warnings)
                      (condition-case ex
                          (let
                              ((doctor-file
                                (doom-module-path
                                 (car key)
                                 (cdr key)
                                 "doctor.el"))
                               (packages-file
                                (doom-module-path
                                 (car key)
                                 (cdr key)
                                 "packages.el")))
                            (let*
                                ((doom-output-indent 6)
                                 (--cl-var--
                                  (let
                                      (doom-packages doom-disabled-packages)
                                    (load packages-file 'noerror 'nomessage)
                                    (mapcar #'car doom-packages)))
                                 (name nil))
                              (while
                                  (consp --cl-var--)
                                (setq name
                                      (car --cl-var--))
                                (if
                                    (or
                                     (doom-package-get name :disable)
                                     (eval
                                      (doom-package-get name :ignore))
                                     (plist-member
                                      (doom-package-get name :recipe)
                                      :local-repo)
                                     (locate-library
                                      (symbol-name name))
                                     (doom-package-built-in-p name)
                                     (doom-package-installed-p name))
                                    (progn)
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'error "Missing emacs package: %S")
                                    name)
                                   :format nil))
                                (setq --cl-var--
                                      (cdr --cl-var--)))
                              nil)
                            (let
                                ((inhibit-message t))
                              (load doctor-file 'noerror 'nomessage)))
                        ((debug file-missing)
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'error "%s"
                                                  (error-message-string ex)))
                              :format nil))
                           (setq doom-doctor--errors
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'error "%s"
                                                      (error-message-string ex)))
                                  doom-doctor--errors))))
                        ((debug error)
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'error "Syntax error: %s" ex))
                              :format nil))
                           (setq doom-doctor--errors
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'error "Syntax error: %s" ex))
                                  doom-doctor--errors)))))
                      (if
                          (or doom-doctor--errors doom-doctor--warnings)
                          (progn
                            (let
                                ((doom-print-indent
                                  (+
                                   (if t doom-print-indent-increment 0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'start
                                                   (doom-print--style 'bold "%s %s"))
                                (car key)
                                (cdr key))
                               :format nil)
                              (doom-print
                               (doom-print--format "%s"
                                                   (string-join
                                                    (append doom-doctor--errors doom-doctor--warnings)
                                                    "\n"))
                               :format nil))
                            (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                    (setq doom-doctor--errors
                          (append doom-doctor--errors doom-local-errors))
                    (setq doom-doctor--warnings
                          (append doom-doctor--warnings doom-local-warnings))))
              doom-modules))))
   ((debug error)
    (progn
      (if inhibit-message nil
        (doom-print
         (doom-print--format
          (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                             (or
                              (cdr-safe ex)
                              (car ex))))
         :format nil))
      (setq doom-doctor--warnings
            (cons
             (doom-print--format
              (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                 (or
                                  (cdr-safe ex)
                                  (car ex))))
             doom-doctor--warnings)))
    (setq doom-modules nil)))
 nil)

;;;; 17
((let nil
   (doom-print
    (doom-print--format "The doctor will see you now...\n")
    :format nil)
   (doom-print
    (doom-print--format
     (doom-print--class 'start "Checking your Emacs version..."))
    :format nil)
   (let
       ((doom-print-indent
         (+
          (if t doom-print-indent-increment 0)
          doom-print-indent)))
     (cond
      ((string= ".50"
                (substring emacs-version -3))
       (progn
         (if inhibit-message nil
           (doom-print
            (doom-print--format
             (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
            :format nil))
         (setq doom-doctor--errors
               (cons
                (doom-print--format
                 (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                doom-doctor--errors)))
       (let
           ((doom-print-indent
             (+
              (if t doom-print-indent-increment 0)
              doom-print-indent)))
         (doom-print
          (doom-print--format
           (doom-print--class 'fill
                              (string-join
                               (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                               "\n")))
          :format nil)))
      ((> emacs-major-version 28)
       (progn
         (if inhibit-message nil
           (doom-print
            (doom-print--format
             (doom-print--class 'warn "Emacs %s detected" emacs-version))
            :format nil))
         (setq doom-doctor--warnings
               (cons
                (doom-print--format
                 (doom-print--class 'warn "Emacs %s detected" emacs-version))
                doom-doctor--warnings)))
       (let
           ((doom-print-indent
             (+
              (if t doom-print-indent-increment 0)
              doom-print-indent)))
         (doom-print
          (doom-print--format
           (doom-print--class 'fill
                              (string-join
                               (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                               "\n")))
          :format nil)))
      ((< emacs-major-version 27)
       (progn
         (if inhibit-message nil
           (doom-print
            (doom-print--format
             (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
            :format nil))
         (setq doom-doctor--errors
               (cons
                (doom-print--format
                 (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                doom-doctor--errors))))))
   (doom-print
    (doom-print--format
     (doom-print--class 'start "Checking for Doom's prerequisites..."))
    :format nil)
   (let
       ((doom-print-indent
         (+
          (if t doom-print-indent-increment 0)
          doom-print-indent)))
     (if
         (not
          (executable-find "git"))
         (progn
           (if inhibit-message nil
             (doom-print
              (doom-print--format
               (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
              :format nil))
           (setq doom-doctor--errors
                 (cons
                  (doom-print--format
                   (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                  doom-doctor--errors)))
       (let
           ((save-match-data-internal
             (match-data)))
         (unwind-protect
             (progn
               (let*
                   ((version
                     (cdr
                      (doom-call-process "git" "version")))
                    (version
                     (and
                      (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                      (match-string 1 version))))
                 (if version
                     (if
                         (version< version "2.23")
                         (progn
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                :format nil))
                             (setq doom-doctor--errors
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                    doom-doctor--errors)))))
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                        :format nil))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                            doom-doctor--warnings))))))
           (set-match-data save-match-data-internal 'evaporate))))
     (if
         (executable-find "rg")
         nil
       (progn
         (if inhibit-message nil
           (doom-print
            (doom-print--format
             (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
            :format nil))
         (setq doom-doctor--errors
               (cons
                (doom-print--format
                 (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                doom-doctor--errors)))))
   (doom-print
    (doom-print--format
     (doom-print--class 'start "Checking for Emacs config conflicts..."))
    :format nil)
   (if
       (file-exists-p "~/.emacs")
       (progn
         (progn
           (if inhibit-message nil
             (doom-print
              (doom-print--format
               (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
              :format nil))
           (setq doom-doctor--warnings
                 (cons
                  (doom-print--format
                   (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                  doom-doctor--warnings)))
         (let
             ((doom-print-indent
               (+
                (if t doom-print-indent-increment 0)
                doom-print-indent)))
           (doom-print
            (doom-print--format
             (doom-print--class 'fill
                                (string-join
                                 (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                 "\n")))
            :format nil))))
   (doom-print
    (doom-print--format
     (doom-print--class 'start "Checking for great Emacs features..."))
    :format nil)
   (if
       (functionp 'json-serialize)
       nil
     (progn
       (if inhibit-message nil
         (doom-print
          (doom-print--format
           (doom-print--class 'warn "Emacs was not built with native JSON support"))
          :format nil))
       (setq doom-doctor--warnings
             (cons
              (doom-print--format
               (doom-print--class 'warn "Emacs was not built with native JSON support"))
              doom-doctor--warnings)))
     (let
         ((doom-print-indent
           (+
            (if t doom-print-indent-increment 0)
            doom-print-indent)))
       (doom-print
        (doom-print--format
         (doom-print--class 'fill
                            (string-join
                             (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                             "\n")))
        :format nil)))
   (if
       (featurep 'native-compile)
       nil
     (progn
       (if inhibit-message nil
         (doom-print
          (doom-print--format
           (doom-print--class 'warn "Emacs was not built with native compilation support"))
          :format nil))
       (setq doom-doctor--warnings
             (cons
              (doom-print--format
               (doom-print--class 'warn "Emacs was not built with native compilation support"))
              doom-doctor--warnings)))
     (let
         ((doom-print-indent
           (+
            (if t doom-print-indent-increment 0)
            doom-print-indent)))
       (doom-print
        (doom-print--format
         (doom-print--class 'fill
                            (string-join
                             (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                             "\n")))
        :format nil)))
   (doom-print
    (doom-print--format
     (doom-print--class 'start "Checking for private config conflicts..."))
    :format nil)
   (let*
       ((xdg-dir
         (concat
          (or
           (getenv "XDG_CONFIG_HOME")
           "~/.config")
          "/doom/"))
        (doom-dir
         (or
          (getenv "DOOMDIR")
          "~/.doom.d/"))
        (dir
         (if
             (file-directory-p xdg-dir)
             xdg-dir doom-dir)))
     (if
         (file-equal-p dir doom-emacs-dir)
         (progn
           (doom-print
            (doom-print--format
             (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                (doom-print--class 'path dir)))
            :format nil)
           (let
               ((doom-print-indent
                 (+
                  (if t doom-print-indent-increment 0)
                  doom-print-indent)))
             (doom-print
              (doom-print--format
               (doom-print--class 'fill
                                  (string-join
                                   (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                   "\n")))
              :format nil))))
     (if
         (and
          (not
           (file-equal-p xdg-dir doom-dir))
          (file-directory-p xdg-dir)
          (file-directory-p doom-dir))
         (progn
           (doom-print
            (doom-print--format
             (doom-print--class 'warn "Detected two private configs, in %s and %s")
             (abbreviate-file-name xdg-dir)
             doom-dir)
            :format nil)
           (let
               ((doom-print-indent
                 (+
                  (if t doom-print-indent-increment 0)
                  doom-print-indent)))
             (doom-print
              (doom-print--format
               (doom-print--class 'fill
                                  (string-join
                                   (list "The second directory will be ignored, as it has lower precedence.")
                                   "\n")))
              :format nil)))))
   (doom-print
    (doom-print--format
     (doom-print--class 'start "Checking for stale elc files..."))
    :format nil)
   (elc-check-dir doom-emacs-dir)
   (doom-print
    (doom-print--format
     (doom-print--class 'start "Checking for problematic git global settings..."))
    :format nil)
   (if
       (executable-find "git")
       (if
           (= 0
              (car
               (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
           (progn
             (progn
               (if inhibit-message nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                  :format nil))
               (setq doom-doctor--warnings
                     (cons
                      (doom-print--format
                       (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                      doom-doctor--warnings)))
             (let
                 ((doom-print-indent
                   (+
                    (if t doom-print-indent-increment 0)
                    doom-print-indent)))
               (doom-print
                (doom-print--format
                 (doom-print--class 'fill
                                    (string-join
                                     (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                     "\n")))
                :format nil))))
     (progn
       (if inhibit-message nil
         (doom-print
          (doom-print--format
           (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
          :format nil))
       (setq doom-doctor--errors
             (cons
              (doom-print--format
               (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
              doom-doctor--errors))))
   (doom-print
    (doom-print--format
     (doom-print--class 'start "Checking Doom Emacs..."))
    :format nil)
   (condition-case ex
       (let
           ((doom-print-indent
             (+
              (if t doom-print-indent-increment 0)
              doom-print-indent)))
         (let
             ((noninteractive nil)
              kill-emacs-query-functions kill-emacs-hook)
           (defvar doom-reloading-p nil)
           (if
               (file-exists-p doom-autoloads-file)
               nil
             (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
           (require 'doom-start)
           (doom-initialize-packages))
         (doom-print
          (doom-print--format
           (doom-print--class 'success "Initialized Doom Emacs %s")
           doom-version)
          :format nil)
         (doom-print
          (doom-print--format
           (if
               (hash-table-p doom-modules)
               (doom-print--class 'success "Detected %d modules"
                                  (hash-table-count doom-modules))
             (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
          :format nil)
         (doom-print
          (doom-print--format
           (doom-print--class 'success "Detected %d packages")
           (length doom-packages))
          :format nil)
         (doom-print
          (doom-print--format
           (doom-print--class 'start "Checking Doom core for irregularities..."))
          :format nil)
         (let
             ((doom-print-indent
               (+
                (if t doom-print-indent-increment 0)
                doom-print-indent)))
           (let
               ((--dolist-tail--
                 (list "savehist" "projectile.cache")))
             (while --dolist-tail--
               (let
                   ((file
                     (car --dolist-tail--)))
                 (let*
                     ((size
                       (and t
                            (condition-case nil
                                (progn
                                  (doom-file-size file doom-cache-dir))
                              (error nil)))))
                   (if size
                       (if
                           (> size 1048576)
                           (progn
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                      (/ size 1024 1024.0)))
                                  :format nil))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                          (/ size 1024 1024.0)))
                                      doom-doctor--warnings)))
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'fill
                                                    (string-join
                                                     (list "Consider deleting it from your system (manually)")
                                                     "\n")))
                                :format nil))))
                     nil))
                 (setq --dolist-tail--
                       (cdr --dolist-tail--)))))
           (if
               (condition-case nil
                   (progn
                     (executable-find doom-projectile-fd-binary))
                 (error nil))
               nil
             (progn
               (if inhibit-message nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                  :format nil))
               (setq doom-doctor--warnings
                     (cons
                      (doom-print--format
                       (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                      doom-doctor--warnings))))
           (require 'projectile)
           (if
               (projectile-project-root "~")
               (progn
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                          doom-doctor--warnings)))
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'fill
                                        (string-join
                                         (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                         "\n")))
                    :format nil))))
           (if
               (and
                (file-equal-p doom-user-dir "~/.config/doom")
                (file-directory-p "~/.doom.d"))
               (progn
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                   (doom-print--class 'path doom-user-dir))
                  :format nil)
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'fill
                                        (string-join
                                         (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                         "\n")))
                    :format nil))))
           (if
               (not
                (executable-find "fc-list"))
               (progn
                 (if inhibit-message nil
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                    :format nil))
                 (setq doom-doctor--warnings
                       (cons
                        (doom-print--format
                         (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                        doom-doctor--warnings)))
             (if
                 (and
                  (cond
                   ((eq system-type 'gnu/linux)
                    (let nil
                      (concat
                       (or
                        (getenv "XDG_DATA_HOME")
                        "~/.local/share")
                       "/fonts/")))
                   ((eq system-type 'darwin)
                    (let nil "~/Library/Fonts/")))
                  (require 'all-the-icons nil t))
                 (progn
                   (let
                       ((temp-buffer
                         (generate-new-buffer " *temp*" t)))
                     (save-current-buffer
                       (set-buffer temp-buffer)
                       (unwind-protect
                           (progn
                             (let
                                 ((errors 0))
                               (let*
                                   ((output
                                     (doom-call-process "fc-list" "" "file"))
                                    (status
                                     (if output
                                         (car-safe
                                          (prog1 output
                                            (setq output
                                                  (cdr output))))
                                       (signal 'wrong-number-of-arguments
                                               (list
                                                '(status . output)
                                                (length output))))))
                                 (if
                                     (not
                                      (= 0 status))
                                     (doom-print
                                      (doom-print--format
                                       (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                      :format nil)
                                   (insert
                                    (cdr
                                     (doom-call-process "fc-list" "" "file")))
                                   (let
                                       ((--dolist-tail-- all-the-icons-font-names))
                                     (while --dolist-tail--
                                       (let
                                           ((font
                                             (car --dolist-tail--)))
                                         (if
                                             (save-excursion
                                               (re-search-backward font nil t))
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--style 'green "Found font %s" font))
                                              :format nil)
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'warn "Warning: couldn't find %S font")
                                             font)
                                            :format nil))
                                         (setq --dolist-tail--
                                               (cdr --dolist-tail--)))))
                                   (if
                                       (> errors 0)
                                       (progn
                                         (let
                                             ((doom-print-indent
                                               (+
                                                (if t doom-print-indent-increment 0)
                                                doom-print-indent)))
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'fill
                                                                (string-join
                                                                 (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                 "\n")))
                                            :format nil))))))))
                         (and
                          (buffer-name temp-buffer)
                          (kill-buffer temp-buffer)))))))))
         (doom-print
          (doom-print--format
           (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
          :format nil)
         (if
             (file-directory-p doom-user-dir)
             (progn
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (elc-check-dir doom-user-dir))))
         (if doom-modules
             (progn
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking your enabled modules..."))
                :format nil)
               (advice-add #'require :around #'doom-shut-up-a)
               (maphash
                #'(lambda
                    (key plist)
                    (let
                        (doom-local-errors doom-local-warnings)
                      (let
                          (doom-doctor--errors doom-doctor--warnings)
                        (condition-case ex
                            (let
                                ((doctor-file
                                  (doom-module-path
                                   (car key)
                                   (cdr key)
                                   "doctor.el"))
                                 (packages-file
                                  (doom-module-path
                                   (car key)
                                   (cdr key)
                                   "packages.el")))
                              (let*
                                  ((doom-output-indent 6)
                                   (--cl-var--
                                    (let
                                        (doom-packages doom-disabled-packages)
                                      (load packages-file 'noerror 'nomessage)
                                      (mapcar #'car doom-packages)))
                                   (name nil))
                                (while
                                    (consp --cl-var--)
                                  (setq name
                                        (car --cl-var--))
                                  (if
                                      (or
                                       (doom-package-get name :disable)
                                       (eval
                                        (doom-package-get name :ignore))
                                       (plist-member
                                        (doom-package-get name :recipe)
                                        :local-repo)
                                       (locate-library
                                        (symbol-name name))
                                       (doom-package-built-in-p name)
                                       (doom-package-installed-p name))
                                      (progn)
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'error "Missing emacs package: %S")
                                      name)
                                     :format nil))
                                  (setq --cl-var--
                                        (cdr --cl-var--)))
                                nil)
                              (let
                                  ((inhibit-message t))
                                (load doctor-file 'noerror 'nomessage)))
                          ((debug file-missing)
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'error "%s"
                                                    (error-message-string ex)))
                                :format nil))
                             (setq doom-doctor--errors
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'error "%s"
                                                        (error-message-string ex)))
                                    doom-doctor--errors))))
                          ((debug error)
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'error "Syntax error: %s" ex))
                                :format nil))
                             (setq doom-doctor--errors
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'error "Syntax error: %s" ex))
                                    doom-doctor--errors)))))
                        (if
                            (or doom-doctor--errors doom-doctor--warnings)
                            (progn
                              (let
                                  ((doom-print-indent
                                    (+
                                     (if t doom-print-indent-increment 0)
                                     doom-print-indent)))
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'start
                                                     (doom-print--style 'bold "%s %s"))
                                  (car key)
                                  (cdr key))
                                 :format nil)
                                (doom-print
                                 (doom-print--format "%s"
                                                     (string-join
                                                      (append doom-doctor--errors doom-doctor--warnings)
                                                      "\n"))
                                 :format nil))
                              (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                      (setq doom-doctor--errors
                            (append doom-doctor--errors doom-local-errors))
                      (setq doom-doctor--warnings
                            (append doom-doctor--warnings doom-local-warnings))))
                doom-modules))))
     ((debug error)
      (progn
        (if inhibit-message nil
          (doom-print
           (doom-print--format
            (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                               (or
                                (cdr-safe ex)
                                (car ex))))
           :format nil))
        (setq doom-doctor--warnings
              (cons
               (doom-print--format
                (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                   (or
                                    (cdr-safe ex)
                                    (car ex))))
               doom-doctor--warnings)))
      (setq doom-modules nil)))
   (terpri)
   (let
       ((--dolist-tail--
         (list
          (list doom-doctor--warnings "warning" 'yellow)
          (list doom-doctor--errors "error" 'red))))
     (while --dolist-tail--
       (let
           ((msg
             (car --dolist-tail--)))
         (if
             (car msg)
             (progn
               (doom-print
                (doom-print--format
                 (doom-print--class 'color
                                    (nth 2 msg)
                                    (if
                                        (cdr msg)
                                        "There are %d %ss!" "There is %d %s!")
                                    (length
                                     (car msg))
                                    (nth 1 msg)))
                :format nil)))
         (setq --dolist-tail--
               (cdr --dolist-tail--)))))
   (if
       (or doom-doctor--errors doom-doctor--warnings)
       nil
     (doom-print
      (doom-print--format
       (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
      :format nil))
   (exit! :pager\? "+G"))
 nil)

;;;; 18
(((closure
   (t)
   (cli alist)
   (let nil
     (doom-print
      (doom-print--format "The doctor will see you now...\n")
      :format nil)
     (doom-print
      (doom-print--format
       (doom-print--class 'start "Checking your Emacs version..."))
      :format nil)
     (let
         ((doom-print-indent
           (+
            (if t doom-print-indent-increment 0)
            doom-print-indent)))
       (cond
        ((string= ".50"
                  (substring emacs-version -3))
         (progn
           (if inhibit-message nil
             (doom-print
              (doom-print--format
               (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
              :format nil))
           (setq doom-doctor--errors
                 (cons
                  (doom-print--format
                   (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                  doom-doctor--errors)))
         (let
             ((doom-print-indent
               (+
                (if t doom-print-indent-increment 0)
                doom-print-indent)))
           (doom-print
            (doom-print--format
             (doom-print--class 'fill
                                (string-join
                                 (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                 "\n")))
            :format nil)))
        ((> emacs-major-version 28)
         (progn
           (if inhibit-message nil
             (doom-print
              (doom-print--format
               (doom-print--class 'warn "Emacs %s detected" emacs-version))
              :format nil))
           (setq doom-doctor--warnings
                 (cons
                  (doom-print--format
                   (doom-print--class 'warn "Emacs %s detected" emacs-version))
                  doom-doctor--warnings)))
         (let
             ((doom-print-indent
               (+
                (if t doom-print-indent-increment 0)
                doom-print-indent)))
           (doom-print
            (doom-print--format
             (doom-print--class 'fill
                                (string-join
                                 (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                 "\n")))
            :format nil)))
        ((< emacs-major-version 27)
         (progn
           (if inhibit-message nil
             (doom-print
              (doom-print--format
               (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
              :format nil))
           (setq doom-doctor--errors
                 (cons
                  (doom-print--format
                   (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                  doom-doctor--errors))))))
     (doom-print
      (doom-print--format
       (doom-print--class 'start "Checking for Doom's prerequisites..."))
      :format nil)
     (let
         ((doom-print-indent
           (+
            (if t doom-print-indent-increment 0)
            doom-print-indent)))
       (if
           (not
            (executable-find "git"))
           (progn
             (if inhibit-message nil
               (doom-print
                (doom-print--format
                 (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                :format nil))
             (setq doom-doctor--errors
                   (cons
                    (doom-print--format
                     (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                    doom-doctor--errors)))
         (let
             ((save-match-data-internal
               (match-data)))
           (unwind-protect
               (progn
                 (let*
                     ((version
                       (cdr
                        (doom-call-process "git" "version")))
                      (version
                       (and
                        (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                        (match-string 1 version))))
                   (if version
                       (if
                           (version< version "2.23")
                           (progn
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                  :format nil))
                               (setq doom-doctor--errors
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                      doom-doctor--errors)))))
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                          :format nil))
                       (setq doom-doctor--warnings
                             (cons
                              (doom-print--format
                               (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                              doom-doctor--warnings))))))
             (set-match-data save-match-data-internal 'evaporate))))
       (if
           (executable-find "rg")
           nil
         (progn
           (if inhibit-message nil
             (doom-print
              (doom-print--format
               (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
              :format nil))
           (setq doom-doctor--errors
                 (cons
                  (doom-print--format
                   (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                  doom-doctor--errors)))))
     (doom-print
      (doom-print--format
       (doom-print--class 'start "Checking for Emacs config conflicts..."))
      :format nil)
     (if
         (file-exists-p "~/.emacs")
         (progn
           (progn
             (if inhibit-message nil
               (doom-print
                (doom-print--format
                 (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                :format nil))
             (setq doom-doctor--warnings
                   (cons
                    (doom-print--format
                     (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                    doom-doctor--warnings)))
           (let
               ((doom-print-indent
                 (+
                  (if t doom-print-indent-increment 0)
                  doom-print-indent)))
             (doom-print
              (doom-print--format
               (doom-print--class 'fill
                                  (string-join
                                   (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                   "\n")))
              :format nil))))
     (doom-print
      (doom-print--format
       (doom-print--class 'start "Checking for great Emacs features..."))
      :format nil)
     (if
         (functionp 'json-serialize)
         nil
       (progn
         (if inhibit-message nil
           (doom-print
            (doom-print--format
             (doom-print--class 'warn "Emacs was not built with native JSON support"))
            :format nil))
         (setq doom-doctor--warnings
               (cons
                (doom-print--format
                 (doom-print--class 'warn "Emacs was not built with native JSON support"))
                doom-doctor--warnings)))
       (let
           ((doom-print-indent
             (+
              (if t doom-print-indent-increment 0)
              doom-print-indent)))
         (doom-print
          (doom-print--format
           (doom-print--class 'fill
                              (string-join
                               (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                               "\n")))
          :format nil)))
     (if
         (featurep 'native-compile)
         nil
       (progn
         (if inhibit-message nil
           (doom-print
            (doom-print--format
             (doom-print--class 'warn "Emacs was not built with native compilation support"))
            :format nil))
         (setq doom-doctor--warnings
               (cons
                (doom-print--format
                 (doom-print--class 'warn "Emacs was not built with native compilation support"))
                doom-doctor--warnings)))
       (let
           ((doom-print-indent
             (+
              (if t doom-print-indent-increment 0)
              doom-print-indent)))
         (doom-print
          (doom-print--format
           (doom-print--class 'fill
                              (string-join
                               (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                               "\n")))
          :format nil)))
     (doom-print
      (doom-print--format
       (doom-print--class 'start "Checking for private config conflicts..."))
      :format nil)
     (let*
         ((xdg-dir
           (concat
            (or
             (getenv "XDG_CONFIG_HOME")
             "~/.config")
            "/doom/"))
          (doom-dir
           (or
            (getenv "DOOMDIR")
            "~/.doom.d/"))
          (dir
           (if
               (file-directory-p xdg-dir)
               xdg-dir doom-dir)))
       (if
           (file-equal-p dir doom-emacs-dir)
           (progn
             (doom-print
              (doom-print--format
               (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                  (doom-print--class 'path dir)))
              :format nil)
             (let
                 ((doom-print-indent
                   (+
                    (if t doom-print-indent-increment 0)
                    doom-print-indent)))
               (doom-print
                (doom-print--format
                 (doom-print--class 'fill
                                    (string-join
                                     (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                     "\n")))
                :format nil))))
       (if
           (and
            (not
             (file-equal-p xdg-dir doom-dir))
            (file-directory-p xdg-dir)
            (file-directory-p doom-dir))
           (progn
             (doom-print
              (doom-print--format
               (doom-print--class 'warn "Detected two private configs, in %s and %s")
               (abbreviate-file-name xdg-dir)
               doom-dir)
              :format nil)
             (let
                 ((doom-print-indent
                   (+
                    (if t doom-print-indent-increment 0)
                    doom-print-indent)))
               (doom-print
                (doom-print--format
                 (doom-print--class 'fill
                                    (string-join
                                     (list "The second directory will be ignored, as it has lower precedence.")
                                     "\n")))
                :format nil)))))
     (doom-print
      (doom-print--format
       (doom-print--class 'start "Checking for stale elc files..."))
      :format nil)
     (elc-check-dir doom-emacs-dir)
     (doom-print
      (doom-print--format
       (doom-print--class 'start "Checking for problematic git global settings..."))
      :format nil)
     (if
         (executable-find "git")
         (if
             (= 0
                (car
                 (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
             (progn
               (progn
                 (if inhibit-message nil
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                    :format nil))
                 (setq doom-doctor--warnings
                       (cons
                        (doom-print--format
                         (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                        doom-doctor--warnings)))
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'fill
                                      (string-join
                                       (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                       "\n")))
                  :format nil))))
       (progn
         (if inhibit-message nil
           (doom-print
            (doom-print--format
             (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
            :format nil))
         (setq doom-doctor--errors
               (cons
                (doom-print--format
                 (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                doom-doctor--errors))))
     (doom-print
      (doom-print--format
       (doom-print--class 'start "Checking Doom Emacs..."))
      :format nil)
     (condition-case ex
         (let
             ((doom-print-indent
               (+
                (if t doom-print-indent-increment 0)
                doom-print-indent)))
           (let
               ((noninteractive nil)
                kill-emacs-query-functions kill-emacs-hook)
             (defvar doom-reloading-p nil)
             (if
                 (file-exists-p doom-autoloads-file)
                 nil
               (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
             (require 'doom-start)
             (doom-initialize-packages))
           (doom-print
            (doom-print--format
             (doom-print--class 'success "Initialized Doom Emacs %s")
             doom-version)
            :format nil)
           (doom-print
            (doom-print--format
             (if
                 (hash-table-p doom-modules)
                 (doom-print--class 'success "Detected %d modules"
                                    (hash-table-count doom-modules))
               (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
            :format nil)
           (doom-print
            (doom-print--format
             (doom-print--class 'success "Detected %d packages")
             (length doom-packages))
            :format nil)
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking Doom core for irregularities..."))
            :format nil)
           (let
               ((doom-print-indent
                 (+
                  (if t doom-print-indent-increment 0)
                  doom-print-indent)))
             (let
                 ((--dolist-tail--
                   (list "savehist" "projectile.cache")))
               (while --dolist-tail--
                 (let
                     ((file
                       (car --dolist-tail--)))
                   (let*
                       ((size
                         (and t
                              (condition-case nil
                                  (progn
                                    (doom-file-size file doom-cache-dir))
                                (error nil)))))
                     (if size
                         (if
                             (> size 1048576)
                             (progn
                               (progn
                                 (if inhibit-message nil
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                        (/ size 1024 1024.0)))
                                    :format nil))
                                 (setq doom-doctor--warnings
                                       (cons
                                        (doom-print--format
                                         (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                            (/ size 1024 1024.0)))
                                        doom-doctor--warnings)))
                               (let
                                   ((doom-print-indent
                                     (+
                                      (if t doom-print-indent-increment 0)
                                      doom-print-indent)))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'fill
                                                      (string-join
                                                       (list "Consider deleting it from your system (manually)")
                                                       "\n")))
                                  :format nil))))
                       nil))
                   (setq --dolist-tail--
                         (cdr --dolist-tail--)))))
             (if
                 (condition-case nil
                     (progn
                       (executable-find doom-projectile-fd-binary))
                   (error nil))
                 nil
               (progn
                 (if inhibit-message nil
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                    :format nil))
                 (setq doom-doctor--warnings
                       (cons
                        (doom-print--format
                         (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                        doom-doctor--warnings))))
             (require 'projectile)
             (if
                 (projectile-project-root "~")
                 (progn
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                        :format nil))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                            doom-doctor--warnings)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                           "\n")))
                      :format nil))))
             (if
                 (and
                  (file-equal-p doom-user-dir "~/.config/doom")
                  (file-directory-p "~/.doom.d"))
                 (progn
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                     (doom-print--class 'path doom-user-dir))
                    :format nil)
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                           "\n")))
                      :format nil))))
             (if
                 (not
                  (executable-find "fc-list"))
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                          doom-doctor--warnings)))
               (if
                   (and
                    (cond
                     ((eq system-type 'gnu/linux)
                      (let nil
                        (concat
                         (or
                          (getenv "XDG_DATA_HOME")
                          "~/.local/share")
                         "/fonts/")))
                     ((eq system-type 'darwin)
                      (let nil "~/Library/Fonts/")))
                    (require 'all-the-icons nil t))
                   (progn
                     (let
                         ((temp-buffer
                           (generate-new-buffer " *temp*" t)))
                       (save-current-buffer
                         (set-buffer temp-buffer)
                         (unwind-protect
                             (progn
                               (let
                                   ((errors 0))
                                 (let*
                                     ((output
                                       (doom-call-process "fc-list" "" "file"))
                                      (status
                                       (if output
                                           (car-safe
                                            (prog1 output
                                              (setq output
                                                    (cdr output))))
                                         (signal 'wrong-number-of-arguments
                                                 (list
                                                  '(status . output)
                                                  (length output))))))
                                   (if
                                       (not
                                        (= 0 status))
                                       (doom-print
                                        (doom-print--format
                                         (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                        :format nil)
                                     (insert
                                      (cdr
                                       (doom-call-process "fc-list" "" "file")))
                                     (let
                                         ((--dolist-tail-- all-the-icons-font-names))
                                       (while --dolist-tail--
                                         (let
                                             ((font
                                               (car --dolist-tail--)))
                                           (if
                                               (save-excursion
                                                 (re-search-backward font nil t))
                                               (doom-print
                                                (doom-print--format
                                                 (doom-print--style 'green "Found font %s" font))
                                                :format nil)
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'warn "Warning: couldn't find %S font")
                                               font)
                                              :format nil))
                                           (setq --dolist-tail--
                                                 (cdr --dolist-tail--)))))
                                     (if
                                         (> errors 0)
                                         (progn
                                           (let
                                               ((doom-print-indent
                                                 (+
                                                  (if t doom-print-indent-increment 0)
                                                  doom-print-indent)))
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'fill
                                                                  (string-join
                                                                   (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                   "\n")))
                                              :format nil))))))))
                           (and
                            (buffer-name temp-buffer)
                            (kill-buffer temp-buffer)))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
            :format nil)
           (if
               (file-directory-p doom-user-dir)
               (progn
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (elc-check-dir doom-user-dir))))
           (if doom-modules
               (progn
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'start "Checking your enabled modules..."))
                  :format nil)
                 (advice-add #'require :around #'doom-shut-up-a)
                 (maphash
                  #'(lambda
                      (key plist)
                      (let
                          (doom-local-errors doom-local-warnings)
                        (let
                            (doom-doctor--errors doom-doctor--warnings)
                          (condition-case ex
                              (let
                                  ((doctor-file
                                    (doom-module-path
                                     (car key)
                                     (cdr key)
                                     "doctor.el"))
                                   (packages-file
                                    (doom-module-path
                                     (car key)
                                     (cdr key)
                                     "packages.el")))
                                (let*
                                    ((doom-output-indent 6)
                                     (--cl-var--
                                      (let
                                          (doom-packages doom-disabled-packages)
                                        (load packages-file 'noerror 'nomessage)
                                        (mapcar #'car doom-packages)))
                                     (name nil))
                                  (while
                                      (consp --cl-var--)
                                    (setq name
                                          (car --cl-var--))
                                    (if
                                        (or
                                         (doom-package-get name :disable)
                                         (eval
                                          (doom-package-get name :ignore))
                                         (plist-member
                                          (doom-package-get name :recipe)
                                          :local-repo)
                                         (locate-library
                                          (symbol-name name))
                                         (doom-package-built-in-p name)
                                         (doom-package-installed-p name))
                                        (progn)
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "Missing emacs package: %S")
                                        name)
                                       :format nil))
                                    (setq --cl-var--
                                          (cdr --cl-var--)))
                                  nil)
                                (let
                                    ((inhibit-message t))
                                  (load doctor-file 'noerror 'nomessage)))
                            ((debug file-missing)
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'error "%s"
                                                      (error-message-string ex)))
                                  :format nil))
                               (setq doom-doctor--errors
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'error "%s"
                                                          (error-message-string ex)))
                                      doom-doctor--errors))))
                            ((debug error)
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'error "Syntax error: %s" ex))
                                  :format nil))
                               (setq doom-doctor--errors
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'error "Syntax error: %s" ex))
                                      doom-doctor--errors)))))
                          (if
                              (or doom-doctor--errors doom-doctor--warnings)
                              (progn
                                (let
                                    ((doom-print-indent
                                      (+
                                       (if t doom-print-indent-increment 0)
                                       doom-print-indent)))
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'start
                                                       (doom-print--style 'bold "%s %s"))
                                    (car key)
                                    (cdr key))
                                   :format nil)
                                  (doom-print
                                   (doom-print--format "%s"
                                                       (string-join
                                                        (append doom-doctor--errors doom-doctor--warnings)
                                                        "\n"))
                                   :format nil))
                                (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                        (setq doom-doctor--errors
                              (append doom-doctor--errors doom-local-errors))
                        (setq doom-doctor--warnings
                              (append doom-doctor--warnings doom-local-warnings))))
                  doom-modules))))
       ((debug error)
        (progn
          (if inhibit-message nil
            (doom-print
             (doom-print--format
              (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                 (or
                                  (cdr-safe ex)
                                  (car ex))))
             :format nil))
          (setq doom-doctor--warnings
                (cons
                 (doom-print--format
                  (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                     (or
                                      (cdr-safe ex)
                                      (car ex))))
                 doom-doctor--warnings)))
        (setq doom-modules nil)))
     (terpri)
     (let
         ((--dolist-tail--
           (list
            (list doom-doctor--warnings "warning" 'yellow)
            (list doom-doctor--errors "error" 'red))))
       (while --dolist-tail--
         (let
             ((msg
               (car --dolist-tail--)))
           (if
               (car msg)
               (progn
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'color
                                      (nth 2 msg)
                                      (if
                                          (cdr msg)
                                          "There are %d %ss!" "There is %d %s!")
                                      (length
                                       (car msg))
                                      (nth 1 msg)))
                  :format nil)))
           (setq --dolist-tail--
                 (cdr --dolist-tail--)))))
     (if
         (or doom-doctor--errors doom-doctor--warnings)
         nil
       (doom-print
        (doom-print--format
         (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
        :format nil))
     (exit! :pager\? "+G")))
  #s(doom-cli
     ("doom" "doctor")
     nil
     (("SUMMARY" . "Diagnoses common issues on your system.")
      ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
     nil nil nil nil
     (:benchmark nil :prefix
                 (doom)
                 :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
     (closure
      (t)
      (cli alist)
      (let nil
        (doom-print
         (doom-print--format "The doctor will see you now...\n")
         :format nil)
        (doom-print
         (doom-print--format
          (doom-print--class 'start "Checking your Emacs version..."))
         :format nil)
        (let
            ((doom-print-indent
              (+
               (if t doom-print-indent-increment 0)
               doom-print-indent)))
          (cond
           ((string= ".50"
                     (substring emacs-version -3))
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                 :format nil))
              (setq doom-doctor--errors
                    (cons
                     (doom-print--format
                      (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                     doom-doctor--errors)))
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (doom-print
               (doom-print--format
                (doom-print--class 'fill
                                   (string-join
                                    (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                    "\n")))
               :format nil)))
           ((> emacs-major-version 28)
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Emacs %s detected" emacs-version))
                 :format nil))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Emacs %s detected" emacs-version))
                     doom-doctor--warnings)))
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (doom-print
               (doom-print--format
                (doom-print--class 'fill
                                   (string-join
                                    (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                    "\n")))
               :format nil)))
           ((< emacs-major-version 27)
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                 :format nil))
              (setq doom-doctor--errors
                    (cons
                     (doom-print--format
                      (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                     doom-doctor--errors))))))
        (doom-print
         (doom-print--format
          (doom-print--class 'start "Checking for Doom's prerequisites..."))
         :format nil)
        (let
            ((doom-print-indent
              (+
               (if t doom-print-indent-increment 0)
               doom-print-indent)))
          (if
              (not
               (executable-find "git"))
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                       doom-doctor--errors)))
            (let
                ((save-match-data-internal
                  (match-data)))
              (unwind-protect
                  (progn
                    (let*
                        ((version
                          (cdr
                           (doom-call-process "git" "version")))
                         (version
                          (and
                           (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                           (match-string 1 version))))
                      (if version
                          (if
                              (version< version "2.23")
                              (progn
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                     :format nil))
                                  (setq doom-doctor--errors
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                         doom-doctor--errors)))))
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                             :format nil))
                          (setq doom-doctor--warnings
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                 doom-doctor--warnings))))))
                (set-match-data save-match-data-internal 'evaporate))))
          (if
              (executable-find "rg")
              nil
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                 :format nil))
              (setq doom-doctor--errors
                    (cons
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                     doom-doctor--errors)))))
        (doom-print
         (doom-print--format
          (doom-print--class 'start "Checking for Emacs config conflicts..."))
         :format nil)
        (if
            (file-exists-p "~/.emacs")
            (progn
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                   :format nil))
                (setq doom-doctor--warnings
                      (cons
                       (doom-print--format
                        (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                       doom-doctor--warnings)))
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'fill
                                     (string-join
                                      (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                      "\n")))
                 :format nil))))
        (doom-print
         (doom-print--format
          (doom-print--class 'start "Checking for great Emacs features..."))
         :format nil)
        (if
            (functionp 'json-serialize)
            nil
          (progn
            (if inhibit-message nil
              (doom-print
               (doom-print--format
                (doom-print--class 'warn "Emacs was not built with native JSON support"))
               :format nil))
            (setq doom-doctor--warnings
                  (cons
                   (doom-print--format
                    (doom-print--class 'warn "Emacs was not built with native JSON support"))
                   doom-doctor--warnings)))
          (let
              ((doom-print-indent
                (+
                 (if t doom-print-indent-increment 0)
                 doom-print-indent)))
            (doom-print
             (doom-print--format
              (doom-print--class 'fill
                                 (string-join
                                  (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                  "\n")))
             :format nil)))
        (if
            (featurep 'native-compile)
            nil
          (progn
            (if inhibit-message nil
              (doom-print
               (doom-print--format
                (doom-print--class 'warn "Emacs was not built with native compilation support"))
               :format nil))
            (setq doom-doctor--warnings
                  (cons
                   (doom-print--format
                    (doom-print--class 'warn "Emacs was not built with native compilation support"))
                   doom-doctor--warnings)))
          (let
              ((doom-print-indent
                (+
                 (if t doom-print-indent-increment 0)
                 doom-print-indent)))
            (doom-print
             (doom-print--format
              (doom-print--class 'fill
                                 (string-join
                                  (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                  "\n")))
             :format nil)))
        (doom-print
         (doom-print--format
          (doom-print--class 'start "Checking for private config conflicts..."))
         :format nil)
        (let*
            ((xdg-dir
              (concat
               (or
                (getenv "XDG_CONFIG_HOME")
                "~/.config")
               "/doom/"))
             (doom-dir
              (or
               (getenv "DOOMDIR")
               "~/.doom.d/"))
             (dir
              (if
                  (file-directory-p xdg-dir)
                  xdg-dir doom-dir)))
          (if
              (file-equal-p dir doom-emacs-dir)
              (progn
                (doom-print
                 (doom-print--format
                  (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                     (doom-print--class 'path dir)))
                 :format nil)
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'fill
                                       (string-join
                                        (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                        "\n")))
                   :format nil))))
          (if
              (and
               (not
                (file-equal-p xdg-dir doom-dir))
               (file-directory-p xdg-dir)
               (file-directory-p doom-dir))
              (progn
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Detected two private configs, in %s and %s")
                  (abbreviate-file-name xdg-dir)
                  doom-dir)
                 :format nil)
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'fill
                                       (string-join
                                        (list "The second directory will be ignored, as it has lower precedence.")
                                        "\n")))
                   :format nil)))))
        (doom-print
         (doom-print--format
          (doom-print--class 'start "Checking for stale elc files..."))
         :format nil)
        (elc-check-dir doom-emacs-dir)
        (doom-print
         (doom-print--format
          (doom-print--class 'start "Checking for problematic git global settings..."))
         :format nil)
        (if
            (executable-find "git")
            (if
                (= 0
                   (car
                    (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                (progn
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                       :format nil))
                    (setq doom-doctor--warnings
                          (cons
                           (doom-print--format
                            (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                           doom-doctor--warnings)))
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'fill
                                         (string-join
                                          (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                          "\n")))
                     :format nil))))
          (progn
            (if inhibit-message nil
              (doom-print
               (doom-print--format
                (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
               :format nil))
            (setq doom-doctor--errors
                  (cons
                   (doom-print--format
                    (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                   doom-doctor--errors))))
        (doom-print
         (doom-print--format
          (doom-print--class 'start "Checking Doom Emacs..."))
         :format nil)
        (condition-case ex
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (let
                  ((noninteractive nil)
                   kill-emacs-query-functions kill-emacs-hook)
                (defvar doom-reloading-p nil)
                (if
                    (file-exists-p doom-autoloads-file)
                    nil
                  (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                (require 'doom-start)
                (doom-initialize-packages))
              (doom-print
               (doom-print--format
                (doom-print--class 'success "Initialized Doom Emacs %s")
                doom-version)
               :format nil)
              (doom-print
               (doom-print--format
                (if
                    (hash-table-p doom-modules)
                    (doom-print--class 'success "Detected %d modules"
                                       (hash-table-count doom-modules))
                  (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
               :format nil)
              (doom-print
               (doom-print--format
                (doom-print--class 'success "Detected %d packages")
                (length doom-packages))
               :format nil)
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking Doom core for irregularities..."))
               :format nil)
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (let
                    ((--dolist-tail--
                      (list "savehist" "projectile.cache")))
                  (while --dolist-tail--
                    (let
                        ((file
                          (car --dolist-tail--)))
                      (let*
                          ((size
                            (and t
                                 (condition-case nil
                                     (progn
                                       (doom-file-size file doom-cache-dir))
                                   (error nil)))))
                        (if size
                            (if
                                (> size 1048576)
                                (progn
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                           (/ size 1024 1024.0)))
                                       :format nil))
                                    (setq doom-doctor--warnings
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                               (/ size 1024 1024.0)))
                                           doom-doctor--warnings)))
                                  (let
                                      ((doom-print-indent
                                        (+
                                         (if t doom-print-indent-increment 0)
                                         doom-print-indent)))
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'fill
                                                         (string-join
                                                          (list "Consider deleting it from your system (manually)")
                                                          "\n")))
                                     :format nil))))
                          nil))
                      (setq --dolist-tail--
                            (cdr --dolist-tail--)))))
                (if
                    (condition-case nil
                        (progn
                          (executable-find doom-projectile-fd-binary))
                      (error nil))
                    nil
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                       :format nil))
                    (setq doom-doctor--warnings
                          (cons
                           (doom-print--format
                            (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                           doom-doctor--warnings))))
                (require 'projectile)
                (if
                    (projectile-project-root "~")
                    (progn
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                           :format nil))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                               doom-doctor--warnings)))
                      (let
                          ((doom-print-indent
                            (+
                             (if t doom-print-indent-increment 0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'fill
                                             (string-join
                                              (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                              "\n")))
                         :format nil))))
                (if
                    (and
                     (file-equal-p doom-user-dir "~/.config/doom")
                     (file-directory-p "~/.doom.d"))
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                        (doom-print--class 'path doom-user-dir))
                       :format nil)
                      (let
                          ((doom-print-indent
                            (+
                             (if t doom-print-indent-increment 0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'fill
                                             (string-join
                                              (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                              "\n")))
                         :format nil))))
                (if
                    (not
                     (executable-find "fc-list"))
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                         :format nil))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                             doom-doctor--warnings)))
                  (if
                      (and
                       (cond
                        ((eq system-type 'gnu/linux)
                         (let nil
                           (concat
                            (or
                             (getenv "XDG_DATA_HOME")
                             "~/.local/share")
                            "/fonts/")))
                        ((eq system-type 'darwin)
                         (let nil "~/Library/Fonts/")))
                       (require 'all-the-icons nil t))
                      (progn
                        (let
                            ((temp-buffer
                              (generate-new-buffer " *temp*" t)))
                          (save-current-buffer
                            (set-buffer temp-buffer)
                            (unwind-protect
                                (progn
                                  (let
                                      ((errors 0))
                                    (let*
                                        ((output
                                          (doom-call-process "fc-list" "" "file"))
                                         (status
                                          (if output
                                              (car-safe
                                               (prog1 output
                                                 (setq output
                                                       (cdr output))))
                                            (signal 'wrong-number-of-arguments
                                                    (list
                                                     '(status . output)
                                                     (length output))))))
                                      (if
                                          (not
                                           (= 0 status))
                                          (doom-print
                                           (doom-print--format
                                            (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                           :format nil)
                                        (insert
                                         (cdr
                                          (doom-call-process "fc-list" "" "file")))
                                        (let
                                            ((--dolist-tail-- all-the-icons-font-names))
                                          (while --dolist-tail--
                                            (let
                                                ((font
                                                  (car --dolist-tail--)))
                                              (if
                                                  (save-excursion
                                                    (re-search-backward font nil t))
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--style 'green "Found font %s" font))
                                                   :format nil)
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'warn "Warning: couldn't find %S font")
                                                  font)
                                                 :format nil))
                                              (setq --dolist-tail--
                                                    (cdr --dolist-tail--)))))
                                        (if
                                            (> errors 0)
                                            (progn
                                              (let
                                                  ((doom-print-indent
                                                    (+
                                                     (if t doom-print-indent-increment 0)
                                                     doom-print-indent)))
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'fill
                                                                     (string-join
                                                                      (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                      "\n")))
                                                 :format nil))))))))
                              (and
                               (buffer-name temp-buffer)
                               (kill-buffer temp-buffer)))))))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
               :format nil)
              (if
                  (file-directory-p doom-user-dir)
                  (progn
                    (let
                        ((doom-print-indent
                          (+
                           (if t doom-print-indent-increment 0)
                           doom-print-indent)))
                      (elc-check-dir doom-user-dir))))
              (if doom-modules
                  (progn
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'start "Checking your enabled modules..."))
                     :format nil)
                    (advice-add #'require :around #'doom-shut-up-a)
                    (maphash
                     #'(lambda
                         (key plist)
                         (let
                             (doom-local-errors doom-local-warnings)
                           (let
                               (doom-doctor--errors doom-doctor--warnings)
                             (condition-case ex
                                 (let
                                     ((doctor-file
                                       (doom-module-path
                                        (car key)
                                        (cdr key)
                                        "doctor.el"))
                                      (packages-file
                                       (doom-module-path
                                        (car key)
                                        (cdr key)
                                        "packages.el")))
                                   (let*
                                       ((doom-output-indent 6)
                                        (--cl-var--
                                         (let
                                             (doom-packages doom-disabled-packages)
                                           (load packages-file 'noerror 'nomessage)
                                           (mapcar #'car doom-packages)))
                                        (name nil))
                                     (while
                                         (consp --cl-var--)
                                       (setq name
                                             (car --cl-var--))
                                       (if
                                           (or
                                            (doom-package-get name :disable)
                                            (eval
                                             (doom-package-get name :ignore))
                                            (plist-member
                                             (doom-package-get name :recipe)
                                             :local-repo)
                                            (locate-library
                                             (symbol-name name))
                                            (doom-package-built-in-p name)
                                            (doom-package-installed-p name))
                                           (progn)
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--class 'error "Missing emacs package: %S")
                                           name)
                                          :format nil))
                                       (setq --cl-var--
                                             (cdr --cl-var--)))
                                     nil)
                                   (let
                                       ((inhibit-message t))
                                     (load doctor-file 'noerror 'nomessage)))
                               ((debug file-missing)
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'error "%s"
                                                         (error-message-string ex)))
                                     :format nil))
                                  (setq doom-doctor--errors
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'error "%s"
                                                             (error-message-string ex)))
                                         doom-doctor--errors))))
                               ((debug error)
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'error "Syntax error: %s" ex))
                                     :format nil))
                                  (setq doom-doctor--errors
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'error "Syntax error: %s" ex))
                                         doom-doctor--errors)))))
                             (if
                                 (or doom-doctor--errors doom-doctor--warnings)
                                 (progn
                                   (let
                                       ((doom-print-indent
                                         (+
                                          (if t doom-print-indent-increment 0)
                                          doom-print-indent)))
                                     (doom-print
                                      (doom-print--format
                                       (doom-print--class 'start
                                                          (doom-print--style 'bold "%s %s"))
                                       (car key)
                                       (cdr key))
                                      :format nil)
                                     (doom-print
                                      (doom-print--format "%s"
                                                          (string-join
                                                           (append doom-doctor--errors doom-doctor--warnings)
                                                           "\n"))
                                      :format nil))
                                   (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                           (setq doom-doctor--errors
                                 (append doom-doctor--errors doom-local-errors))
                           (setq doom-doctor--warnings
                                 (append doom-doctor--warnings doom-local-warnings))))
                     doom-modules))))
          ((debug error)
           (progn
             (if inhibit-message nil
               (doom-print
                (doom-print--format
                 (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                    (or
                                     (cdr-safe ex)
                                     (car ex))))
                :format nil))
             (setq doom-doctor--warnings
                   (cons
                    (doom-print--format
                     (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                        (or
                                         (cdr-safe ex)
                                         (car ex))))
                    doom-doctor--warnings)))
           (setq doom-modules nil)))
        (terpri)
        (let
            ((--dolist-tail--
              (list
               (list doom-doctor--warnings "warning" 'yellow)
               (list doom-doctor--errors "error" 'red))))
          (while --dolist-tail--
            (let
                ((msg
                  (car --dolist-tail--)))
              (if
                  (car msg)
                  (progn
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'color
                                         (nth 2 msg)
                                         (if
                                             (cdr msg)
                                             "There are %d %ss!" "There is %d %s!")
                                         (length
                                          (car msg))
                                         (nth 1 msg)))
                     :format nil)))
              (setq --dolist-tail--
                    (cdr --dolist-tail--)))))
        (if
            (or doom-doctor--errors doom-doctor--warnings)
            nil
          (doom-print
           (doom-print--format
            (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
           :format nil))
        (exit! :pager\? "+G"))))
  nil)
 ((cli . #s(doom-cli
            ("doom" "doctor")
            nil
            (("SUMMARY" . "Diagnoses common issues on your system.")
             ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
            nil nil nil nil
            (:benchmark nil :prefix
                        (doom)
                        :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
            (closure
             (t)
             (cli alist)
             (let nil
               (doom-print
                (doom-print--format "The doctor will see you now...\n")
                :format nil)
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking your Emacs version..."))
                :format nil)
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (cond
                  ((string= ".50"
                            (substring emacs-version -3))
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                            doom-doctor--errors)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                           "\n")))
                      :format nil)))
                  ((> emacs-major-version 28)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Emacs %s detected" emacs-version))
                        :format nil))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Emacs %s detected" emacs-version))
                            doom-doctor--warnings)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                           "\n")))
                      :format nil)))
                  ((< emacs-major-version 27)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                            doom-doctor--errors))))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for Doom's prerequisites..."))
                :format nil)
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (if
                     (not
                      (executable-find "git"))
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                          :format nil))
                       (setq doom-doctor--errors
                             (cons
                              (doom-print--format
                               (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                              doom-doctor--errors)))
                   (let
                       ((save-match-data-internal
                         (match-data)))
                     (unwind-protect
                         (progn
                           (let*
                               ((version
                                 (cdr
                                  (doom-call-process "git" "version")))
                                (version
                                 (and
                                  (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                  (match-string 1 version))))
                             (if version
                                 (if
                                     (version< version "2.23")
                                     (progn
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                doom-doctor--errors)))))
                               (progn
                                 (if inhibit-message nil
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                    :format nil))
                                 (setq doom-doctor--warnings
                                       (cons
                                        (doom-print--format
                                         (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                        doom-doctor--warnings))))))
                       (set-match-data save-match-data-internal 'evaporate))))
                 (if
                     (executable-find "rg")
                     nil
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                            doom-doctor--errors)))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for Emacs config conflicts..."))
                :format nil)
               (if
                   (file-exists-p "~/.emacs")
                   (progn
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                          :format nil))
                       (setq doom-doctor--warnings
                             (cons
                              (doom-print--format
                               (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                              doom-doctor--warnings)))
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'fill
                                            (string-join
                                             (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                             "\n")))
                        :format nil))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for great Emacs features..."))
                :format nil)
               (if
                   (functionp 'json-serialize)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native JSON support"))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native JSON support"))
                          doom-doctor--warnings)))
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'fill
                                        (string-join
                                         (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                         "\n")))
                    :format nil)))
               (if
                   (featurep 'native-compile)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native compilation support"))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native compilation support"))
                          doom-doctor--warnings)))
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'fill
                                        (string-join
                                         (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                         "\n")))
                    :format nil)))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for private config conflicts..."))
                :format nil)
               (let*
                   ((xdg-dir
                     (concat
                      (or
                       (getenv "XDG_CONFIG_HOME")
                       "~/.config")
                      "/doom/"))
                    (doom-dir
                     (or
                      (getenv "DOOMDIR")
                      "~/.doom.d/"))
                    (dir
                     (if
                         (file-directory-p xdg-dir)
                         xdg-dir doom-dir)))
                 (if
                     (file-equal-p dir doom-emacs-dir)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                            (doom-print--class 'path dir)))
                        :format nil)
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'fill
                                              (string-join
                                               (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                               "\n")))
                          :format nil))))
                 (if
                     (and
                      (not
                       (file-equal-p xdg-dir doom-dir))
                      (file-directory-p xdg-dir)
                      (file-directory-p doom-dir))
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Detected two private configs, in %s and %s")
                         (abbreviate-file-name xdg-dir)
                         doom-dir)
                        :format nil)
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'fill
                                              (string-join
                                               (list "The second directory will be ignored, as it has lower precedence.")
                                               "\n")))
                          :format nil)))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for stale elc files..."))
                :format nil)
               (elc-check-dir doom-emacs-dir)
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for problematic git global settings..."))
                :format nil)
               (if
                   (executable-find "git")
                   (if
                       (= 0
                          (car
                           (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                       (progn
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                              :format nil))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                  doom-doctor--warnings)))
                         (let
                             ((doom-print-indent
                               (+
                                (if t doom-print-indent-increment 0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'fill
                                                (string-join
                                                 (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                                 "\n")))
                            :format nil))))
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                      :format nil))
                   (setq doom-doctor--errors
                         (cons
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                          doom-doctor--errors))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking Doom Emacs..."))
                :format nil)
               (condition-case ex
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (let
                         ((noninteractive nil)
                          kill-emacs-query-functions kill-emacs-hook)
                       (defvar doom-reloading-p nil)
                       (if
                           (file-exists-p doom-autoloads-file)
                           nil
                         (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                       (require 'doom-start)
                       (doom-initialize-packages))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'success "Initialized Doom Emacs %s")
                       doom-version)
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (if
                           (hash-table-p doom-modules)
                           (doom-print--class 'success "Detected %d modules"
                                              (hash-table-count doom-modules))
                         (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'success "Detected %d packages")
                       (length doom-packages))
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'start "Checking Doom core for irregularities..."))
                      :format nil)
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (let
                           ((--dolist-tail--
                             (list "savehist" "projectile.cache")))
                         (while --dolist-tail--
                           (let
                               ((file
                                 (car --dolist-tail--)))
                             (let*
                                 ((size
                                   (and t
                                        (condition-case nil
                                            (progn
                                              (doom-file-size file doom-cache-dir))
                                          (error nil)))))
                               (if size
                                   (if
                                       (> size 1048576)
                                       (progn
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                  (/ size 1024 1024.0)))
                                              :format nil))
                                           (setq doom-doctor--warnings
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                      (/ size 1024 1024.0)))
                                                  doom-doctor--warnings)))
                                         (let
                                             ((doom-print-indent
                                               (+
                                                (if t doom-print-indent-increment 0)
                                                doom-print-indent)))
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'fill
                                                                (string-join
                                                                 (list "Consider deleting it from your system (manually)")
                                                                 "\n")))
                                            :format nil))))
                                 nil))
                             (setq --dolist-tail--
                                   (cdr --dolist-tail--)))))
                       (if
                           (condition-case nil
                               (progn
                                 (executable-find doom-projectile-fd-binary))
                             (error nil))
                           nil
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                              :format nil))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                  doom-doctor--warnings))))
                       (require 'projectile)
                       (if
                           (projectile-project-root "~")
                           (progn
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                  :format nil))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                      doom-doctor--warnings)))
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'fill
                                                    (string-join
                                                     (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                     "\n")))
                                :format nil))))
                       (if
                           (and
                            (file-equal-p doom-user-dir "~/.config/doom")
                            (file-directory-p "~/.doom.d"))
                           (progn
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                               (doom-print--class 'path doom-user-dir))
                              :format nil)
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'fill
                                                    (string-join
                                                     (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                     "\n")))
                                :format nil))))
                       (if
                           (not
                            (executable-find "fc-list"))
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                :format nil))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                    doom-doctor--warnings)))
                         (if
                             (and
                              (cond
                               ((eq system-type 'gnu/linux)
                                (let nil
                                  (concat
                                   (or
                                    (getenv "XDG_DATA_HOME")
                                    "~/.local/share")
                                   "/fonts/")))
                               ((eq system-type 'darwin)
                                (let nil "~/Library/Fonts/")))
                              (require 'all-the-icons nil t))
                             (progn
                               (let
                                   ((temp-buffer
                                     (generate-new-buffer " *temp*" t)))
                                 (save-current-buffer
                                   (set-buffer temp-buffer)
                                   (unwind-protect
                                       (progn
                                         (let
                                             ((errors 0))
                                           (let*
                                               ((output
                                                 (doom-call-process "fc-list" "" "file"))
                                                (status
                                                 (if output
                                                     (car-safe
                                                      (prog1 output
                                                        (setq output
                                                              (cdr output))))
                                                   (signal 'wrong-number-of-arguments
                                                           (list
                                                            '(status . output)
                                                            (length output))))))
                                             (if
                                                 (not
                                                  (= 0 status))
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                                  :format nil)
                                               (insert
                                                (cdr
                                                 (doom-call-process "fc-list" "" "file")))
                                               (let
                                                   ((--dolist-tail-- all-the-icons-font-names))
                                                 (while --dolist-tail--
                                                   (let
                                                       ((font
                                                         (car --dolist-tail--)))
                                                     (if
                                                         (save-excursion
                                                           (re-search-backward font nil t))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--style 'green "Found font %s" font))
                                                          :format nil)
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'warn "Warning: couldn't find %S font")
                                                         font)
                                                        :format nil))
                                                     (setq --dolist-tail--
                                                           (cdr --dolist-tail--)))))
                                               (if
                                                   (> errors 0)
                                                   (progn
                                                     (let
                                                         ((doom-print-indent
                                                           (+
                                                            (if t doom-print-indent-increment 0)
                                                            doom-print-indent)))
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'fill
                                                                            (string-join
                                                                             (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                             "\n")))
                                                        :format nil))))))))
                                     (and
                                      (buffer-name temp-buffer)
                                      (kill-buffer temp-buffer)))))))))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                      :format nil)
                     (if
                         (file-directory-p doom-user-dir)
                         (progn
                           (let
                               ((doom-print-indent
                                 (+
                                  (if t doom-print-indent-increment 0)
                                  doom-print-indent)))
                             (elc-check-dir doom-user-dir))))
                     (if doom-modules
                         (progn
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'start "Checking your enabled modules..."))
                            :format nil)
                           (advice-add #'require :around #'doom-shut-up-a)
                           (maphash
                            #'(lambda
                                (key plist)
                                (let
                                    (doom-local-errors doom-local-warnings)
                                  (let
                                      (doom-doctor--errors doom-doctor--warnings)
                                    (condition-case ex
                                        (let
                                            ((doctor-file
                                              (doom-module-path
                                               (car key)
                                               (cdr key)
                                               "doctor.el"))
                                             (packages-file
                                              (doom-module-path
                                               (car key)
                                               (cdr key)
                                               "packages.el")))
                                          (let*
                                              ((doom-output-indent 6)
                                               (--cl-var--
                                                (let
                                                    (doom-packages doom-disabled-packages)
                                                  (load packages-file 'noerror 'nomessage)
                                                  (mapcar #'car doom-packages)))
                                               (name nil))
                                            (while
                                                (consp --cl-var--)
                                              (setq name
                                                    (car --cl-var--))
                                              (if
                                                  (or
                                                   (doom-package-get name :disable)
                                                   (eval
                                                    (doom-package-get name :ignore))
                                                   (plist-member
                                                    (doom-package-get name :recipe)
                                                    :local-repo)
                                                   (locate-library
                                                    (symbol-name name))
                                                   (doom-package-built-in-p name)
                                                   (doom-package-installed-p name))
                                                  (progn)
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'error "Missing emacs package: %S")
                                                  name)
                                                 :format nil))
                                              (setq --cl-var--
                                                    (cdr --cl-var--)))
                                            nil)
                                          (let
                                              ((inhibit-message t))
                                            (load doctor-file 'noerror 'nomessage)))
                                      ((debug file-missing)
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "%s"
                                                                (error-message-string ex)))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "%s"
                                                                    (error-message-string ex)))
                                                doom-doctor--errors))))
                                      ((debug error)
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Syntax error: %s" ex))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "Syntax error: %s" ex))
                                                doom-doctor--errors)))))
                                    (if
                                        (or doom-doctor--errors doom-doctor--warnings)
                                        (progn
                                          (let
                                              ((doom-print-indent
                                                (+
                                                 (if t doom-print-indent-increment 0)
                                                 doom-print-indent)))
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'start
                                                                 (doom-print--style 'bold "%s %s"))
                                              (car key)
                                              (cdr key))
                                             :format nil)
                                            (doom-print
                                             (doom-print--format "%s"
                                                                 (string-join
                                                                  (append doom-doctor--errors doom-doctor--warnings)
                                                                  "\n"))
                                             :format nil))
                                          (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                                  (setq doom-doctor--errors
                                        (append doom-doctor--errors doom-local-errors))
                                  (setq doom-doctor--warnings
                                        (append doom-doctor--warnings doom-local-warnings))))
                            doom-modules))))
                 ((debug error)
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                           (or
                                            (cdr-safe ex)
                                            (car ex))))
                       :format nil))
                    (setq doom-doctor--warnings
                          (cons
                           (doom-print--format
                            (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                               (or
                                                (cdr-safe ex)
                                                (car ex))))
                           doom-doctor--warnings)))
                  (setq doom-modules nil)))
               (terpri)
               (let
                   ((--dolist-tail--
                     (list
                      (list doom-doctor--warnings "warning" 'yellow)
                      (list doom-doctor--errors "error" 'red))))
                 (while --dolist-tail--
                   (let
                       ((msg
                         (car --dolist-tail--)))
                     (if
                         (car msg)
                         (progn
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'color
                                                (nth 2 msg)
                                                (if
                                                    (cdr msg)
                                                    "There are %d %ss!" "There is %d %s!")
                                                (length
                                                 (car msg))
                                                (nth 1 msg)))
                            :format nil)))
                     (setq --dolist-tail--
                           (cdr --dolist-tail--)))))
               (if
                   (or doom-doctor--errors doom-doctor--warnings)
                   nil
                 (doom-print
                  (doom-print--format
                   (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
                  :format nil))
               (exit! :pager\? "+G")))))
  (alist)))

;;;; 19
((funcall
  (closure
   (t)
   (cli alist)
   (let nil
     (doom-print
      (doom-print--format "The doctor will see you now...\n")
      :format nil)
     (doom-print
      (doom-print--format
       (doom-print--class 'start "Checking your Emacs version..."))
      :format nil)
     (let
         ((doom-print-indent
           (+
            (if t doom-print-indent-increment 0)
            doom-print-indent)))
       (cond
        ((string= ".50"
                  (substring emacs-version -3))
         (progn
           (if inhibit-message nil
             (doom-print
              (doom-print--format
               (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
              :format nil))
           (setq doom-doctor--errors
                 (cons
                  (doom-print--format
                   (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                  doom-doctor--errors)))
         (let
             ((doom-print-indent
               (+
                (if t doom-print-indent-increment 0)
                doom-print-indent)))
           (doom-print
            (doom-print--format
             (doom-print--class 'fill
                                (string-join
                                 (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                 "\n")))
            :format nil)))
        ((> emacs-major-version 28)
         (progn
           (if inhibit-message nil
             (doom-print
              (doom-print--format
               (doom-print--class 'warn "Emacs %s detected" emacs-version))
              :format nil))
           (setq doom-doctor--warnings
                 (cons
                  (doom-print--format
                   (doom-print--class 'warn "Emacs %s detected" emacs-version))
                  doom-doctor--warnings)))
         (let
             ((doom-print-indent
               (+
                (if t doom-print-indent-increment 0)
                doom-print-indent)))
           (doom-print
            (doom-print--format
             (doom-print--class 'fill
                                (string-join
                                 (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                 "\n")))
            :format nil)))
        ((< emacs-major-version 27)
         (progn
           (if inhibit-message nil
             (doom-print
              (doom-print--format
               (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
              :format nil))
           (setq doom-doctor--errors
                 (cons
                  (doom-print--format
                   (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                  doom-doctor--errors))))))
     (doom-print
      (doom-print--format
       (doom-print--class 'start "Checking for Doom's prerequisites..."))
      :format nil)
     (let
         ((doom-print-indent
           (+
            (if t doom-print-indent-increment 0)
            doom-print-indent)))
       (if
           (not
            (executable-find "git"))
           (progn
             (if inhibit-message nil
               (doom-print
                (doom-print--format
                 (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                :format nil))
             (setq doom-doctor--errors
                   (cons
                    (doom-print--format
                     (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                    doom-doctor--errors)))
         (let
             ((save-match-data-internal
               (match-data)))
           (unwind-protect
               (progn
                 (let*
                     ((version
                       (cdr
                        (doom-call-process "git" "version")))
                      (version
                       (and
                        (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                        (match-string 1 version))))
                   (if version
                       (if
                           (version< version "2.23")
                           (progn
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                  :format nil))
                               (setq doom-doctor--errors
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                      doom-doctor--errors)))))
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                          :format nil))
                       (setq doom-doctor--warnings
                             (cons
                              (doom-print--format
                               (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                              doom-doctor--warnings))))))
             (set-match-data save-match-data-internal 'evaporate))))
       (if
           (executable-find "rg")
           nil
         (progn
           (if inhibit-message nil
             (doom-print
              (doom-print--format
               (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
              :format nil))
           (setq doom-doctor--errors
                 (cons
                  (doom-print--format
                   (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                  doom-doctor--errors)))))
     (doom-print
      (doom-print--format
       (doom-print--class 'start "Checking for Emacs config conflicts..."))
      :format nil)
     (if
         (file-exists-p "~/.emacs")
         (progn
           (progn
             (if inhibit-message nil
               (doom-print
                (doom-print--format
                 (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                :format nil))
             (setq doom-doctor--warnings
                   (cons
                    (doom-print--format
                     (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                    doom-doctor--warnings)))
           (let
               ((doom-print-indent
                 (+
                  (if t doom-print-indent-increment 0)
                  doom-print-indent)))
             (doom-print
              (doom-print--format
               (doom-print--class 'fill
                                  (string-join
                                   (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                   "\n")))
              :format nil))))
     (doom-print
      (doom-print--format
       (doom-print--class 'start "Checking for great Emacs features..."))
      :format nil)
     (if
         (functionp 'json-serialize)
         nil
       (progn
         (if inhibit-message nil
           (doom-print
            (doom-print--format
             (doom-print--class 'warn "Emacs was not built with native JSON support"))
            :format nil))
         (setq doom-doctor--warnings
               (cons
                (doom-print--format
                 (doom-print--class 'warn "Emacs was not built with native JSON support"))
                doom-doctor--warnings)))
       (let
           ((doom-print-indent
             (+
              (if t doom-print-indent-increment 0)
              doom-print-indent)))
         (doom-print
          (doom-print--format
           (doom-print--class 'fill
                              (string-join
                               (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                               "\n")))
          :format nil)))
     (if
         (featurep 'native-compile)
         nil
       (progn
         (if inhibit-message nil
           (doom-print
            (doom-print--format
             (doom-print--class 'warn "Emacs was not built with native compilation support"))
            :format nil))
         (setq doom-doctor--warnings
               (cons
                (doom-print--format
                 (doom-print--class 'warn "Emacs was not built with native compilation support"))
                doom-doctor--warnings)))
       (let
           ((doom-print-indent
             (+
              (if t doom-print-indent-increment 0)
              doom-print-indent)))
         (doom-print
          (doom-print--format
           (doom-print--class 'fill
                              (string-join
                               (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                               "\n")))
          :format nil)))
     (doom-print
      (doom-print--format
       (doom-print--class 'start "Checking for private config conflicts..."))
      :format nil)
     (let*
         ((xdg-dir
           (concat
            (or
             (getenv "XDG_CONFIG_HOME")
             "~/.config")
            "/doom/"))
          (doom-dir
           (or
            (getenv "DOOMDIR")
            "~/.doom.d/"))
          (dir
           (if
               (file-directory-p xdg-dir)
               xdg-dir doom-dir)))
       (if
           (file-equal-p dir doom-emacs-dir)
           (progn
             (doom-print
              (doom-print--format
               (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                  (doom-print--class 'path dir)))
              :format nil)
             (let
                 ((doom-print-indent
                   (+
                    (if t doom-print-indent-increment 0)
                    doom-print-indent)))
               (doom-print
                (doom-print--format
                 (doom-print--class 'fill
                                    (string-join
                                     (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                     "\n")))
                :format nil))))
       (if
           (and
            (not
             (file-equal-p xdg-dir doom-dir))
            (file-directory-p xdg-dir)
            (file-directory-p doom-dir))
           (progn
             (doom-print
              (doom-print--format
               (doom-print--class 'warn "Detected two private configs, in %s and %s")
               (abbreviate-file-name xdg-dir)
               doom-dir)
              :format nil)
             (let
                 ((doom-print-indent
                   (+
                    (if t doom-print-indent-increment 0)
                    doom-print-indent)))
               (doom-print
                (doom-print--format
                 (doom-print--class 'fill
                                    (string-join
                                     (list "The second directory will be ignored, as it has lower precedence.")
                                     "\n")))
                :format nil)))))
     (doom-print
      (doom-print--format
       (doom-print--class 'start "Checking for stale elc files..."))
      :format nil)
     (elc-check-dir doom-emacs-dir)
     (doom-print
      (doom-print--format
       (doom-print--class 'start "Checking for problematic git global settings..."))
      :format nil)
     (if
         (executable-find "git")
         (if
             (= 0
                (car
                 (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
             (progn
               (progn
                 (if inhibit-message nil
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                    :format nil))
                 (setq doom-doctor--warnings
                       (cons
                        (doom-print--format
                         (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                        doom-doctor--warnings)))
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'fill
                                      (string-join
                                       (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                       "\n")))
                  :format nil))))
       (progn
         (if inhibit-message nil
           (doom-print
            (doom-print--format
             (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
            :format nil))
         (setq doom-doctor--errors
               (cons
                (doom-print--format
                 (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                doom-doctor--errors))))
     (doom-print
      (doom-print--format
       (doom-print--class 'start "Checking Doom Emacs..."))
      :format nil)
     (condition-case ex
         (let
             ((doom-print-indent
               (+
                (if t doom-print-indent-increment 0)
                doom-print-indent)))
           (let
               ((noninteractive nil)
                kill-emacs-query-functions kill-emacs-hook)
             (defvar doom-reloading-p nil)
             (if
                 (file-exists-p doom-autoloads-file)
                 nil
               (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
             (require 'doom-start)
             (doom-initialize-packages))
           (doom-print
            (doom-print--format
             (doom-print--class 'success "Initialized Doom Emacs %s")
             doom-version)
            :format nil)
           (doom-print
            (doom-print--format
             (if
                 (hash-table-p doom-modules)
                 (doom-print--class 'success "Detected %d modules"
                                    (hash-table-count doom-modules))
               (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
            :format nil)
           (doom-print
            (doom-print--format
             (doom-print--class 'success "Detected %d packages")
             (length doom-packages))
            :format nil)
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking Doom core for irregularities..."))
            :format nil)
           (let
               ((doom-print-indent
                 (+
                  (if t doom-print-indent-increment 0)
                  doom-print-indent)))
             (let
                 ((--dolist-tail--
                   (list "savehist" "projectile.cache")))
               (while --dolist-tail--
                 (let
                     ((file
                       (car --dolist-tail--)))
                   (let*
                       ((size
                         (and t
                              (condition-case nil
                                  (progn
                                    (doom-file-size file doom-cache-dir))
                                (error nil)))))
                     (if size
                         (if
                             (> size 1048576)
                             (progn
                               (progn
                                 (if inhibit-message nil
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                        (/ size 1024 1024.0)))
                                    :format nil))
                                 (setq doom-doctor--warnings
                                       (cons
                                        (doom-print--format
                                         (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                            (/ size 1024 1024.0)))
                                        doom-doctor--warnings)))
                               (let
                                   ((doom-print-indent
                                     (+
                                      (if t doom-print-indent-increment 0)
                                      doom-print-indent)))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'fill
                                                      (string-join
                                                       (list "Consider deleting it from your system (manually)")
                                                       "\n")))
                                  :format nil))))
                       nil))
                   (setq --dolist-tail--
                         (cdr --dolist-tail--)))))
             (if
                 (condition-case nil
                     (progn
                       (executable-find doom-projectile-fd-binary))
                   (error nil))
                 nil
               (progn
                 (if inhibit-message nil
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                    :format nil))
                 (setq doom-doctor--warnings
                       (cons
                        (doom-print--format
                         (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                        doom-doctor--warnings))))
             (require 'projectile)
             (if
                 (projectile-project-root "~")
                 (progn
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                        :format nil))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                            doom-doctor--warnings)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                           "\n")))
                      :format nil))))
             (if
                 (and
                  (file-equal-p doom-user-dir "~/.config/doom")
                  (file-directory-p "~/.doom.d"))
                 (progn
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                     (doom-print--class 'path doom-user-dir))
                    :format nil)
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                           "\n")))
                      :format nil))))
             (if
                 (not
                  (executable-find "fc-list"))
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                          doom-doctor--warnings)))
               (if
                   (and
                    (cond
                     ((eq system-type 'gnu/linux)
                      (let nil
                        (concat
                         (or
                          (getenv "XDG_DATA_HOME")
                          "~/.local/share")
                         "/fonts/")))
                     ((eq system-type 'darwin)
                      (let nil "~/Library/Fonts/")))
                    (require 'all-the-icons nil t))
                   (progn
                     (let
                         ((temp-buffer
                           (generate-new-buffer " *temp*" t)))
                       (save-current-buffer
                         (set-buffer temp-buffer)
                         (unwind-protect
                             (progn
                               (let
                                   ((errors 0))
                                 (let*
                                     ((output
                                       (doom-call-process "fc-list" "" "file"))
                                      (status
                                       (if output
                                           (car-safe
                                            (prog1 output
                                              (setq output
                                                    (cdr output))))
                                         (signal 'wrong-number-of-arguments
                                                 (list
                                                  '(status . output)
                                                  (length output))))))
                                   (if
                                       (not
                                        (= 0 status))
                                       (doom-print
                                        (doom-print--format
                                         (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                        :format nil)
                                     (insert
                                      (cdr
                                       (doom-call-process "fc-list" "" "file")))
                                     (let
                                         ((--dolist-tail-- all-the-icons-font-names))
                                       (while --dolist-tail--
                                         (let
                                             ((font
                                               (car --dolist-tail--)))
                                           (if
                                               (save-excursion
                                                 (re-search-backward font nil t))
                                               (doom-print
                                                (doom-print--format
                                                 (doom-print--style 'green "Found font %s" font))
                                                :format nil)
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'warn "Warning: couldn't find %S font")
                                               font)
                                              :format nil))
                                           (setq --dolist-tail--
                                                 (cdr --dolist-tail--)))))
                                     (if
                                         (> errors 0)
                                         (progn
                                           (let
                                               ((doom-print-indent
                                                 (+
                                                  (if t doom-print-indent-increment 0)
                                                  doom-print-indent)))
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'fill
                                                                  (string-join
                                                                   (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                   "\n")))
                                              :format nil))))))))
                           (and
                            (buffer-name temp-buffer)
                            (kill-buffer temp-buffer)))))))))
           (doom-print
            (doom-print--format
             (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
            :format nil)
           (if
               (file-directory-p doom-user-dir)
               (progn
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (elc-check-dir doom-user-dir))))
           (if doom-modules
               (progn
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'start "Checking your enabled modules..."))
                  :format nil)
                 (advice-add #'require :around #'doom-shut-up-a)
                 (maphash
                  #'(lambda
                      (key plist)
                      (let
                          (doom-local-errors doom-local-warnings)
                        (let
                            (doom-doctor--errors doom-doctor--warnings)
                          (condition-case ex
                              (let
                                  ((doctor-file
                                    (doom-module-path
                                     (car key)
                                     (cdr key)
                                     "doctor.el"))
                                   (packages-file
                                    (doom-module-path
                                     (car key)
                                     (cdr key)
                                     "packages.el")))
                                (let*
                                    ((doom-output-indent 6)
                                     (--cl-var--
                                      (let
                                          (doom-packages doom-disabled-packages)
                                        (load packages-file 'noerror 'nomessage)
                                        (mapcar #'car doom-packages)))
                                     (name nil))
                                  (while
                                      (consp --cl-var--)
                                    (setq name
                                          (car --cl-var--))
                                    (if
                                        (or
                                         (doom-package-get name :disable)
                                         (eval
                                          (doom-package-get name :ignore))
                                         (plist-member
                                          (doom-package-get name :recipe)
                                          :local-repo)
                                         (locate-library
                                          (symbol-name name))
                                         (doom-package-built-in-p name)
                                         (doom-package-installed-p name))
                                        (progn)
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "Missing emacs package: %S")
                                        name)
                                       :format nil))
                                    (setq --cl-var--
                                          (cdr --cl-var--)))
                                  nil)
                                (let
                                    ((inhibit-message t))
                                  (load doctor-file 'noerror 'nomessage)))
                            ((debug file-missing)
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'error "%s"
                                                      (error-message-string ex)))
                                  :format nil))
                               (setq doom-doctor--errors
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'error "%s"
                                                          (error-message-string ex)))
                                      doom-doctor--errors))))
                            ((debug error)
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'error "Syntax error: %s" ex))
                                  :format nil))
                               (setq doom-doctor--errors
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'error "Syntax error: %s" ex))
                                      doom-doctor--errors)))))
                          (if
                              (or doom-doctor--errors doom-doctor--warnings)
                              (progn
                                (let
                                    ((doom-print-indent
                                      (+
                                       (if t doom-print-indent-increment 0)
                                       doom-print-indent)))
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'start
                                                       (doom-print--style 'bold "%s %s"))
                                    (car key)
                                    (cdr key))
                                   :format nil)
                                  (doom-print
                                   (doom-print--format "%s"
                                                       (string-join
                                                        (append doom-doctor--errors doom-doctor--warnings)
                                                        "\n"))
                                   :format nil))
                                (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                        (setq doom-doctor--errors
                              (append doom-doctor--errors doom-local-errors))
                        (setq doom-doctor--warnings
                              (append doom-doctor--warnings doom-local-warnings))))
                  doom-modules))))
       ((debug error)
        (progn
          (if inhibit-message nil
            (doom-print
             (doom-print--format
              (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                 (or
                                  (cdr-safe ex)
                                  (car ex))))
             :format nil))
          (setq doom-doctor--warnings
                (cons
                 (doom-print--format
                  (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                     (or
                                      (cdr-safe ex)
                                      (car ex))))
                 doom-doctor--warnings)))
        (setq doom-modules nil)))
     (terpri)
     (let
         ((--dolist-tail--
           (list
            (list doom-doctor--warnings "warning" 'yellow)
            (list doom-doctor--errors "error" 'red))))
       (while --dolist-tail--
         (let
             ((msg
               (car --dolist-tail--)))
           (if
               (car msg)
               (progn
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'color
                                      (nth 2 msg)
                                      (if
                                          (cdr msg)
                                          "There are %d %ss!" "There is %d %s!")
                                      (length
                                       (car msg))
                                      (nth 1 msg)))
                  :format nil)))
           (setq --dolist-tail--
                 (cdr --dolist-tail--)))))
     (if
         (or doom-doctor--errors doom-doctor--warnings)
         nil
       (doom-print
        (doom-print--format
         (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
        :format nil))
     (exit! :pager\? "+G")))
  #s(doom-cli
     ("doom" "doctor")
     nil
     (("SUMMARY" . "Diagnoses common issues on your system.")
      ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
     nil nil nil nil
     (:benchmark nil :prefix
                 (doom)
                 :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
     (closure
      (t)
      (cli alist)
      (let nil
        (doom-print
         (doom-print--format "The doctor will see you now...\n")
         :format nil)
        (doom-print
         (doom-print--format
          (doom-print--class 'start "Checking your Emacs version..."))
         :format nil)
        (let
            ((doom-print-indent
              (+
               (if t doom-print-indent-increment 0)
               doom-print-indent)))
          (cond
           ((string= ".50"
                     (substring emacs-version -3))
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                 :format nil))
              (setq doom-doctor--errors
                    (cons
                     (doom-print--format
                      (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                     doom-doctor--errors)))
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (doom-print
               (doom-print--format
                (doom-print--class 'fill
                                   (string-join
                                    (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                    "\n")))
               :format nil)))
           ((> emacs-major-version 28)
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Emacs %s detected" emacs-version))
                 :format nil))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Emacs %s detected" emacs-version))
                     doom-doctor--warnings)))
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (doom-print
               (doom-print--format
                (doom-print--class 'fill
                                   (string-join
                                    (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                    "\n")))
               :format nil)))
           ((< emacs-major-version 27)
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                 :format nil))
              (setq doom-doctor--errors
                    (cons
                     (doom-print--format
                      (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                     doom-doctor--errors))))))
        (doom-print
         (doom-print--format
          (doom-print--class 'start "Checking for Doom's prerequisites..."))
         :format nil)
        (let
            ((doom-print-indent
              (+
               (if t doom-print-indent-increment 0)
               doom-print-indent)))
          (if
              (not
               (executable-find "git"))
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                       doom-doctor--errors)))
            (let
                ((save-match-data-internal
                  (match-data)))
              (unwind-protect
                  (progn
                    (let*
                        ((version
                          (cdr
                           (doom-call-process "git" "version")))
                         (version
                          (and
                           (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                           (match-string 1 version))))
                      (if version
                          (if
                              (version< version "2.23")
                              (progn
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                     :format nil))
                                  (setq doom-doctor--errors
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                         doom-doctor--errors)))))
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                             :format nil))
                          (setq doom-doctor--warnings
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                 doom-doctor--warnings))))))
                (set-match-data save-match-data-internal 'evaporate))))
          (if
              (executable-find "rg")
              nil
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                 :format nil))
              (setq doom-doctor--errors
                    (cons
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                     doom-doctor--errors)))))
        (doom-print
         (doom-print--format
          (doom-print--class 'start "Checking for Emacs config conflicts..."))
         :format nil)
        (if
            (file-exists-p "~/.emacs")
            (progn
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                   :format nil))
                (setq doom-doctor--warnings
                      (cons
                       (doom-print--format
                        (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                       doom-doctor--warnings)))
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'fill
                                     (string-join
                                      (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                      "\n")))
                 :format nil))))
        (doom-print
         (doom-print--format
          (doom-print--class 'start "Checking for great Emacs features..."))
         :format nil)
        (if
            (functionp 'json-serialize)
            nil
          (progn
            (if inhibit-message nil
              (doom-print
               (doom-print--format
                (doom-print--class 'warn "Emacs was not built with native JSON support"))
               :format nil))
            (setq doom-doctor--warnings
                  (cons
                   (doom-print--format
                    (doom-print--class 'warn "Emacs was not built with native JSON support"))
                   doom-doctor--warnings)))
          (let
              ((doom-print-indent
                (+
                 (if t doom-print-indent-increment 0)
                 doom-print-indent)))
            (doom-print
             (doom-print--format
              (doom-print--class 'fill
                                 (string-join
                                  (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                  "\n")))
             :format nil)))
        (if
            (featurep 'native-compile)
            nil
          (progn
            (if inhibit-message nil
              (doom-print
               (doom-print--format
                (doom-print--class 'warn "Emacs was not built with native compilation support"))
               :format nil))
            (setq doom-doctor--warnings
                  (cons
                   (doom-print--format
                    (doom-print--class 'warn "Emacs was not built with native compilation support"))
                   doom-doctor--warnings)))
          (let
              ((doom-print-indent
                (+
                 (if t doom-print-indent-increment 0)
                 doom-print-indent)))
            (doom-print
             (doom-print--format
              (doom-print--class 'fill
                                 (string-join
                                  (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                  "\n")))
             :format nil)))
        (doom-print
         (doom-print--format
          (doom-print--class 'start "Checking for private config conflicts..."))
         :format nil)
        (let*
            ((xdg-dir
              (concat
               (or
                (getenv "XDG_CONFIG_HOME")
                "~/.config")
               "/doom/"))
             (doom-dir
              (or
               (getenv "DOOMDIR")
               "~/.doom.d/"))
             (dir
              (if
                  (file-directory-p xdg-dir)
                  xdg-dir doom-dir)))
          (if
              (file-equal-p dir doom-emacs-dir)
              (progn
                (doom-print
                 (doom-print--format
                  (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                     (doom-print--class 'path dir)))
                 :format nil)
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'fill
                                       (string-join
                                        (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                        "\n")))
                   :format nil))))
          (if
              (and
               (not
                (file-equal-p xdg-dir doom-dir))
               (file-directory-p xdg-dir)
               (file-directory-p doom-dir))
              (progn
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Detected two private configs, in %s and %s")
                  (abbreviate-file-name xdg-dir)
                  doom-dir)
                 :format nil)
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'fill
                                       (string-join
                                        (list "The second directory will be ignored, as it has lower precedence.")
                                        "\n")))
                   :format nil)))))
        (doom-print
         (doom-print--format
          (doom-print--class 'start "Checking for stale elc files..."))
         :format nil)
        (elc-check-dir doom-emacs-dir)
        (doom-print
         (doom-print--format
          (doom-print--class 'start "Checking for problematic git global settings..."))
         :format nil)
        (if
            (executable-find "git")
            (if
                (= 0
                   (car
                    (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                (progn
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                       :format nil))
                    (setq doom-doctor--warnings
                          (cons
                           (doom-print--format
                            (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                           doom-doctor--warnings)))
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'fill
                                         (string-join
                                          (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                          "\n")))
                     :format nil))))
          (progn
            (if inhibit-message nil
              (doom-print
               (doom-print--format
                (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
               :format nil))
            (setq doom-doctor--errors
                  (cons
                   (doom-print--format
                    (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                   doom-doctor--errors))))
        (doom-print
         (doom-print--format
          (doom-print--class 'start "Checking Doom Emacs..."))
         :format nil)
        (condition-case ex
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (let
                  ((noninteractive nil)
                   kill-emacs-query-functions kill-emacs-hook)
                (defvar doom-reloading-p nil)
                (if
                    (file-exists-p doom-autoloads-file)
                    nil
                  (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                (require 'doom-start)
                (doom-initialize-packages))
              (doom-print
               (doom-print--format
                (doom-print--class 'success "Initialized Doom Emacs %s")
                doom-version)
               :format nil)
              (doom-print
               (doom-print--format
                (if
                    (hash-table-p doom-modules)
                    (doom-print--class 'success "Detected %d modules"
                                       (hash-table-count doom-modules))
                  (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
               :format nil)
              (doom-print
               (doom-print--format
                (doom-print--class 'success "Detected %d packages")
                (length doom-packages))
               :format nil)
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking Doom core for irregularities..."))
               :format nil)
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (let
                    ((--dolist-tail--
                      (list "savehist" "projectile.cache")))
                  (while --dolist-tail--
                    (let
                        ((file
                          (car --dolist-tail--)))
                      (let*
                          ((size
                            (and t
                                 (condition-case nil
                                     (progn
                                       (doom-file-size file doom-cache-dir))
                                   (error nil)))))
                        (if size
                            (if
                                (> size 1048576)
                                (progn
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                           (/ size 1024 1024.0)))
                                       :format nil))
                                    (setq doom-doctor--warnings
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                               (/ size 1024 1024.0)))
                                           doom-doctor--warnings)))
                                  (let
                                      ((doom-print-indent
                                        (+
                                         (if t doom-print-indent-increment 0)
                                         doom-print-indent)))
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'fill
                                                         (string-join
                                                          (list "Consider deleting it from your system (manually)")
                                                          "\n")))
                                     :format nil))))
                          nil))
                      (setq --dolist-tail--
                            (cdr --dolist-tail--)))))
                (if
                    (condition-case nil
                        (progn
                          (executable-find doom-projectile-fd-binary))
                      (error nil))
                    nil
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                       :format nil))
                    (setq doom-doctor--warnings
                          (cons
                           (doom-print--format
                            (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                           doom-doctor--warnings))))
                (require 'projectile)
                (if
                    (projectile-project-root "~")
                    (progn
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                           :format nil))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                               doom-doctor--warnings)))
                      (let
                          ((doom-print-indent
                            (+
                             (if t doom-print-indent-increment 0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'fill
                                             (string-join
                                              (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                              "\n")))
                         :format nil))))
                (if
                    (and
                     (file-equal-p doom-user-dir "~/.config/doom")
                     (file-directory-p "~/.doom.d"))
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                        (doom-print--class 'path doom-user-dir))
                       :format nil)
                      (let
                          ((doom-print-indent
                            (+
                             (if t doom-print-indent-increment 0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'fill
                                             (string-join
                                              (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                              "\n")))
                         :format nil))))
                (if
                    (not
                     (executable-find "fc-list"))
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                         :format nil))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                             doom-doctor--warnings)))
                  (if
                      (and
                       (cond
                        ((eq system-type 'gnu/linux)
                         (let nil
                           (concat
                            (or
                             (getenv "XDG_DATA_HOME")
                             "~/.local/share")
                            "/fonts/")))
                        ((eq system-type 'darwin)
                         (let nil "~/Library/Fonts/")))
                       (require 'all-the-icons nil t))
                      (progn
                        (let
                            ((temp-buffer
                              (generate-new-buffer " *temp*" t)))
                          (save-current-buffer
                            (set-buffer temp-buffer)
                            (unwind-protect
                                (progn
                                  (let
                                      ((errors 0))
                                    (let*
                                        ((output
                                          (doom-call-process "fc-list" "" "file"))
                                         (status
                                          (if output
                                              (car-safe
                                               (prog1 output
                                                 (setq output
                                                       (cdr output))))
                                            (signal 'wrong-number-of-arguments
                                                    (list
                                                     '(status . output)
                                                     (length output))))))
                                      (if
                                          (not
                                           (= 0 status))
                                          (doom-print
                                           (doom-print--format
                                            (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                           :format nil)
                                        (insert
                                         (cdr
                                          (doom-call-process "fc-list" "" "file")))
                                        (let
                                            ((--dolist-tail-- all-the-icons-font-names))
                                          (while --dolist-tail--
                                            (let
                                                ((font
                                                  (car --dolist-tail--)))
                                              (if
                                                  (save-excursion
                                                    (re-search-backward font nil t))
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--style 'green "Found font %s" font))
                                                   :format nil)
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'warn "Warning: couldn't find %S font")
                                                  font)
                                                 :format nil))
                                              (setq --dolist-tail--
                                                    (cdr --dolist-tail--)))))
                                        (if
                                            (> errors 0)
                                            (progn
                                              (let
                                                  ((doom-print-indent
                                                    (+
                                                     (if t doom-print-indent-increment 0)
                                                     doom-print-indent)))
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'fill
                                                                     (string-join
                                                                      (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                      "\n")))
                                                 :format nil))))))))
                              (and
                               (buffer-name temp-buffer)
                               (kill-buffer temp-buffer)))))))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
               :format nil)
              (if
                  (file-directory-p doom-user-dir)
                  (progn
                    (let
                        ((doom-print-indent
                          (+
                           (if t doom-print-indent-increment 0)
                           doom-print-indent)))
                      (elc-check-dir doom-user-dir))))
              (if doom-modules
                  (progn
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'start "Checking your enabled modules..."))
                     :format nil)
                    (advice-add #'require :around #'doom-shut-up-a)
                    (maphash
                     #'(lambda
                         (key plist)
                         (let
                             (doom-local-errors doom-local-warnings)
                           (let
                               (doom-doctor--errors doom-doctor--warnings)
                             (condition-case ex
                                 (let
                                     ((doctor-file
                                       (doom-module-path
                                        (car key)
                                        (cdr key)
                                        "doctor.el"))
                                      (packages-file
                                       (doom-module-path
                                        (car key)
                                        (cdr key)
                                        "packages.el")))
                                   (let*
                                       ((doom-output-indent 6)
                                        (--cl-var--
                                         (let
                                             (doom-packages doom-disabled-packages)
                                           (load packages-file 'noerror 'nomessage)
                                           (mapcar #'car doom-packages)))
                                        (name nil))
                                     (while
                                         (consp --cl-var--)
                                       (setq name
                                             (car --cl-var--))
                                       (if
                                           (or
                                            (doom-package-get name :disable)
                                            (eval
                                             (doom-package-get name :ignore))
                                            (plist-member
                                             (doom-package-get name :recipe)
                                             :local-repo)
                                            (locate-library
                                             (symbol-name name))
                                            (doom-package-built-in-p name)
                                            (doom-package-installed-p name))
                                           (progn)
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--class 'error "Missing emacs package: %S")
                                           name)
                                          :format nil))
                                       (setq --cl-var--
                                             (cdr --cl-var--)))
                                     nil)
                                   (let
                                       ((inhibit-message t))
                                     (load doctor-file 'noerror 'nomessage)))
                               ((debug file-missing)
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'error "%s"
                                                         (error-message-string ex)))
                                     :format nil))
                                  (setq doom-doctor--errors
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'error "%s"
                                                             (error-message-string ex)))
                                         doom-doctor--errors))))
                               ((debug error)
                                (progn
                                  (if inhibit-message nil
                                    (doom-print
                                     (doom-print--format
                                      (doom-print--class 'error "Syntax error: %s" ex))
                                     :format nil))
                                  (setq doom-doctor--errors
                                        (cons
                                         (doom-print--format
                                          (doom-print--class 'error "Syntax error: %s" ex))
                                         doom-doctor--errors)))))
                             (if
                                 (or doom-doctor--errors doom-doctor--warnings)
                                 (progn
                                   (let
                                       ((doom-print-indent
                                         (+
                                          (if t doom-print-indent-increment 0)
                                          doom-print-indent)))
                                     (doom-print
                                      (doom-print--format
                                       (doom-print--class 'start
                                                          (doom-print--style 'bold "%s %s"))
                                       (car key)
                                       (cdr key))
                                      :format nil)
                                     (doom-print
                                      (doom-print--format "%s"
                                                          (string-join
                                                           (append doom-doctor--errors doom-doctor--warnings)
                                                           "\n"))
                                      :format nil))
                                   (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                           (setq doom-doctor--errors
                                 (append doom-doctor--errors doom-local-errors))
                           (setq doom-doctor--warnings
                                 (append doom-doctor--warnings doom-local-warnings))))
                     doom-modules))))
          ((debug error)
           (progn
             (if inhibit-message nil
               (doom-print
                (doom-print--format
                 (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                    (or
                                     (cdr-safe ex)
                                     (car ex))))
                :format nil))
             (setq doom-doctor--warnings
                   (cons
                    (doom-print--format
                     (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                        (or
                                         (cdr-safe ex)
                                         (car ex))))
                    doom-doctor--warnings)))
           (setq doom-modules nil)))
        (terpri)
        (let
            ((--dolist-tail--
              (list
               (list doom-doctor--warnings "warning" 'yellow)
               (list doom-doctor--errors "error" 'red))))
          (while --dolist-tail--
            (let
                ((msg
                  (car --dolist-tail--)))
              (if
                  (car msg)
                  (progn
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'color
                                         (nth 2 msg)
                                         (if
                                             (cdr msg)
                                             "There are %d %ss!" "There is %d %s!")
                                         (length
                                          (car msg))
                                         (nth 1 msg)))
                     :format nil)))
              (setq --dolist-tail--
                    (cdr --dolist-tail--)))))
        (if
            (or doom-doctor--errors doom-doctor--warnings)
            nil
          (doom-print
           (doom-print--format
            (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
           :format nil))
        (exit! :pager\? "+G"))))
  nil)
 nil)

;;;; 20
((doom-cli-execute #s(doom-cli
                      ("doom" "doctor")
                      nil
                      (("SUMMARY" . "Diagnoses common issues on your system.")
                       ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
                      nil nil nil nil
                      (:benchmark nil :prefix
                                  (doom)
                                  :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
                      (closure
                       (t)
                       (cli alist)
                       (let nil
                         (doom-print
                          (doom-print--format "The doctor will see you now...\n")
                          :format nil)
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'start "Checking your Emacs version..."))
                          :format nil)
                         (let
                             ((doom-print-indent
                               (+
                                (if t doom-print-indent-increment 0)
                                doom-print-indent)))
                           (cond
                            ((string= ".50"
                                      (substring emacs-version -3))
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                                  :format nil))
                               (setq doom-doctor--errors
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                                      doom-doctor--errors)))
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'fill
                                                    (string-join
                                                     (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                                     "\n")))
                                :format nil)))
                            ((> emacs-major-version 28)
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Emacs %s detected" emacs-version))
                                  :format nil))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Emacs %s detected" emacs-version))
                                      doom-doctor--warnings)))
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'fill
                                                    (string-join
                                                     (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                                     "\n")))
                                :format nil)))
                            ((< emacs-major-version 27)
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                                  :format nil))
                               (setq doom-doctor--errors
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                                      doom-doctor--errors))))))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'start "Checking for Doom's prerequisites..."))
                          :format nil)
                         (let
                             ((doom-print-indent
                               (+
                                (if t doom-print-indent-increment 0)
                                doom-print-indent)))
                           (if
                               (not
                                (executable-find "git"))
                               (progn
                                 (if inhibit-message nil
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                                    :format nil))
                                 (setq doom-doctor--errors
                                       (cons
                                        (doom-print--format
                                         (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                                        doom-doctor--errors)))
                             (let
                                 ((save-match-data-internal
                                   (match-data)))
                               (unwind-protect
                                   (progn
                                     (let*
                                         ((version
                                           (cdr
                                            (doom-call-process "git" "version")))
                                          (version
                                           (and
                                            (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                            (match-string 1 version))))
                                       (if version
                                           (if
                                               (version< version "2.23")
                                               (progn
                                                 (progn
                                                   (if inhibit-message nil
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                      :format nil))
                                                   (setq doom-doctor--errors
                                                         (cons
                                                          (doom-print--format
                                                           (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                          doom-doctor--errors)))))
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                              :format nil))
                                           (setq doom-doctor--warnings
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                                  doom-doctor--warnings))))))
                                 (set-match-data save-match-data-internal 'evaporate))))
                           (if
                               (executable-find "rg")
                               nil
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                                  :format nil))
                               (setq doom-doctor--errors
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                                      doom-doctor--errors)))))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'start "Checking for Emacs config conflicts..."))
                          :format nil)
                         (if
                             (file-exists-p "~/.emacs")
                             (progn
                               (progn
                                 (if inhibit-message nil
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                                    :format nil))
                                 (setq doom-doctor--warnings
                                       (cons
                                        (doom-print--format
                                         (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                                        doom-doctor--warnings)))
                               (let
                                   ((doom-print-indent
                                     (+
                                      (if t doom-print-indent-increment 0)
                                      doom-print-indent)))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'fill
                                                      (string-join
                                                       (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                                       "\n")))
                                  :format nil))))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'start "Checking for great Emacs features..."))
                          :format nil)
                         (if
                             (functionp 'json-serialize)
                             nil
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Emacs was not built with native JSON support"))
                                :format nil))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Emacs was not built with native JSON support"))
                                    doom-doctor--warnings)))
                           (let
                               ((doom-print-indent
                                 (+
                                  (if t doom-print-indent-increment 0)
                                  doom-print-indent)))
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'fill
                                                  (string-join
                                                   (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                                   "\n")))
                              :format nil)))
                         (if
                             (featurep 'native-compile)
                             nil
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Emacs was not built with native compilation support"))
                                :format nil))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Emacs was not built with native compilation support"))
                                    doom-doctor--warnings)))
                           (let
                               ((doom-print-indent
                                 (+
                                  (if t doom-print-indent-increment 0)
                                  doom-print-indent)))
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'fill
                                                  (string-join
                                                   (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                                   "\n")))
                              :format nil)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'start "Checking for private config conflicts..."))
                          :format nil)
                         (let*
                             ((xdg-dir
                               (concat
                                (or
                                 (getenv "XDG_CONFIG_HOME")
                                 "~/.config")
                                "/doom/"))
                              (doom-dir
                               (or
                                (getenv "DOOMDIR")
                                "~/.doom.d/"))
                              (dir
                               (if
                                   (file-directory-p xdg-dir)
                                   xdg-dir doom-dir)))
                           (if
                               (file-equal-p dir doom-emacs-dir)
                               (progn
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                                      (doom-print--class 'path dir)))
                                  :format nil)
                                 (let
                                     ((doom-print-indent
                                       (+
                                        (if t doom-print-indent-increment 0)
                                        doom-print-indent)))
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--class 'fill
                                                        (string-join
                                                         (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                                         "\n")))
                                    :format nil))))
                           (if
                               (and
                                (not
                                 (file-equal-p xdg-dir doom-dir))
                                (file-directory-p xdg-dir)
                                (file-directory-p doom-dir))
                               (progn
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Detected two private configs, in %s and %s")
                                   (abbreviate-file-name xdg-dir)
                                   doom-dir)
                                  :format nil)
                                 (let
                                     ((doom-print-indent
                                       (+
                                        (if t doom-print-indent-increment 0)
                                        doom-print-indent)))
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--class 'fill
                                                        (string-join
                                                         (list "The second directory will be ignored, as it has lower precedence.")
                                                         "\n")))
                                    :format nil)))))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'start "Checking for stale elc files..."))
                          :format nil)
                         (elc-check-dir doom-emacs-dir)
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'start "Checking for problematic git global settings..."))
                          :format nil)
                         (if
                             (executable-find "git")
                             (if
                                 (= 0
                                    (car
                                     (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                                 (progn
                                   (progn
                                     (if inhibit-message nil
                                       (doom-print
                                        (doom-print--format
                                         (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                        :format nil))
                                     (setq doom-doctor--warnings
                                           (cons
                                            (doom-print--format
                                             (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                            doom-doctor--warnings)))
                                   (let
                                       ((doom-print-indent
                                         (+
                                          (if t doom-print-indent-increment 0)
                                          doom-print-indent)))
                                     (doom-print
                                      (doom-print--format
                                       (doom-print--class 'fill
                                                          (string-join
                                                           (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                                           "\n")))
                                      :format nil))))
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                                :format nil))
                             (setq doom-doctor--errors
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                                    doom-doctor--errors))))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'start "Checking Doom Emacs..."))
                          :format nil)
                         (condition-case ex
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (let
                                   ((noninteractive nil)
                                    kill-emacs-query-functions kill-emacs-hook)
                                 (defvar doom-reloading-p nil)
                                 (if
                                     (file-exists-p doom-autoloads-file)
                                     nil
                                   (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                                 (require 'doom-start)
                                 (doom-initialize-packages))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'success "Initialized Doom Emacs %s")
                                 doom-version)
                                :format nil)
                               (doom-print
                                (doom-print--format
                                 (if
                                     (hash-table-p doom-modules)
                                     (doom-print--class 'success "Detected %d modules"
                                                        (hash-table-count doom-modules))
                                   (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                                :format nil)
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'success "Detected %d packages")
                                 (length doom-packages))
                                :format nil)
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'start "Checking Doom core for irregularities..."))
                                :format nil)
                               (let
                                   ((doom-print-indent
                                     (+
                                      (if t doom-print-indent-increment 0)
                                      doom-print-indent)))
                                 (let
                                     ((--dolist-tail--
                                       (list "savehist" "projectile.cache")))
                                   (while --dolist-tail--
                                     (let
                                         ((file
                                           (car --dolist-tail--)))
                                       (let*
                                           ((size
                                             (and t
                                                  (condition-case nil
                                                      (progn
                                                        (doom-file-size file doom-cache-dir))
                                                    (error nil)))))
                                         (if size
                                             (if
                                                 (> size 1048576)
                                                 (progn
                                                   (progn
                                                     (if inhibit-message nil
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                            (/ size 1024 1024.0)))
                                                        :format nil))
                                                     (setq doom-doctor--warnings
                                                           (cons
                                                            (doom-print--format
                                                             (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                                (/ size 1024 1024.0)))
                                                            doom-doctor--warnings)))
                                                   (let
                                                       ((doom-print-indent
                                                         (+
                                                          (if t doom-print-indent-increment 0)
                                                          doom-print-indent)))
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--class 'fill
                                                                          (string-join
                                                                           (list "Consider deleting it from your system (manually)")
                                                                           "\n")))
                                                      :format nil))))
                                           nil))
                                       (setq --dolist-tail--
                                             (cdr --dolist-tail--)))))
                                 (if
                                     (condition-case nil
                                         (progn
                                           (executable-find doom-projectile-fd-binary))
                                       (error nil))
                                     nil
                                   (progn
                                     (if inhibit-message nil
                                       (doom-print
                                        (doom-print--format
                                         (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                        :format nil))
                                     (setq doom-doctor--warnings
                                           (cons
                                            (doom-print--format
                                             (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                            doom-doctor--warnings))))
                                 (require 'projectile)
                                 (if
                                     (projectile-project-root "~")
                                     (progn
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                            :format nil))
                                         (setq doom-doctor--warnings
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                                doom-doctor--warnings)))
                                       (let
                                           ((doom-print-indent
                                             (+
                                              (if t doom-print-indent-increment 0)
                                              doom-print-indent)))
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--class 'fill
                                                              (string-join
                                                               (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                               "\n")))
                                          :format nil))))
                                 (if
                                     (and
                                      (file-equal-p doom-user-dir "~/.config/doom")
                                      (file-directory-p "~/.doom.d"))
                                     (progn
                                       (doom-print
                                        (doom-print--format
                                         (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                                         (doom-print--class 'path doom-user-dir))
                                        :format nil)
                                       (let
                                           ((doom-print-indent
                                             (+
                                              (if t doom-print-indent-increment 0)
                                              doom-print-indent)))
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--class 'fill
                                                              (string-join
                                                               (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                               "\n")))
                                          :format nil))))
                                 (if
                                     (not
                                      (executable-find "fc-list"))
                                     (progn
                                       (if inhibit-message nil
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                          :format nil))
                                       (setq doom-doctor--warnings
                                             (cons
                                              (doom-print--format
                                               (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                              doom-doctor--warnings)))
                                   (if
                                       (and
                                        (cond
                                         ((eq system-type 'gnu/linux)
                                          (let nil
                                            (concat
                                             (or
                                              (getenv "XDG_DATA_HOME")
                                              "~/.local/share")
                                             "/fonts/")))
                                         ((eq system-type 'darwin)
                                          (let nil "~/Library/Fonts/")))
                                        (require 'all-the-icons nil t))
                                       (progn
                                         (let
                                             ((temp-buffer
                                               (generate-new-buffer " *temp*" t)))
                                           (save-current-buffer
                                             (set-buffer temp-buffer)
                                             (unwind-protect
                                                 (progn
                                                   (let
                                                       ((errors 0))
                                                     (let*
                                                         ((output
                                                           (doom-call-process "fc-list" "" "file"))
                                                          (status
                                                           (if output
                                                               (car-safe
                                                                (prog1 output
                                                                  (setq output
                                                                        (cdr output))))
                                                             (signal 'wrong-number-of-arguments
                                                                     (list
                                                                      '(status . output)
                                                                      (length output))))))
                                                       (if
                                                           (not
                                                            (= 0 status))
                                                           (doom-print
                                                            (doom-print--format
                                                             (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                                            :format nil)
                                                         (insert
                                                          (cdr
                                                           (doom-call-process "fc-list" "" "file")))
                                                         (let
                                                             ((--dolist-tail-- all-the-icons-font-names))
                                                           (while --dolist-tail--
                                                             (let
                                                                 ((font
                                                                   (car --dolist-tail--)))
                                                               (if
                                                                   (save-excursion
                                                                     (re-search-backward font nil t))
                                                                   (doom-print
                                                                    (doom-print--format
                                                                     (doom-print--style 'green "Found font %s" font))
                                                                    :format nil)
                                                                 (doom-print
                                                                  (doom-print--format
                                                                   (doom-print--class 'warn "Warning: couldn't find %S font")
                                                                   font)
                                                                  :format nil))
                                                               (setq --dolist-tail--
                                                                     (cdr --dolist-tail--)))))
                                                         (if
                                                             (> errors 0)
                                                             (progn
                                                               (let
                                                                   ((doom-print-indent
                                                                     (+
                                                                      (if t doom-print-indent-increment 0)
                                                                      doom-print-indent)))
                                                                 (doom-print
                                                                  (doom-print--format
                                                                   (doom-print--class 'fill
                                                                                      (string-join
                                                                                       (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                                       "\n")))
                                                                  :format nil))))))))
                                               (and
                                                (buffer-name temp-buffer)
                                                (kill-buffer temp-buffer)))))))))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                                :format nil)
                               (if
                                   (file-directory-p doom-user-dir)
                                   (progn
                                     (let
                                         ((doom-print-indent
                                           (+
                                            (if t doom-print-indent-increment 0)
                                            doom-print-indent)))
                                       (elc-check-dir doom-user-dir))))
                               (if doom-modules
                                   (progn
                                     (doom-print
                                      (doom-print--format
                                       (doom-print--class 'start "Checking your enabled modules..."))
                                      :format nil)
                                     (advice-add #'require :around #'doom-shut-up-a)
                                     (maphash
                                      #'(lambda
                                          (key plist)
                                          (let
                                              (doom-local-errors doom-local-warnings)
                                            (let
                                                (doom-doctor--errors doom-doctor--warnings)
                                              (condition-case ex
                                                  (let
                                                      ((doctor-file
                                                        (doom-module-path
                                                         (car key)
                                                         (cdr key)
                                                         "doctor.el"))
                                                       (packages-file
                                                        (doom-module-path
                                                         (car key)
                                                         (cdr key)
                                                         "packages.el")))
                                                    (let*
                                                        ((doom-output-indent 6)
                                                         (--cl-var--
                                                          (let
                                                              (doom-packages doom-disabled-packages)
                                                            (load packages-file 'noerror 'nomessage)
                                                            (mapcar #'car doom-packages)))
                                                         (name nil))
                                                      (while
                                                          (consp --cl-var--)
                                                        (setq name
                                                              (car --cl-var--))
                                                        (if
                                                            (or
                                                             (doom-package-get name :disable)
                                                             (eval
                                                              (doom-package-get name :ignore))
                                                             (plist-member
                                                              (doom-package-get name :recipe)
                                                              :local-repo)
                                                             (locate-library
                                                              (symbol-name name))
                                                             (doom-package-built-in-p name)
                                                             (doom-package-installed-p name))
                                                            (progn)
                                                          (doom-print
                                                           (doom-print--format
                                                            (doom-print--class 'error "Missing emacs package: %S")
                                                            name)
                                                           :format nil))
                                                        (setq --cl-var--
                                                              (cdr --cl-var--)))
                                                      nil)
                                                    (let
                                                        ((inhibit-message t))
                                                      (load doctor-file 'noerror 'nomessage)))
                                                ((debug file-missing)
                                                 (progn
                                                   (if inhibit-message nil
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--class 'error "%s"
                                                                          (error-message-string ex)))
                                                      :format nil))
                                                   (setq doom-doctor--errors
                                                         (cons
                                                          (doom-print--format
                                                           (doom-print--class 'error "%s"
                                                                              (error-message-string ex)))
                                                          doom-doctor--errors))))
                                                ((debug error)
                                                 (progn
                                                   (if inhibit-message nil
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--class 'error "Syntax error: %s" ex))
                                                      :format nil))
                                                   (setq doom-doctor--errors
                                                         (cons
                                                          (doom-print--format
                                                           (doom-print--class 'error "Syntax error: %s" ex))
                                                          doom-doctor--errors)))))
                                              (if
                                                  (or doom-doctor--errors doom-doctor--warnings)
                                                  (progn
                                                    (let
                                                        ((doom-print-indent
                                                          (+
                                                           (if t doom-print-indent-increment 0)
                                                           doom-print-indent)))
                                                      (doom-print
                                                       (doom-print--format
                                                        (doom-print--class 'start
                                                                           (doom-print--style 'bold "%s %s"))
                                                        (car key)
                                                        (cdr key))
                                                       :format nil)
                                                      (doom-print
                                                       (doom-print--format "%s"
                                                                           (string-join
                                                                            (append doom-doctor--errors doom-doctor--warnings)
                                                                            "\n"))
                                                       :format nil))
                                                    (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                                            (setq doom-doctor--errors
                                                  (append doom-doctor--errors doom-local-errors))
                                            (setq doom-doctor--warnings
                                                  (append doom-doctor--warnings doom-local-warnings))))
                                      doom-modules))))
                           ((debug error)
                            (progn
                              (if inhibit-message nil
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                                     (or
                                                      (cdr-safe ex)
                                                      (car ex))))
                                 :format nil))
                              (setq doom-doctor--warnings
                                    (cons
                                     (doom-print--format
                                      (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                                         (or
                                                          (cdr-safe ex)
                                                          (car ex))))
                                     doom-doctor--warnings)))
                            (setq doom-modules nil)))
                         (terpri)
                         (let
                             ((--dolist-tail--
                               (list
                                (list doom-doctor--warnings "warning" 'yellow)
                                (list doom-doctor--errors "error" 'red))))
                           (while --dolist-tail--
                             (let
                                 ((msg
                                   (car --dolist-tail--)))
                               (if
                                   (car msg)
                                   (progn
                                     (doom-print
                                      (doom-print--format
                                       (doom-print--class 'color
                                                          (nth 2 msg)
                                                          (if
                                                              (cdr msg)
                                                              "There are %d %ss!" "There is %d %s!")
                                                          (length
                                                           (car msg))
                                                          (nth 1 msg)))
                                      :format nil)))
                               (setq --dolist-tail--
                                     (cdr --dolist-tail--)))))
                         (if
                             (or doom-doctor--errors doom-doctor--warnings)
                             nil
                           (doom-print
                            (doom-print--format
                             (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
                            :format nil))
                         (exit! :pager\? "+G"))))
                   nil)
 ((cli . #s(doom-cli
            ("doom" "doctor")
            nil
            (("SUMMARY" . "Diagnoses common issues on your system.")
             ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
            nil nil nil nil
            (:benchmark nil :prefix
                        (doom)
                        :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
            (closure
             (t)
             (cli alist)
             (let nil
               (doom-print
                (doom-print--format "The doctor will see you now...\n")
                :format nil)
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking your Emacs version..."))
                :format nil)
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (cond
                  ((string= ".50"
                            (substring emacs-version -3))
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                            doom-doctor--errors)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                           "\n")))
                      :format nil)))
                  ((> emacs-major-version 28)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Emacs %s detected" emacs-version))
                        :format nil))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Emacs %s detected" emacs-version))
                            doom-doctor--warnings)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                           "\n")))
                      :format nil)))
                  ((< emacs-major-version 27)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                            doom-doctor--errors))))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for Doom's prerequisites..."))
                :format nil)
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (if
                     (not
                      (executable-find "git"))
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                          :format nil))
                       (setq doom-doctor--errors
                             (cons
                              (doom-print--format
                               (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                              doom-doctor--errors)))
                   (let
                       ((save-match-data-internal
                         (match-data)))
                     (unwind-protect
                         (progn
                           (let*
                               ((version
                                 (cdr
                                  (doom-call-process "git" "version")))
                                (version
                                 (and
                                  (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                  (match-string 1 version))))
                             (if version
                                 (if
                                     (version< version "2.23")
                                     (progn
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                doom-doctor--errors)))))
                               (progn
                                 (if inhibit-message nil
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                    :format nil))
                                 (setq doom-doctor--warnings
                                       (cons
                                        (doom-print--format
                                         (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                        doom-doctor--warnings))))))
                       (set-match-data save-match-data-internal 'evaporate))))
                 (if
                     (executable-find "rg")
                     nil
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                            doom-doctor--errors)))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for Emacs config conflicts..."))
                :format nil)
               (if
                   (file-exists-p "~/.emacs")
                   (progn
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                          :format nil))
                       (setq doom-doctor--warnings
                             (cons
                              (doom-print--format
                               (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                              doom-doctor--warnings)))
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'fill
                                            (string-join
                                             (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                             "\n")))
                        :format nil))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for great Emacs features..."))
                :format nil)
               (if
                   (functionp 'json-serialize)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native JSON support"))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native JSON support"))
                          doom-doctor--warnings)))
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'fill
                                        (string-join
                                         (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                         "\n")))
                    :format nil)))
               (if
                   (featurep 'native-compile)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native compilation support"))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native compilation support"))
                          doom-doctor--warnings)))
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'fill
                                        (string-join
                                         (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                         "\n")))
                    :format nil)))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for private config conflicts..."))
                :format nil)
               (let*
                   ((xdg-dir
                     (concat
                      (or
                       (getenv "XDG_CONFIG_HOME")
                       "~/.config")
                      "/doom/"))
                    (doom-dir
                     (or
                      (getenv "DOOMDIR")
                      "~/.doom.d/"))
                    (dir
                     (if
                         (file-directory-p xdg-dir)
                         xdg-dir doom-dir)))
                 (if
                     (file-equal-p dir doom-emacs-dir)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                            (doom-print--class 'path dir)))
                        :format nil)
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'fill
                                              (string-join
                                               (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                               "\n")))
                          :format nil))))
                 (if
                     (and
                      (not
                       (file-equal-p xdg-dir doom-dir))
                      (file-directory-p xdg-dir)
                      (file-directory-p doom-dir))
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Detected two private configs, in %s and %s")
                         (abbreviate-file-name xdg-dir)
                         doom-dir)
                        :format nil)
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'fill
                                              (string-join
                                               (list "The second directory will be ignored, as it has lower precedence.")
                                               "\n")))
                          :format nil)))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for stale elc files..."))
                :format nil)
               (elc-check-dir doom-emacs-dir)
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for problematic git global settings..."))
                :format nil)
               (if
                   (executable-find "git")
                   (if
                       (= 0
                          (car
                           (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                       (progn
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                              :format nil))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                  doom-doctor--warnings)))
                         (let
                             ((doom-print-indent
                               (+
                                (if t doom-print-indent-increment 0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'fill
                                                (string-join
                                                 (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                                 "\n")))
                            :format nil))))
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                      :format nil))
                   (setq doom-doctor--errors
                         (cons
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                          doom-doctor--errors))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking Doom Emacs..."))
                :format nil)
               (condition-case ex
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (let
                         ((noninteractive nil)
                          kill-emacs-query-functions kill-emacs-hook)
                       (defvar doom-reloading-p nil)
                       (if
                           (file-exists-p doom-autoloads-file)
                           nil
                         (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                       (require 'doom-start)
                       (doom-initialize-packages))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'success "Initialized Doom Emacs %s")
                       doom-version)
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (if
                           (hash-table-p doom-modules)
                           (doom-print--class 'success "Detected %d modules"
                                              (hash-table-count doom-modules))
                         (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'success "Detected %d packages")
                       (length doom-packages))
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'start "Checking Doom core for irregularities..."))
                      :format nil)
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (let
                           ((--dolist-tail--
                             (list "savehist" "projectile.cache")))
                         (while --dolist-tail--
                           (let
                               ((file
                                 (car --dolist-tail--)))
                             (let*
                                 ((size
                                   (and t
                                        (condition-case nil
                                            (progn
                                              (doom-file-size file doom-cache-dir))
                                          (error nil)))))
                               (if size
                                   (if
                                       (> size 1048576)
                                       (progn
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                  (/ size 1024 1024.0)))
                                              :format nil))
                                           (setq doom-doctor--warnings
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                      (/ size 1024 1024.0)))
                                                  doom-doctor--warnings)))
                                         (let
                                             ((doom-print-indent
                                               (+
                                                (if t doom-print-indent-increment 0)
                                                doom-print-indent)))
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'fill
                                                                (string-join
                                                                 (list "Consider deleting it from your system (manually)")
                                                                 "\n")))
                                            :format nil))))
                                 nil))
                             (setq --dolist-tail--
                                   (cdr --dolist-tail--)))))
                       (if
                           (condition-case nil
                               (progn
                                 (executable-find doom-projectile-fd-binary))
                             (error nil))
                           nil
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                              :format nil))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                  doom-doctor--warnings))))
                       (require 'projectile)
                       (if
                           (projectile-project-root "~")
                           (progn
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                  :format nil))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                      doom-doctor--warnings)))
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'fill
                                                    (string-join
                                                     (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                     "\n")))
                                :format nil))))
                       (if
                           (and
                            (file-equal-p doom-user-dir "~/.config/doom")
                            (file-directory-p "~/.doom.d"))
                           (progn
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                               (doom-print--class 'path doom-user-dir))
                              :format nil)
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'fill
                                                    (string-join
                                                     (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                     "\n")))
                                :format nil))))
                       (if
                           (not
                            (executable-find "fc-list"))
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                :format nil))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                    doom-doctor--warnings)))
                         (if
                             (and
                              (cond
                               ((eq system-type 'gnu/linux)
                                (let nil
                                  (concat
                                   (or
                                    (getenv "XDG_DATA_HOME")
                                    "~/.local/share")
                                   "/fonts/")))
                               ((eq system-type 'darwin)
                                (let nil "~/Library/Fonts/")))
                              (require 'all-the-icons nil t))
                             (progn
                               (let
                                   ((temp-buffer
                                     (generate-new-buffer " *temp*" t)))
                                 (save-current-buffer
                                   (set-buffer temp-buffer)
                                   (unwind-protect
                                       (progn
                                         (let
                                             ((errors 0))
                                           (let*
                                               ((output
                                                 (doom-call-process "fc-list" "" "file"))
                                                (status
                                                 (if output
                                                     (car-safe
                                                      (prog1 output
                                                        (setq output
                                                              (cdr output))))
                                                   (signal 'wrong-number-of-arguments
                                                           (list
                                                            '(status . output)
                                                            (length output))))))
                                             (if
                                                 (not
                                                  (= 0 status))
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                                  :format nil)
                                               (insert
                                                (cdr
                                                 (doom-call-process "fc-list" "" "file")))
                                               (let
                                                   ((--dolist-tail-- all-the-icons-font-names))
                                                 (while --dolist-tail--
                                                   (let
                                                       ((font
                                                         (car --dolist-tail--)))
                                                     (if
                                                         (save-excursion
                                                           (re-search-backward font nil t))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--style 'green "Found font %s" font))
                                                          :format nil)
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'warn "Warning: couldn't find %S font")
                                                         font)
                                                        :format nil))
                                                     (setq --dolist-tail--
                                                           (cdr --dolist-tail--)))))
                                               (if
                                                   (> errors 0)
                                                   (progn
                                                     (let
                                                         ((doom-print-indent
                                                           (+
                                                            (if t doom-print-indent-increment 0)
                                                            doom-print-indent)))
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'fill
                                                                            (string-join
                                                                             (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                             "\n")))
                                                        :format nil))))))))
                                     (and
                                      (buffer-name temp-buffer)
                                      (kill-buffer temp-buffer)))))))))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                      :format nil)
                     (if
                         (file-directory-p doom-user-dir)
                         (progn
                           (let
                               ((doom-print-indent
                                 (+
                                  (if t doom-print-indent-increment 0)
                                  doom-print-indent)))
                             (elc-check-dir doom-user-dir))))
                     (if doom-modules
                         (progn
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'start "Checking your enabled modules..."))
                            :format nil)
                           (advice-add #'require :around #'doom-shut-up-a)
                           (maphash
                            #'(lambda
                                (key plist)
                                (let
                                    (doom-local-errors doom-local-warnings)
                                  (let
                                      (doom-doctor--errors doom-doctor--warnings)
                                    (condition-case ex
                                        (let
                                            ((doctor-file
                                              (doom-module-path
                                               (car key)
                                               (cdr key)
                                               "doctor.el"))
                                             (packages-file
                                              (doom-module-path
                                               (car key)
                                               (cdr key)
                                               "packages.el")))
                                          (let*
                                              ((doom-output-indent 6)
                                               (--cl-var--
                                                (let
                                                    (doom-packages doom-disabled-packages)
                                                  (load packages-file 'noerror 'nomessage)
                                                  (mapcar #'car doom-packages)))
                                               (name nil))
                                            (while
                                                (consp --cl-var--)
                                              (setq name
                                                    (car --cl-var--))
                                              (if
                                                  (or
                                                   (doom-package-get name :disable)
                                                   (eval
                                                    (doom-package-get name :ignore))
                                                   (plist-member
                                                    (doom-package-get name :recipe)
                                                    :local-repo)
                                                   (locate-library
                                                    (symbol-name name))
                                                   (doom-package-built-in-p name)
                                                   (doom-package-installed-p name))
                                                  (progn)
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'error "Missing emacs package: %S")
                                                  name)
                                                 :format nil))
                                              (setq --cl-var--
                                                    (cdr --cl-var--)))
                                            nil)
                                          (let
                                              ((inhibit-message t))
                                            (load doctor-file 'noerror 'nomessage)))
                                      ((debug file-missing)
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "%s"
                                                                (error-message-string ex)))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "%s"
                                                                    (error-message-string ex)))
                                                doom-doctor--errors))))
                                      ((debug error)
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Syntax error: %s" ex))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "Syntax error: %s" ex))
                                                doom-doctor--errors)))))
                                    (if
                                        (or doom-doctor--errors doom-doctor--warnings)
                                        (progn
                                          (let
                                              ((doom-print-indent
                                                (+
                                                 (if t doom-print-indent-increment 0)
                                                 doom-print-indent)))
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'start
                                                                 (doom-print--style 'bold "%s %s"))
                                              (car key)
                                              (cdr key))
                                             :format nil)
                                            (doom-print
                                             (doom-print--format "%s"
                                                                 (string-join
                                                                  (append doom-doctor--errors doom-doctor--warnings)
                                                                  "\n"))
                                             :format nil))
                                          (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                                  (setq doom-doctor--errors
                                        (append doom-doctor--errors doom-local-errors))
                                  (setq doom-doctor--warnings
                                        (append doom-doctor--warnings doom-local-warnings))))
                            doom-modules))))
                 ((debug error)
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                           (or
                                            (cdr-safe ex)
                                            (car ex))))
                       :format nil))
                    (setq doom-doctor--warnings
                          (cons
                           (doom-print--format
                            (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                               (or
                                                (cdr-safe ex)
                                                (car ex))))
                           doom-doctor--warnings)))
                  (setq doom-modules nil)))
               (terpri)
               (let
                   ((--dolist-tail--
                     (list
                      (list doom-doctor--warnings "warning" 'yellow)
                      (list doom-doctor--errors "error" 'red))))
                 (while --dolist-tail--
                   (let
                       ((msg
                         (car --dolist-tail--)))
                     (if
                         (car msg)
                         (progn
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'color
                                                (nth 2 msg)
                                                (if
                                                    (cdr msg)
                                                    "There are %d %ss!" "There is %d %s!")
                                                (length
                                                 (car msg))
                                                (nth 1 msg)))
                            :format nil)))
                     (setq --dolist-tail--
                           (cdr --dolist-tail--)))))
               (if
                   (or doom-doctor--errors doom-doctor--warnings)
                   nil
                 (doom-print
                  (doom-print--format
                   (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
                  :format nil))
               (exit! :pager\? "+G")))))
  (bindings)))

;;;; 21
((let
     ((cli x3)
      (bindings x4))
   (doom-cli-execute cli bindings))
 ((context . #s(doom-cli-context
                (25359 42750 192253 0)
                13992 -1 nil nil nil "doom" nil nil
                ("doom" "doctor")
                nil
                ("doctor")
                (("--eval")
                 ("-E")
                 ("--strict-load")
                 ("--load")
                 ("-L")
                 ("--color")
                 ("--profile")
                 ("--pager")
                 ("--emacsdir")
                 ("--doomdir")
                 ("--debug")
                 ("-D")
                 ("--force")
                 ("-!"))
                ((t)
                 (("doom" "doctor"))
                 (("doom")
                  "doctor"))
                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (command "doom" "doctor")
  (cli . #s(doom-cli
            ("doom" "doctor")
            nil
            (("SUMMARY" . "Diagnoses common issues on your system.")
             ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
            nil nil nil nil
            (:benchmark nil :prefix
                        (doom)
                        :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
            (closure
             (t)
             (cli alist)
             (let nil
               (doom-print
                (doom-print--format "The doctor will see you now...\n")
                :format nil)
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking your Emacs version..."))
                :format nil)
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (cond
                  ((string= ".50"
                            (substring emacs-version -3))
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                            doom-doctor--errors)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                           "\n")))
                      :format nil)))
                  ((> emacs-major-version 28)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Emacs %s detected" emacs-version))
                        :format nil))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Emacs %s detected" emacs-version))
                            doom-doctor--warnings)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                           "\n")))
                      :format nil)))
                  ((< emacs-major-version 27)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                            doom-doctor--errors))))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for Doom's prerequisites..."))
                :format nil)
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (if
                     (not
                      (executable-find "git"))
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                          :format nil))
                       (setq doom-doctor--errors
                             (cons
                              (doom-print--format
                               (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                              doom-doctor--errors)))
                   (let
                       ((save-match-data-internal
                         (match-data)))
                     (unwind-protect
                         (progn
                           (let*
                               ((version
                                 (cdr
                                  (doom-call-process "git" "version")))
                                (version
                                 (and
                                  (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                  (match-string 1 version))))
                             (if version
                                 (if
                                     (version< version "2.23")
                                     (progn
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                doom-doctor--errors)))))
                               (progn
                                 (if inhibit-message nil
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                    :format nil))
                                 (setq doom-doctor--warnings
                                       (cons
                                        (doom-print--format
                                         (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                        doom-doctor--warnings))))))
                       (set-match-data save-match-data-internal 'evaporate))))
                 (if
                     (executable-find "rg")
                     nil
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                            doom-doctor--errors)))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for Emacs config conflicts..."))
                :format nil)
               (if
                   (file-exists-p "~/.emacs")
                   (progn
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                          :format nil))
                       (setq doom-doctor--warnings
                             (cons
                              (doom-print--format
                               (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                              doom-doctor--warnings)))
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'fill
                                            (string-join
                                             (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                             "\n")))
                        :format nil))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for great Emacs features..."))
                :format nil)
               (if
                   (functionp 'json-serialize)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native JSON support"))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native JSON support"))
                          doom-doctor--warnings)))
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'fill
                                        (string-join
                                         (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                         "\n")))
                    :format nil)))
               (if
                   (featurep 'native-compile)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native compilation support"))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native compilation support"))
                          doom-doctor--warnings)))
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'fill
                                        (string-join
                                         (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                         "\n")))
                    :format nil)))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for private config conflicts..."))
                :format nil)
               (let*
                   ((xdg-dir
                     (concat
                      (or
                       (getenv "XDG_CONFIG_HOME")
                       "~/.config")
                      "/doom/"))
                    (doom-dir
                     (or
                      (getenv "DOOMDIR")
                      "~/.doom.d/"))
                    (dir
                     (if
                         (file-directory-p xdg-dir)
                         xdg-dir doom-dir)))
                 (if
                     (file-equal-p dir doom-emacs-dir)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                            (doom-print--class 'path dir)))
                        :format nil)
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'fill
                                              (string-join
                                               (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                               "\n")))
                          :format nil))))
                 (if
                     (and
                      (not
                       (file-equal-p xdg-dir doom-dir))
                      (file-directory-p xdg-dir)
                      (file-directory-p doom-dir))
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Detected two private configs, in %s and %s")
                         (abbreviate-file-name xdg-dir)
                         doom-dir)
                        :format nil)
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'fill
                                              (string-join
                                               (list "The second directory will be ignored, as it has lower precedence.")
                                               "\n")))
                          :format nil)))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for stale elc files..."))
                :format nil)
               (elc-check-dir doom-emacs-dir)
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for problematic git global settings..."))
                :format nil)
               (if
                   (executable-find "git")
                   (if
                       (= 0
                          (car
                           (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                       (progn
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                              :format nil))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                  doom-doctor--warnings)))
                         (let
                             ((doom-print-indent
                               (+
                                (if t doom-print-indent-increment 0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'fill
                                                (string-join
                                                 (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                                 "\n")))
                            :format nil))))
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                      :format nil))
                   (setq doom-doctor--errors
                         (cons
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                          doom-doctor--errors))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking Doom Emacs..."))
                :format nil)
               (condition-case ex
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (let
                         ((noninteractive nil)
                          kill-emacs-query-functions kill-emacs-hook)
                       (defvar doom-reloading-p nil)
                       (if
                           (file-exists-p doom-autoloads-file)
                           nil
                         (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                       (require 'doom-start)
                       (doom-initialize-packages))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'success "Initialized Doom Emacs %s")
                       doom-version)
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (if
                           (hash-table-p doom-modules)
                           (doom-print--class 'success "Detected %d modules"
                                              (hash-table-count doom-modules))
                         (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'success "Detected %d packages")
                       (length doom-packages))
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'start "Checking Doom core for irregularities..."))
                      :format nil)
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (let
                           ((--dolist-tail--
                             (list "savehist" "projectile.cache")))
                         (while --dolist-tail--
                           (let
                               ((file
                                 (car --dolist-tail--)))
                             (let*
                                 ((size
                                   (and t
                                        (condition-case nil
                                            (progn
                                              (doom-file-size file doom-cache-dir))
                                          (error nil)))))
                               (if size
                                   (if
                                       (> size 1048576)
                                       (progn
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                  (/ size 1024 1024.0)))
                                              :format nil))
                                           (setq doom-doctor--warnings
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                      (/ size 1024 1024.0)))
                                                  doom-doctor--warnings)))
                                         (let
                                             ((doom-print-indent
                                               (+
                                                (if t doom-print-indent-increment 0)
                                                doom-print-indent)))
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'fill
                                                                (string-join
                                                                 (list "Consider deleting it from your system (manually)")
                                                                 "\n")))
                                            :format nil))))
                                 nil))
                             (setq --dolist-tail--
                                   (cdr --dolist-tail--)))))
                       (if
                           (condition-case nil
                               (progn
                                 (executable-find doom-projectile-fd-binary))
                             (error nil))
                           nil
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                              :format nil))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                  doom-doctor--warnings))))
                       (require 'projectile)
                       (if
                           (projectile-project-root "~")
                           (progn
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                  :format nil))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                      doom-doctor--warnings)))
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'fill
                                                    (string-join
                                                     (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                     "\n")))
                                :format nil))))
                       (if
                           (and
                            (file-equal-p doom-user-dir "~/.config/doom")
                            (file-directory-p "~/.doom.d"))
                           (progn
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                               (doom-print--class 'path doom-user-dir))
                              :format nil)
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'fill
                                                    (string-join
                                                     (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                     "\n")))
                                :format nil))))
                       (if
                           (not
                            (executable-find "fc-list"))
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                :format nil))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                    doom-doctor--warnings)))
                         (if
                             (and
                              (cond
                               ((eq system-type 'gnu/linux)
                                (let nil
                                  (concat
                                   (or
                                    (getenv "XDG_DATA_HOME")
                                    "~/.local/share")
                                   "/fonts/")))
                               ((eq system-type 'darwin)
                                (let nil "~/Library/Fonts/")))
                              (require 'all-the-icons nil t))
                             (progn
                               (let
                                   ((temp-buffer
                                     (generate-new-buffer " *temp*" t)))
                                 (save-current-buffer
                                   (set-buffer temp-buffer)
                                   (unwind-protect
                                       (progn
                                         (let
                                             ((errors 0))
                                           (let*
                                               ((output
                                                 (doom-call-process "fc-list" "" "file"))
                                                (status
                                                 (if output
                                                     (car-safe
                                                      (prog1 output
                                                        (setq output
                                                              (cdr output))))
                                                   (signal 'wrong-number-of-arguments
                                                           (list
                                                            '(status . output)
                                                            (length output))))))
                                             (if
                                                 (not
                                                  (= 0 status))
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                                  :format nil)
                                               (insert
                                                (cdr
                                                 (doom-call-process "fc-list" "" "file")))
                                               (let
                                                   ((--dolist-tail-- all-the-icons-font-names))
                                                 (while --dolist-tail--
                                                   (let
                                                       ((font
                                                         (car --dolist-tail--)))
                                                     (if
                                                         (save-excursion
                                                           (re-search-backward font nil t))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--style 'green "Found font %s" font))
                                                          :format nil)
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'warn "Warning: couldn't find %S font")
                                                         font)
                                                        :format nil))
                                                     (setq --dolist-tail--
                                                           (cdr --dolist-tail--)))))
                                               (if
                                                   (> errors 0)
                                                   (progn
                                                     (let
                                                         ((doom-print-indent
                                                           (+
                                                            (if t doom-print-indent-increment 0)
                                                            doom-print-indent)))
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'fill
                                                                            (string-join
                                                                             (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                             "\n")))
                                                        :format nil))))))))
                                     (and
                                      (buffer-name temp-buffer)
                                      (kill-buffer temp-buffer)))))))))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                      :format nil)
                     (if
                         (file-directory-p doom-user-dir)
                         (progn
                           (let
                               ((doom-print-indent
                                 (+
                                  (if t doom-print-indent-increment 0)
                                  doom-print-indent)))
                             (elc-check-dir doom-user-dir))))
                     (if doom-modules
                         (progn
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'start "Checking your enabled modules..."))
                            :format nil)
                           (advice-add #'require :around #'doom-shut-up-a)
                           (maphash
                            #'(lambda
                                (key plist)
                                (let
                                    (doom-local-errors doom-local-warnings)
                                  (let
                                      (doom-doctor--errors doom-doctor--warnings)
                                    (condition-case ex
                                        (let
                                            ((doctor-file
                                              (doom-module-path
                                               (car key)
                                               (cdr key)
                                               "doctor.el"))
                                             (packages-file
                                              (doom-module-path
                                               (car key)
                                               (cdr key)
                                               "packages.el")))
                                          (let*
                                              ((doom-output-indent 6)
                                               (--cl-var--
                                                (let
                                                    (doom-packages doom-disabled-packages)
                                                  (load packages-file 'noerror 'nomessage)
                                                  (mapcar #'car doom-packages)))
                                               (name nil))
                                            (while
                                                (consp --cl-var--)
                                              (setq name
                                                    (car --cl-var--))
                                              (if
                                                  (or
                                                   (doom-package-get name :disable)
                                                   (eval
                                                    (doom-package-get name :ignore))
                                                   (plist-member
                                                    (doom-package-get name :recipe)
                                                    :local-repo)
                                                   (locate-library
                                                    (symbol-name name))
                                                   (doom-package-built-in-p name)
                                                   (doom-package-installed-p name))
                                                  (progn)
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'error "Missing emacs package: %S")
                                                  name)
                                                 :format nil))
                                              (setq --cl-var--
                                                    (cdr --cl-var--)))
                                            nil)
                                          (let
                                              ((inhibit-message t))
                                            (load doctor-file 'noerror 'nomessage)))
                                      ((debug file-missing)
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "%s"
                                                                (error-message-string ex)))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "%s"
                                                                    (error-message-string ex)))
                                                doom-doctor--errors))))
                                      ((debug error)
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Syntax error: %s" ex))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "Syntax error: %s" ex))
                                                doom-doctor--errors)))))
                                    (if
                                        (or doom-doctor--errors doom-doctor--warnings)
                                        (progn
                                          (let
                                              ((doom-print-indent
                                                (+
                                                 (if t doom-print-indent-increment 0)
                                                 doom-print-indent)))
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'start
                                                                 (doom-print--style 'bold "%s %s"))
                                              (car key)
                                              (cdr key))
                                             :format nil)
                                            (doom-print
                                             (doom-print--format "%s"
                                                                 (string-join
                                                                  (append doom-doctor--errors doom-doctor--warnings)
                                                                  "\n"))
                                             :format nil))
                                          (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                                  (setq doom-doctor--errors
                                        (append doom-doctor--errors doom-local-errors))
                                  (setq doom-doctor--warnings
                                        (append doom-doctor--warnings doom-local-warnings))))
                            doom-modules))))
                 ((debug error)
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                           (or
                                            (cdr-safe ex)
                                            (car ex))))
                       :format nil))
                    (setq doom-doctor--warnings
                          (cons
                           (doom-print--format
                            (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                               (or
                                                (cdr-safe ex)
                                                (car ex))))
                           doom-doctor--warnings)))
                  (setq doom-modules nil)))
               (terpri)
               (let
                   ((--dolist-tail--
                     (list
                      (list doom-doctor--warnings "warning" 'yellow)
                      (list doom-doctor--errors "error" 'red))))
                 (while --dolist-tail--
                   (let
                       ((msg
                         (car --dolist-tail--)))
                     (if
                         (car msg)
                         (progn
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'color
                                                (nth 2 msg)
                                                (if
                                                    (cdr msg)
                                                    "There are %d %ss!" "There is %d %s!")
                                                (length
                                                 (car msg))
                                                (nth 1 msg)))
                            :format nil)))
                     (setq --dolist-tail--
                           (cdr --dolist-tail--)))))
               (if
                   (or doom-doctor--errors doom-doctor--warnings)
                   nil
                 (doom-print
                  (doom-print--format
                   (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
                  :format nil))
               (exit! :pager\? "+G")))))
  (prefix . "doom")
  (seen t)
  (runners
   (#s(doom-cli
       ("doom" "doctor")
       nil
       (("SUMMARY" . "Diagnoses common issues on your system.")
        ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
       nil nil nil nil
       (:benchmark nil :prefix
                   (doom)
                   :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
       (closure
        (t)
        (cli alist)
        (let nil
          (doom-print
           (doom-print--format "The doctor will see you now...\n")
           :format nil)
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking your Emacs version..."))
           :format nil)
          (let
              ((doom-print-indent
                (+
                 (if t doom-print-indent-increment 0)
                 doom-print-indent)))
            (cond
             ((string= ".50"
                       (substring emacs-version -3))
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                       doom-doctor--errors)))
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'fill
                                     (string-join
                                      (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                      "\n")))
                 :format nil)))
             ((> emacs-major-version 28)
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Emacs %s detected" emacs-version))
                   :format nil))
                (setq doom-doctor--warnings
                      (cons
                       (doom-print--format
                        (doom-print--class 'warn "Emacs %s detected" emacs-version))
                       doom-doctor--warnings)))
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'fill
                                     (string-join
                                      (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                      "\n")))
                 :format nil)))
             ((< emacs-major-version 27)
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                       doom-doctor--errors))))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for Doom's prerequisites..."))
           :format nil)
          (let
              ((doom-print-indent
                (+
                 (if t doom-print-indent-increment 0)
                 doom-print-indent)))
            (if
                (not
                 (executable-find "git"))
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                     :format nil))
                  (setq doom-doctor--errors
                        (cons
                         (doom-print--format
                          (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                         doom-doctor--errors)))
              (let
                  ((save-match-data-internal
                    (match-data)))
                (unwind-protect
                    (progn
                      (let*
                          ((version
                            (cdr
                             (doom-call-process "git" "version")))
                           (version
                            (and
                             (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                             (match-string 1 version))))
                        (if version
                            (if
                                (version< version "2.23")
                                (progn
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                       :format nil))
                                    (setq doom-doctor--errors
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                           doom-doctor--errors)))))
                          (progn
                            (if inhibit-message nil
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                               :format nil))
                            (setq doom-doctor--warnings
                                  (cons
                                   (doom-print--format
                                    (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                   doom-doctor--warnings))))))
                  (set-match-data save-match-data-internal 'evaporate))))
            (if
                (executable-find "rg")
                nil
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                       doom-doctor--errors)))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for Emacs config conflicts..."))
           :format nil)
          (if
              (file-exists-p "~/.emacs")
              (progn
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                     :format nil))
                  (setq doom-doctor--warnings
                        (cons
                         (doom-print--format
                          (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                         doom-doctor--warnings)))
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'fill
                                       (string-join
                                        (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                        "\n")))
                   :format nil))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for great Emacs features..."))
           :format nil)
          (if
              (functionp 'json-serialize)
              nil
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Emacs was not built with native JSON support"))
                 :format nil))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Emacs was not built with native JSON support"))
                     doom-doctor--warnings)))
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (doom-print
               (doom-print--format
                (doom-print--class 'fill
                                   (string-join
                                    (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                    "\n")))
               :format nil)))
          (if
              (featurep 'native-compile)
              nil
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Emacs was not built with native compilation support"))
                 :format nil))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Emacs was not built with native compilation support"))
                     doom-doctor--warnings)))
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (doom-print
               (doom-print--format
                (doom-print--class 'fill
                                   (string-join
                                    (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                    "\n")))
               :format nil)))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for private config conflicts..."))
           :format nil)
          (let*
              ((xdg-dir
                (concat
                 (or
                  (getenv "XDG_CONFIG_HOME")
                  "~/.config")
                 "/doom/"))
               (doom-dir
                (or
                 (getenv "DOOMDIR")
                 "~/.doom.d/"))
               (dir
                (if
                    (file-directory-p xdg-dir)
                    xdg-dir doom-dir)))
            (if
                (file-equal-p dir doom-emacs-dir)
                (progn
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                       (doom-print--class 'path dir)))
                   :format nil)
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'fill
                                         (string-join
                                          (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                          "\n")))
                     :format nil))))
            (if
                (and
                 (not
                  (file-equal-p xdg-dir doom-dir))
                 (file-directory-p xdg-dir)
                 (file-directory-p doom-dir))
                (progn
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Detected two private configs, in %s and %s")
                    (abbreviate-file-name xdg-dir)
                    doom-dir)
                   :format nil)
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'fill
                                         (string-join
                                          (list "The second directory will be ignored, as it has lower precedence.")
                                          "\n")))
                     :format nil)))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for stale elc files..."))
           :format nil)
          (elc-check-dir doom-emacs-dir)
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for problematic git global settings..."))
           :format nil)
          (if
              (executable-find "git")
              (if
                  (= 0
                     (car
                      (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                  (progn
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                         :format nil))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                             doom-doctor--warnings)))
                    (let
                        ((doom-print-indent
                          (+
                           (if t doom-print-indent-increment 0)
                           doom-print-indent)))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'fill
                                           (string-join
                                            (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                            "\n")))
                       :format nil))))
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                 :format nil))
              (setq doom-doctor--errors
                    (cons
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                     doom-doctor--errors))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking Doom Emacs..."))
           :format nil)
          (condition-case ex
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (let
                    ((noninteractive nil)
                     kill-emacs-query-functions kill-emacs-hook)
                  (defvar doom-reloading-p nil)
                  (if
                      (file-exists-p doom-autoloads-file)
                      nil
                    (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                  (require 'doom-start)
                  (doom-initialize-packages))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'success "Initialized Doom Emacs %s")
                  doom-version)
                 :format nil)
                (doom-print
                 (doom-print--format
                  (if
                      (hash-table-p doom-modules)
                      (doom-print--class 'success "Detected %d modules"
                                         (hash-table-count doom-modules))
                    (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                 :format nil)
                (doom-print
                 (doom-print--format
                  (doom-print--class 'success "Detected %d packages")
                  (length doom-packages))
                 :format nil)
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking Doom core for irregularities..."))
                 :format nil)
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (let
                      ((--dolist-tail--
                        (list "savehist" "projectile.cache")))
                    (while --dolist-tail--
                      (let
                          ((file
                            (car --dolist-tail--)))
                        (let*
                            ((size
                              (and t
                                   (condition-case nil
                                       (progn
                                         (doom-file-size file doom-cache-dir))
                                     (error nil)))))
                          (if size
                              (if
                                  (> size 1048576)
                                  (progn
                                    (progn
                                      (if inhibit-message nil
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                             (/ size 1024 1024.0)))
                                         :format nil))
                                      (setq doom-doctor--warnings
                                            (cons
                                             (doom-print--format
                                              (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                 (/ size 1024 1024.0)))
                                             doom-doctor--warnings)))
                                    (let
                                        ((doom-print-indent
                                          (+
                                           (if t doom-print-indent-increment 0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'fill
                                                           (string-join
                                                            (list "Consider deleting it from your system (manually)")
                                                            "\n")))
                                       :format nil))))
                            nil))
                        (setq --dolist-tail--
                              (cdr --dolist-tail--)))))
                  (if
                      (condition-case nil
                          (progn
                            (executable-find doom-projectile-fd-binary))
                        (error nil))
                      nil
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                         :format nil))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                             doom-doctor--warnings))))
                  (require 'projectile)
                  (if
                      (projectile-project-root "~")
                      (progn
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                             :format nil))
                          (setq doom-doctor--warnings
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                 doom-doctor--warnings)))
                        (let
                            ((doom-print-indent
                              (+
                               (if t doom-print-indent-increment 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'fill
                                               (string-join
                                                (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                "\n")))
                           :format nil))))
                  (if
                      (and
                       (file-equal-p doom-user-dir "~/.config/doom")
                       (file-directory-p "~/.doom.d"))
                      (progn
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                          (doom-print--class 'path doom-user-dir))
                         :format nil)
                        (let
                            ((doom-print-indent
                              (+
                               (if t doom-print-indent-increment 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'fill
                                               (string-join
                                                (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                "\n")))
                           :format nil))))
                  (if
                      (not
                       (executable-find "fc-list"))
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                           :format nil))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                               doom-doctor--warnings)))
                    (if
                        (and
                         (cond
                          ((eq system-type 'gnu/linux)
                           (let nil
                             (concat
                              (or
                               (getenv "XDG_DATA_HOME")
                               "~/.local/share")
                              "/fonts/")))
                          ((eq system-type 'darwin)
                           (let nil "~/Library/Fonts/")))
                         (require 'all-the-icons nil t))
                        (progn
                          (let
                              ((temp-buffer
                                (generate-new-buffer " *temp*" t)))
                            (save-current-buffer
                              (set-buffer temp-buffer)
                              (unwind-protect
                                  (progn
                                    (let
                                        ((errors 0))
                                      (let*
                                          ((output
                                            (doom-call-process "fc-list" "" "file"))
                                           (status
                                            (if output
                                                (car-safe
                                                 (prog1 output
                                                   (setq output
                                                         (cdr output))))
                                              (signal 'wrong-number-of-arguments
                                                      (list
                                                       '(status . output)
                                                       (length output))))))
                                        (if
                                            (not
                                             (= 0 status))
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                             :format nil)
                                          (insert
                                           (cdr
                                            (doom-call-process "fc-list" "" "file")))
                                          (let
                                              ((--dolist-tail-- all-the-icons-font-names))
                                            (while --dolist-tail--
                                              (let
                                                  ((font
                                                    (car --dolist-tail--)))
                                                (if
                                                    (save-excursion
                                                      (re-search-backward font nil t))
                                                    (doom-print
                                                     (doom-print--format
                                                      (doom-print--style 'green "Found font %s" font))
                                                     :format nil)
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'warn "Warning: couldn't find %S font")
                                                    font)
                                                   :format nil))
                                                (setq --dolist-tail--
                                                      (cdr --dolist-tail--)))))
                                          (if
                                              (> errors 0)
                                              (progn
                                                (let
                                                    ((doom-print-indent
                                                      (+
                                                       (if t doom-print-indent-increment 0)
                                                       doom-print-indent)))
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'fill
                                                                       (string-join
                                                                        (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                        "\n")))
                                                   :format nil))))))))
                                (and
                                 (buffer-name temp-buffer)
                                 (kill-buffer temp-buffer)))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                 :format nil)
                (if
                    (file-directory-p doom-user-dir)
                    (progn
                      (let
                          ((doom-print-indent
                            (+
                             (if t doom-print-indent-increment 0)
                             doom-print-indent)))
                        (elc-check-dir doom-user-dir))))
                (if doom-modules
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'start "Checking your enabled modules..."))
                       :format nil)
                      (advice-add #'require :around #'doom-shut-up-a)
                      (maphash
                       #'(lambda
                           (key plist)
                           (let
                               (doom-local-errors doom-local-warnings)
                             (let
                                 (doom-doctor--errors doom-doctor--warnings)
                               (condition-case ex
                                   (let
                                       ((doctor-file
                                         (doom-module-path
                                          (car key)
                                          (cdr key)
                                          "doctor.el"))
                                        (packages-file
                                         (doom-module-path
                                          (car key)
                                          (cdr key)
                                          "packages.el")))
                                     (let*
                                         ((doom-output-indent 6)
                                          (--cl-var--
                                           (let
                                               (doom-packages doom-disabled-packages)
                                             (load packages-file 'noerror 'nomessage)
                                             (mapcar #'car doom-packages)))
                                          (name nil))
                                       (while
                                           (consp --cl-var--)
                                         (setq name
                                               (car --cl-var--))
                                         (if
                                             (or
                                              (doom-package-get name :disable)
                                              (eval
                                               (doom-package-get name :ignore))
                                              (plist-member
                                               (doom-package-get name :recipe)
                                               :local-repo)
                                              (locate-library
                                               (symbol-name name))
                                              (doom-package-built-in-p name)
                                              (doom-package-installed-p name))
                                             (progn)
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Missing emacs package: %S")
                                             name)
                                            :format nil))
                                         (setq --cl-var--
                                               (cdr --cl-var--)))
                                       nil)
                                     (let
                                         ((inhibit-message t))
                                       (load doctor-file 'noerror 'nomessage)))
                                 ((debug file-missing)
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "%s"
                                                           (error-message-string ex)))
                                       :format nil))
                                    (setq doom-doctor--errors
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'error "%s"
                                                               (error-message-string ex)))
                                           doom-doctor--errors))))
                                 ((debug error)
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "Syntax error: %s" ex))
                                       :format nil))
                                    (setq doom-doctor--errors
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'error "Syntax error: %s" ex))
                                           doom-doctor--errors)))))
                               (if
                                   (or doom-doctor--errors doom-doctor--warnings)
                                   (progn
                                     (let
                                         ((doom-print-indent
                                           (+
                                            (if t doom-print-indent-increment 0)
                                            doom-print-indent)))
                                       (doom-print
                                        (doom-print--format
                                         (doom-print--class 'start
                                                            (doom-print--style 'bold "%s %s"))
                                         (car key)
                                         (cdr key))
                                        :format nil)
                                       (doom-print
                                        (doom-print--format "%s"
                                                            (string-join
                                                             (append doom-doctor--errors doom-doctor--warnings)
                                                             "\n"))
                                        :format nil))
                                     (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                             (setq doom-doctor--errors
                                   (append doom-doctor--errors doom-local-errors))
                             (setq doom-doctor--warnings
                                   (append doom-doctor--warnings doom-local-warnings))))
                       doom-modules))))
            ((debug error)
             (progn
               (if inhibit-message nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                      (or
                                       (cdr-safe ex)
                                       (car ex))))
                  :format nil))
               (setq doom-doctor--warnings
                     (cons
                      (doom-print--format
                       (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                          (or
                                           (cdr-safe ex)
                                           (car ex))))
                      doom-doctor--warnings)))
             (setq doom-modules nil)))
          (terpri)
          (let
              ((--dolist-tail--
                (list
                 (list doom-doctor--warnings "warning" 'yellow)
                 (list doom-doctor--errors "error" 'red))))
            (while --dolist-tail--
              (let
                  ((msg
                    (car --dolist-tail--)))
                (if
                    (car msg)
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'color
                                           (nth 2 msg)
                                           (if
                                               (cdr msg)
                                               "There are %d %ss!" "There is %d %s!")
                                           (length
                                            (car msg))
                                           (nth 1 msg)))
                       :format nil)))
                (setq --dolist-tail--
                      (cdr --dolist-tail--)))))
          (if
              (or doom-doctor--errors doom-doctor--warnings)
              nil
            (doom-print
             (doom-print--format
              (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
             :format nil))
          (exit! :pager\? "+G"))))))
  (--dolist-tail--
   (#s(doom-cli
       ("doom" "doctor")
       nil
       (("SUMMARY" . "Diagnoses common issues on your system.")
        ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
       nil nil nil nil
       (:benchmark nil :prefix
                   (doom)
                   :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
       (closure
        (t)
        (cli alist)
        (let nil
          (doom-print
           (doom-print--format "The doctor will see you now...\n")
           :format nil)
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking your Emacs version..."))
           :format nil)
          (let
              ((doom-print-indent
                (+
                 (if t doom-print-indent-increment 0)
                 doom-print-indent)))
            (cond
             ((string= ".50"
                       (substring emacs-version -3))
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                       doom-doctor--errors)))
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'fill
                                     (string-join
                                      (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                      "\n")))
                 :format nil)))
             ((> emacs-major-version 28)
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Emacs %s detected" emacs-version))
                   :format nil))
                (setq doom-doctor--warnings
                      (cons
                       (doom-print--format
                        (doom-print--class 'warn "Emacs %s detected" emacs-version))
                       doom-doctor--warnings)))
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'fill
                                     (string-join
                                      (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                      "\n")))
                 :format nil)))
             ((< emacs-major-version 27)
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                       doom-doctor--errors))))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for Doom's prerequisites..."))
           :format nil)
          (let
              ((doom-print-indent
                (+
                 (if t doom-print-indent-increment 0)
                 doom-print-indent)))
            (if
                (not
                 (executable-find "git"))
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                     :format nil))
                  (setq doom-doctor--errors
                        (cons
                         (doom-print--format
                          (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                         doom-doctor--errors)))
              (let
                  ((save-match-data-internal
                    (match-data)))
                (unwind-protect
                    (progn
                      (let*
                          ((version
                            (cdr
                             (doom-call-process "git" "version")))
                           (version
                            (and
                             (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                             (match-string 1 version))))
                        (if version
                            (if
                                (version< version "2.23")
                                (progn
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                       :format nil))
                                    (setq doom-doctor--errors
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                           doom-doctor--errors)))))
                          (progn
                            (if inhibit-message nil
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                               :format nil))
                            (setq doom-doctor--warnings
                                  (cons
                                   (doom-print--format
                                    (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                   doom-doctor--warnings))))))
                  (set-match-data save-match-data-internal 'evaporate))))
            (if
                (executable-find "rg")
                nil
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                       doom-doctor--errors)))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for Emacs config conflicts..."))
           :format nil)
          (if
              (file-exists-p "~/.emacs")
              (progn
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                     :format nil))
                  (setq doom-doctor--warnings
                        (cons
                         (doom-print--format
                          (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                         doom-doctor--warnings)))
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'fill
                                       (string-join
                                        (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                        "\n")))
                   :format nil))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for great Emacs features..."))
           :format nil)
          (if
              (functionp 'json-serialize)
              nil
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Emacs was not built with native JSON support"))
                 :format nil))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Emacs was not built with native JSON support"))
                     doom-doctor--warnings)))
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (doom-print
               (doom-print--format
                (doom-print--class 'fill
                                   (string-join
                                    (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                    "\n")))
               :format nil)))
          (if
              (featurep 'native-compile)
              nil
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Emacs was not built with native compilation support"))
                 :format nil))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Emacs was not built with native compilation support"))
                     doom-doctor--warnings)))
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (doom-print
               (doom-print--format
                (doom-print--class 'fill
                                   (string-join
                                    (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                    "\n")))
               :format nil)))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for private config conflicts..."))
           :format nil)
          (let*
              ((xdg-dir
                (concat
                 (or
                  (getenv "XDG_CONFIG_HOME")
                  "~/.config")
                 "/doom/"))
               (doom-dir
                (or
                 (getenv "DOOMDIR")
                 "~/.doom.d/"))
               (dir
                (if
                    (file-directory-p xdg-dir)
                    xdg-dir doom-dir)))
            (if
                (file-equal-p dir doom-emacs-dir)
                (progn
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                       (doom-print--class 'path dir)))
                   :format nil)
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'fill
                                         (string-join
                                          (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                          "\n")))
                     :format nil))))
            (if
                (and
                 (not
                  (file-equal-p xdg-dir doom-dir))
                 (file-directory-p xdg-dir)
                 (file-directory-p doom-dir))
                (progn
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Detected two private configs, in %s and %s")
                    (abbreviate-file-name xdg-dir)
                    doom-dir)
                   :format nil)
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'fill
                                         (string-join
                                          (list "The second directory will be ignored, as it has lower precedence.")
                                          "\n")))
                     :format nil)))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for stale elc files..."))
           :format nil)
          (elc-check-dir doom-emacs-dir)
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for problematic git global settings..."))
           :format nil)
          (if
              (executable-find "git")
              (if
                  (= 0
                     (car
                      (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                  (progn
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                         :format nil))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                             doom-doctor--warnings)))
                    (let
                        ((doom-print-indent
                          (+
                           (if t doom-print-indent-increment 0)
                           doom-print-indent)))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'fill
                                           (string-join
                                            (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                            "\n")))
                       :format nil))))
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                 :format nil))
              (setq doom-doctor--errors
                    (cons
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                     doom-doctor--errors))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking Doom Emacs..."))
           :format nil)
          (condition-case ex
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (let
                    ((noninteractive nil)
                     kill-emacs-query-functions kill-emacs-hook)
                  (defvar doom-reloading-p nil)
                  (if
                      (file-exists-p doom-autoloads-file)
                      nil
                    (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                  (require 'doom-start)
                  (doom-initialize-packages))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'success "Initialized Doom Emacs %s")
                  doom-version)
                 :format nil)
                (doom-print
                 (doom-print--format
                  (if
                      (hash-table-p doom-modules)
                      (doom-print--class 'success "Detected %d modules"
                                         (hash-table-count doom-modules))
                    (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                 :format nil)
                (doom-print
                 (doom-print--format
                  (doom-print--class 'success "Detected %d packages")
                  (length doom-packages))
                 :format nil)
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking Doom core for irregularities..."))
                 :format nil)
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (let
                      ((--dolist-tail--
                        (list "savehist" "projectile.cache")))
                    (while --dolist-tail--
                      (let
                          ((file
                            (car --dolist-tail--)))
                        (let*
                            ((size
                              (and t
                                   (condition-case nil
                                       (progn
                                         (doom-file-size file doom-cache-dir))
                                     (error nil)))))
                          (if size
                              (if
                                  (> size 1048576)
                                  (progn
                                    (progn
                                      (if inhibit-message nil
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                             (/ size 1024 1024.0)))
                                         :format nil))
                                      (setq doom-doctor--warnings
                                            (cons
                                             (doom-print--format
                                              (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                 (/ size 1024 1024.0)))
                                             doom-doctor--warnings)))
                                    (let
                                        ((doom-print-indent
                                          (+
                                           (if t doom-print-indent-increment 0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'fill
                                                           (string-join
                                                            (list "Consider deleting it from your system (manually)")
                                                            "\n")))
                                       :format nil))))
                            nil))
                        (setq --dolist-tail--
                              (cdr --dolist-tail--)))))
                  (if
                      (condition-case nil
                          (progn
                            (executable-find doom-projectile-fd-binary))
                        (error nil))
                      nil
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                         :format nil))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                             doom-doctor--warnings))))
                  (require 'projectile)
                  (if
                      (projectile-project-root "~")
                      (progn
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                             :format nil))
                          (setq doom-doctor--warnings
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                 doom-doctor--warnings)))
                        (let
                            ((doom-print-indent
                              (+
                               (if t doom-print-indent-increment 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'fill
                                               (string-join
                                                (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                "\n")))
                           :format nil))))
                  (if
                      (and
                       (file-equal-p doom-user-dir "~/.config/doom")
                       (file-directory-p "~/.doom.d"))
                      (progn
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                          (doom-print--class 'path doom-user-dir))
                         :format nil)
                        (let
                            ((doom-print-indent
                              (+
                               (if t doom-print-indent-increment 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'fill
                                               (string-join
                                                (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                "\n")))
                           :format nil))))
                  (if
                      (not
                       (executable-find "fc-list"))
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                           :format nil))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                               doom-doctor--warnings)))
                    (if
                        (and
                         (cond
                          ((eq system-type 'gnu/linux)
                           (let nil
                             (concat
                              (or
                               (getenv "XDG_DATA_HOME")
                               "~/.local/share")
                              "/fonts/")))
                          ((eq system-type 'darwin)
                           (let nil "~/Library/Fonts/")))
                         (require 'all-the-icons nil t))
                        (progn
                          (let
                              ((temp-buffer
                                (generate-new-buffer " *temp*" t)))
                            (save-current-buffer
                              (set-buffer temp-buffer)
                              (unwind-protect
                                  (progn
                                    (let
                                        ((errors 0))
                                      (let*
                                          ((output
                                            (doom-call-process "fc-list" "" "file"))
                                           (status
                                            (if output
                                                (car-safe
                                                 (prog1 output
                                                   (setq output
                                                         (cdr output))))
                                              (signal 'wrong-number-of-arguments
                                                      (list
                                                       '(status . output)
                                                       (length output))))))
                                        (if
                                            (not
                                             (= 0 status))
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                             :format nil)
                                          (insert
                                           (cdr
                                            (doom-call-process "fc-list" "" "file")))
                                          (let
                                              ((--dolist-tail-- all-the-icons-font-names))
                                            (while --dolist-tail--
                                              (let
                                                  ((font
                                                    (car --dolist-tail--)))
                                                (if
                                                    (save-excursion
                                                      (re-search-backward font nil t))
                                                    (doom-print
                                                     (doom-print--format
                                                      (doom-print--style 'green "Found font %s" font))
                                                     :format nil)
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'warn "Warning: couldn't find %S font")
                                                    font)
                                                   :format nil))
                                                (setq --dolist-tail--
                                                      (cdr --dolist-tail--)))))
                                          (if
                                              (> errors 0)
                                              (progn
                                                (let
                                                    ((doom-print-indent
                                                      (+
                                                       (if t doom-print-indent-increment 0)
                                                       doom-print-indent)))
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'fill
                                                                       (string-join
                                                                        (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                        "\n")))
                                                   :format nil))))))))
                                (and
                                 (buffer-name temp-buffer)
                                 (kill-buffer temp-buffer)))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                 :format nil)
                (if
                    (file-directory-p doom-user-dir)
                    (progn
                      (let
                          ((doom-print-indent
                            (+
                             (if t doom-print-indent-increment 0)
                             doom-print-indent)))
                        (elc-check-dir doom-user-dir))))
                (if doom-modules
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'start "Checking your enabled modules..."))
                       :format nil)
                      (advice-add #'require :around #'doom-shut-up-a)
                      (maphash
                       #'(lambda
                           (key plist)
                           (let
                               (doom-local-errors doom-local-warnings)
                             (let
                                 (doom-doctor--errors doom-doctor--warnings)
                               (condition-case ex
                                   (let
                                       ((doctor-file
                                         (doom-module-path
                                          (car key)
                                          (cdr key)
                                          "doctor.el"))
                                        (packages-file
                                         (doom-module-path
                                          (car key)
                                          (cdr key)
                                          "packages.el")))
                                     (let*
                                         ((doom-output-indent 6)
                                          (--cl-var--
                                           (let
                                               (doom-packages doom-disabled-packages)
                                             (load packages-file 'noerror 'nomessage)
                                             (mapcar #'car doom-packages)))
                                          (name nil))
                                       (while
                                           (consp --cl-var--)
                                         (setq name
                                               (car --cl-var--))
                                         (if
                                             (or
                                              (doom-package-get name :disable)
                                              (eval
                                               (doom-package-get name :ignore))
                                              (plist-member
                                               (doom-package-get name :recipe)
                                               :local-repo)
                                              (locate-library
                                               (symbol-name name))
                                              (doom-package-built-in-p name)
                                              (doom-package-installed-p name))
                                             (progn)
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Missing emacs package: %S")
                                             name)
                                            :format nil))
                                         (setq --cl-var--
                                               (cdr --cl-var--)))
                                       nil)
                                     (let
                                         ((inhibit-message t))
                                       (load doctor-file 'noerror 'nomessage)))
                                 ((debug file-missing)
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "%s"
                                                           (error-message-string ex)))
                                       :format nil))
                                    (setq doom-doctor--errors
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'error "%s"
                                                               (error-message-string ex)))
                                           doom-doctor--errors))))
                                 ((debug error)
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "Syntax error: %s" ex))
                                       :format nil))
                                    (setq doom-doctor--errors
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'error "Syntax error: %s" ex))
                                           doom-doctor--errors)))))
                               (if
                                   (or doom-doctor--errors doom-doctor--warnings)
                                   (progn
                                     (let
                                         ((doom-print-indent
                                           (+
                                            (if t doom-print-indent-increment 0)
                                            doom-print-indent)))
                                       (doom-print
                                        (doom-print--format
                                         (doom-print--class 'start
                                                            (doom-print--style 'bold "%s %s"))
                                         (car key)
                                         (cdr key))
                                        :format nil)
                                       (doom-print
                                        (doom-print--format "%s"
                                                            (string-join
                                                             (append doom-doctor--errors doom-doctor--warnings)
                                                             "\n"))
                                        :format nil))
                                     (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                             (setq doom-doctor--errors
                                   (append doom-doctor--errors doom-local-errors))
                             (setq doom-doctor--warnings
                                   (append doom-doctor--warnings doom-local-warnings))))
                       doom-modules))))
            ((debug error)
             (progn
               (if inhibit-message nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                      (or
                                       (cdr-safe ex)
                                       (car ex))))
                  :format nil))
               (setq doom-doctor--warnings
                     (cons
                      (doom-print--format
                       (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                          (or
                                           (cdr-safe ex)
                                           (car ex))))
                      doom-doctor--warnings)))
             (setq doom-modules nil)))
          (terpri)
          (let
              ((--dolist-tail--
                (list
                 (list doom-doctor--warnings "warning" 'yellow)
                 (list doom-doctor--errors "error" 'red))))
            (while --dolist-tail--
              (let
                  ((msg
                    (car --dolist-tail--)))
                (if
                    (car msg)
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'color
                                           (nth 2 msg)
                                           (if
                                               (cdr msg)
                                               "There are %d %ss!" "There is %d %s!")
                                           (length
                                            (car msg))
                                           (nth 1 msg)))
                       :format nil)))
                (setq --dolist-tail--
                      (cdr --dolist-tail--)))))
          (if
              (or doom-doctor--errors doom-doctor--warnings)
              nil
            (doom-print
             (doom-print--format
              (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
             :format nil))
          (exit! :pager\? "+G"))))))
  (x2 #s(doom-cli
         ("doom" "doctor")
         nil
         (("SUMMARY" . "Diagnoses common issues on your system.")
          ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
         nil nil nil nil
         (:benchmark nil :prefix
                     (doom)
                     :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
         (closure
          (t)
          (cli alist)
          (let nil
            (doom-print
             (doom-print--format "The doctor will see you now...\n")
             :format nil)
            (doom-print
             (doom-print--format
              (doom-print--class 'start "Checking your Emacs version..."))
             :format nil)
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (cond
               ((string= ".50"
                         (substring emacs-version -3))
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                     :format nil))
                  (setq doom-doctor--errors
                        (cons
                         (doom-print--format
                          (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                         doom-doctor--errors)))
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'fill
                                       (string-join
                                        (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                        "\n")))
                   :format nil)))
               ((> emacs-major-version 28)
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'warn "Emacs %s detected" emacs-version))
                     :format nil))
                  (setq doom-doctor--warnings
                        (cons
                         (doom-print--format
                          (doom-print--class 'warn "Emacs %s detected" emacs-version))
                         doom-doctor--warnings)))
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'fill
                                       (string-join
                                        (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                        "\n")))
                   :format nil)))
               ((< emacs-major-version 27)
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                     :format nil))
                  (setq doom-doctor--errors
                        (cons
                         (doom-print--format
                          (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                         doom-doctor--errors))))))
            (doom-print
             (doom-print--format
              (doom-print--class 'start "Checking for Doom's prerequisites..."))
             :format nil)
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (if
                  (not
                   (executable-find "git"))
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                       :format nil))
                    (setq doom-doctor--errors
                          (cons
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                           doom-doctor--errors)))
                (let
                    ((save-match-data-internal
                      (match-data)))
                  (unwind-protect
                      (progn
                        (let*
                            ((version
                              (cdr
                               (doom-call-process "git" "version")))
                             (version
                              (and
                               (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                               (match-string 1 version))))
                          (if version
                              (if
                                  (version< version "2.23")
                                  (progn
                                    (progn
                                      (if inhibit-message nil
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                         :format nil))
                                      (setq doom-doctor--errors
                                            (cons
                                             (doom-print--format
                                              (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                             doom-doctor--errors)))))
                            (progn
                              (if inhibit-message nil
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                 :format nil))
                              (setq doom-doctor--warnings
                                    (cons
                                     (doom-print--format
                                      (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                     doom-doctor--warnings))))))
                    (set-match-data save-match-data-internal 'evaporate))))
              (if
                  (executable-find "rg")
                  nil
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                     :format nil))
                  (setq doom-doctor--errors
                        (cons
                         (doom-print--format
                          (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                         doom-doctor--errors)))))
            (doom-print
             (doom-print--format
              (doom-print--class 'start "Checking for Emacs config conflicts..."))
             :format nil)
            (if
                (file-exists-p "~/.emacs")
                (progn
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                       :format nil))
                    (setq doom-doctor--warnings
                          (cons
                           (doom-print--format
                            (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                           doom-doctor--warnings)))
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'fill
                                         (string-join
                                          (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                          "\n")))
                     :format nil))))
            (doom-print
             (doom-print--format
              (doom-print--class 'start "Checking for great Emacs features..."))
             :format nil)
            (if
                (functionp 'json-serialize)
                nil
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Emacs was not built with native JSON support"))
                   :format nil))
                (setq doom-doctor--warnings
                      (cons
                       (doom-print--format
                        (doom-print--class 'warn "Emacs was not built with native JSON support"))
                       doom-doctor--warnings)))
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'fill
                                     (string-join
                                      (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                      "\n")))
                 :format nil)))
            (if
                (featurep 'native-compile)
                nil
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Emacs was not built with native compilation support"))
                   :format nil))
                (setq doom-doctor--warnings
                      (cons
                       (doom-print--format
                        (doom-print--class 'warn "Emacs was not built with native compilation support"))
                       doom-doctor--warnings)))
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'fill
                                     (string-join
                                      (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                      "\n")))
                 :format nil)))
            (doom-print
             (doom-print--format
              (doom-print--class 'start "Checking for private config conflicts..."))
             :format nil)
            (let*
                ((xdg-dir
                  (concat
                   (or
                    (getenv "XDG_CONFIG_HOME")
                    "~/.config")
                   "/doom/"))
                 (doom-dir
                  (or
                   (getenv "DOOMDIR")
                   "~/.doom.d/"))
                 (dir
                  (if
                      (file-directory-p xdg-dir)
                      xdg-dir doom-dir)))
              (if
                  (file-equal-p dir doom-emacs-dir)
                  (progn
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                         (doom-print--class 'path dir)))
                     :format nil)
                    (let
                        ((doom-print-indent
                          (+
                           (if t doom-print-indent-increment 0)
                           doom-print-indent)))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'fill
                                           (string-join
                                            (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                            "\n")))
                       :format nil))))
              (if
                  (and
                   (not
                    (file-equal-p xdg-dir doom-dir))
                   (file-directory-p xdg-dir)
                   (file-directory-p doom-dir))
                  (progn
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'warn "Detected two private configs, in %s and %s")
                      (abbreviate-file-name xdg-dir)
                      doom-dir)
                     :format nil)
                    (let
                        ((doom-print-indent
                          (+
                           (if t doom-print-indent-increment 0)
                           doom-print-indent)))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'fill
                                           (string-join
                                            (list "The second directory will be ignored, as it has lower precedence.")
                                            "\n")))
                       :format nil)))))
            (doom-print
             (doom-print--format
              (doom-print--class 'start "Checking for stale elc files..."))
             :format nil)
            (elc-check-dir doom-emacs-dir)
            (doom-print
             (doom-print--format
              (doom-print--class 'start "Checking for problematic git global settings..."))
             :format nil)
            (if
                (executable-find "git")
                (if
                    (= 0
                       (car
                        (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                    (progn
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                           :format nil))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                               doom-doctor--warnings)))
                      (let
                          ((doom-print-indent
                            (+
                             (if t doom-print-indent-increment 0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'fill
                                             (string-join
                                              (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                              "\n")))
                         :format nil))))
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                       doom-doctor--errors))))
            (doom-print
             (doom-print--format
              (doom-print--class 'start "Checking Doom Emacs..."))
             :format nil)
            (condition-case ex
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (let
                      ((noninteractive nil)
                       kill-emacs-query-functions kill-emacs-hook)
                    (defvar doom-reloading-p nil)
                    (if
                        (file-exists-p doom-autoloads-file)
                        nil
                      (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                    (require 'doom-start)
                    (doom-initialize-packages))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'success "Initialized Doom Emacs %s")
                    doom-version)
                   :format nil)
                  (doom-print
                   (doom-print--format
                    (if
                        (hash-table-p doom-modules)
                        (doom-print--class 'success "Detected %d modules"
                                           (hash-table-count doom-modules))
                      (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                   :format nil)
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'success "Detected %d packages")
                    (length doom-packages))
                   :format nil)
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'start "Checking Doom core for irregularities..."))
                   :format nil)
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (let
                        ((--dolist-tail--
                          (list "savehist" "projectile.cache")))
                      (while --dolist-tail--
                        (let
                            ((file
                              (car --dolist-tail--)))
                          (let*
                              ((size
                                (and t
                                     (condition-case nil
                                         (progn
                                           (doom-file-size file doom-cache-dir))
                                       (error nil)))))
                            (if size
                                (if
                                    (> size 1048576)
                                    (progn
                                      (progn
                                        (if inhibit-message nil
                                          (doom-print
                                           (doom-print--format
                                            (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                               (/ size 1024 1024.0)))
                                           :format nil))
                                        (setq doom-doctor--warnings
                                              (cons
                                               (doom-print--format
                                                (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                   (/ size 1024 1024.0)))
                                               doom-doctor--warnings)))
                                      (let
                                          ((doom-print-indent
                                            (+
                                             (if t doom-print-indent-increment 0)
                                             doom-print-indent)))
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'fill
                                                             (string-join
                                                              (list "Consider deleting it from your system (manually)")
                                                              "\n")))
                                         :format nil))))
                              nil))
                          (setq --dolist-tail--
                                (cdr --dolist-tail--)))))
                    (if
                        (condition-case nil
                            (progn
                              (executable-find doom-projectile-fd-binary))
                          (error nil))
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                           :format nil))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                               doom-doctor--warnings))))
                    (require 'projectile)
                    (if
                        (projectile-project-root "~")
                        (progn
                          (progn
                            (if inhibit-message nil
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                               :format nil))
                            (setq doom-doctor--warnings
                                  (cons
                                   (doom-print--format
                                    (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                   doom-doctor--warnings)))
                          (let
                              ((doom-print-indent
                                (+
                                 (if t doom-print-indent-increment 0)
                                 doom-print-indent)))
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'fill
                                                 (string-join
                                                  (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                  "\n")))
                             :format nil))))
                    (if
                        (and
                         (file-equal-p doom-user-dir "~/.config/doom")
                         (file-directory-p "~/.doom.d"))
                        (progn
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                            (doom-print--class 'path doom-user-dir))
                           :format nil)
                          (let
                              ((doom-print-indent
                                (+
                                 (if t doom-print-indent-increment 0)
                                 doom-print-indent)))
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'fill
                                                 (string-join
                                                  (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                  "\n")))
                             :format nil))))
                    (if
                        (not
                         (executable-find "fc-list"))
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                             :format nil))
                          (setq doom-doctor--warnings
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                 doom-doctor--warnings)))
                      (if
                          (and
                           (cond
                            ((eq system-type 'gnu/linux)
                             (let nil
                               (concat
                                (or
                                 (getenv "XDG_DATA_HOME")
                                 "~/.local/share")
                                "/fonts/")))
                            ((eq system-type 'darwin)
                             (let nil "~/Library/Fonts/")))
                           (require 'all-the-icons nil t))
                          (progn
                            (let
                                ((temp-buffer
                                  (generate-new-buffer " *temp*" t)))
                              (save-current-buffer
                                (set-buffer temp-buffer)
                                (unwind-protect
                                    (progn
                                      (let
                                          ((errors 0))
                                        (let*
                                            ((output
                                              (doom-call-process "fc-list" "" "file"))
                                             (status
                                              (if output
                                                  (car-safe
                                                   (prog1 output
                                                     (setq output
                                                           (cdr output))))
                                                (signal 'wrong-number-of-arguments
                                                        (list
                                                         '(status . output)
                                                         (length output))))))
                                          (if
                                              (not
                                               (= 0 status))
                                              (doom-print
                                               (doom-print--format
                                                (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                               :format nil)
                                            (insert
                                             (cdr
                                              (doom-call-process "fc-list" "" "file")))
                                            (let
                                                ((--dolist-tail-- all-the-icons-font-names))
                                              (while --dolist-tail--
                                                (let
                                                    ((font
                                                      (car --dolist-tail--)))
                                                  (if
                                                      (save-excursion
                                                        (re-search-backward font nil t))
                                                      (doom-print
                                                       (doom-print--format
                                                        (doom-print--style 'green "Found font %s" font))
                                                       :format nil)
                                                    (doom-print
                                                     (doom-print--format
                                                      (doom-print--class 'warn "Warning: couldn't find %S font")
                                                      font)
                                                     :format nil))
                                                  (setq --dolist-tail--
                                                        (cdr --dolist-tail--)))))
                                            (if
                                                (> errors 0)
                                                (progn
                                                  (let
                                                      ((doom-print-indent
                                                        (+
                                                         (if t doom-print-indent-increment 0)
                                                         doom-print-indent)))
                                                    (doom-print
                                                     (doom-print--format
                                                      (doom-print--class 'fill
                                                                         (string-join
                                                                          (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                          "\n")))
                                                     :format nil))))))))
                                  (and
                                   (buffer-name temp-buffer)
                                   (kill-buffer temp-buffer)))))))))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                   :format nil)
                  (if
                      (file-directory-p doom-user-dir)
                      (progn
                        (let
                            ((doom-print-indent
                              (+
                               (if t doom-print-indent-increment 0)
                               doom-print-indent)))
                          (elc-check-dir doom-user-dir))))
                  (if doom-modules
                      (progn
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'start "Checking your enabled modules..."))
                         :format nil)
                        (advice-add #'require :around #'doom-shut-up-a)
                        (maphash
                         #'(lambda
                             (key plist)
                             (let
                                 (doom-local-errors doom-local-warnings)
                               (let
                                   (doom-doctor--errors doom-doctor--warnings)
                                 (condition-case ex
                                     (let
                                         ((doctor-file
                                           (doom-module-path
                                            (car key)
                                            (cdr key)
                                            "doctor.el"))
                                          (packages-file
                                           (doom-module-path
                                            (car key)
                                            (cdr key)
                                            "packages.el")))
                                       (let*
                                           ((doom-output-indent 6)
                                            (--cl-var--
                                             (let
                                                 (doom-packages doom-disabled-packages)
                                               (load packages-file 'noerror 'nomessage)
                                               (mapcar #'car doom-packages)))
                                            (name nil))
                                         (while
                                             (consp --cl-var--)
                                           (setq name
                                                 (car --cl-var--))
                                           (if
                                               (or
                                                (doom-package-get name :disable)
                                                (eval
                                                 (doom-package-get name :ignore))
                                                (plist-member
                                                 (doom-package-get name :recipe)
                                                 :local-repo)
                                                (locate-library
                                                 (symbol-name name))
                                                (doom-package-built-in-p name)
                                                (doom-package-installed-p name))
                                               (progn)
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'error "Missing emacs package: %S")
                                               name)
                                              :format nil))
                                           (setq --cl-var--
                                                 (cdr --cl-var--)))
                                         nil)
                                       (let
                                           ((inhibit-message t))
                                         (load doctor-file 'noerror 'nomessage)))
                                   ((debug file-missing)
                                    (progn
                                      (if inhibit-message nil
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'error "%s"
                                                             (error-message-string ex)))
                                         :format nil))
                                      (setq doom-doctor--errors
                                            (cons
                                             (doom-print--format
                                              (doom-print--class 'error "%s"
                                                                 (error-message-string ex)))
                                             doom-doctor--errors))))
                                   ((debug error)
                                    (progn
                                      (if inhibit-message nil
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'error "Syntax error: %s" ex))
                                         :format nil))
                                      (setq doom-doctor--errors
                                            (cons
                                             (doom-print--format
                                              (doom-print--class 'error "Syntax error: %s" ex))
                                             doom-doctor--errors)))))
                                 (if
                                     (or doom-doctor--errors doom-doctor--warnings)
                                     (progn
                                       (let
                                           ((doom-print-indent
                                             (+
                                              (if t doom-print-indent-increment 0)
                                              doom-print-indent)))
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--class 'start
                                                              (doom-print--style 'bold "%s %s"))
                                           (car key)
                                           (cdr key))
                                          :format nil)
                                         (doom-print
                                          (doom-print--format "%s"
                                                              (string-join
                                                               (append doom-doctor--errors doom-doctor--warnings)
                                                               "\n"))
                                          :format nil))
                                       (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                               (setq doom-doctor--errors
                                     (append doom-doctor--errors doom-local-errors))
                               (setq doom-doctor--warnings
                                     (append doom-doctor--warnings doom-local-warnings))))
                         doom-modules))))
              ((debug error)
               (progn
                 (if inhibit-message nil
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                        (or
                                         (cdr-safe ex)
                                         (car ex))))
                    :format nil))
                 (setq doom-doctor--warnings
                       (cons
                        (doom-print--format
                         (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                            (or
                                             (cdr-safe ex)
                                             (car ex))))
                        doom-doctor--warnings)))
               (setq doom-modules nil)))
            (terpri)
            (let
                ((--dolist-tail--
                  (list
                   (list doom-doctor--warnings "warning" 'yellow)
                   (list doom-doctor--errors "error" 'red))))
              (while --dolist-tail--
                (let
                    ((msg
                      (car --dolist-tail--)))
                  (if
                      (car msg)
                      (progn
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'color
                                             (nth 2 msg)
                                             (if
                                                 (cdr msg)
                                                 "There are %d %ss!" "There is %d %s!")
                                             (length
                                              (car msg))
                                             (nth 1 msg)))
                         :format nil)))
                  (setq --dolist-tail--
                        (cdr --dolist-tail--)))))
            (if
                (or doom-doctor--errors doom-doctor--warnings)
                nil
              (doom-print
               (doom-print--format
                (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
               :format nil))
            (exit! :pager\? "+G")))))
  (x3 . #s(doom-cli
           ("doom" "doctor")
           nil
           (("SUMMARY" . "Diagnoses common issues on your system.")
            ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
           nil nil nil nil
           (:benchmark nil :prefix
                       (doom)
                       :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
           (closure
            (t)
            (cli alist)
            (let nil
              (doom-print
               (doom-print--format "The doctor will see you now...\n")
               :format nil)
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking your Emacs version..."))
               :format nil)
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (cond
                 ((string= ".50"
                           (substring emacs-version -3))
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                       :format nil))
                    (setq doom-doctor--errors
                          (cons
                           (doom-print--format
                            (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                           doom-doctor--errors)))
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'fill
                                         (string-join
                                          (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                          "\n")))
                     :format nil)))
                 ((> emacs-major-version 28)
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Emacs %s detected" emacs-version))
                       :format nil))
                    (setq doom-doctor--warnings
                          (cons
                           (doom-print--format
                            (doom-print--class 'warn "Emacs %s detected" emacs-version))
                           doom-doctor--warnings)))
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'fill
                                         (string-join
                                          (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                          "\n")))
                     :format nil)))
                 ((< emacs-major-version 27)
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                       :format nil))
                    (setq doom-doctor--errors
                          (cons
                           (doom-print--format
                            (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                           doom-doctor--errors))))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for Doom's prerequisites..."))
               :format nil)
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (if
                    (not
                     (executable-find "git"))
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                         :format nil))
                      (setq doom-doctor--errors
                            (cons
                             (doom-print--format
                              (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                             doom-doctor--errors)))
                  (let
                      ((save-match-data-internal
                        (match-data)))
                    (unwind-protect
                        (progn
                          (let*
                              ((version
                                (cdr
                                 (doom-call-process "git" "version")))
                               (version
                                (and
                                 (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                 (match-string 1 version))))
                            (if version
                                (if
                                    (version< version "2.23")
                                    (progn
                                      (progn
                                        (if inhibit-message nil
                                          (doom-print
                                           (doom-print--format
                                            (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                           :format nil))
                                        (setq doom-doctor--errors
                                              (cons
                                               (doom-print--format
                                                (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                               doom-doctor--errors)))))
                              (progn
                                (if inhibit-message nil
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                   :format nil))
                                (setq doom-doctor--warnings
                                      (cons
                                       (doom-print--format
                                        (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                       doom-doctor--warnings))))))
                      (set-match-data save-match-data-internal 'evaporate))))
                (if
                    (executable-find "rg")
                    nil
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                       :format nil))
                    (setq doom-doctor--errors
                          (cons
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                           doom-doctor--errors)))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for Emacs config conflicts..."))
               :format nil)
              (if
                  (file-exists-p "~/.emacs")
                  (progn
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                         :format nil))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                             doom-doctor--warnings)))
                    (let
                        ((doom-print-indent
                          (+
                           (if t doom-print-indent-increment 0)
                           doom-print-indent)))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'fill
                                           (string-join
                                            (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                            "\n")))
                       :format nil))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for great Emacs features..."))
               :format nil)
              (if
                  (functionp 'json-serialize)
                  nil
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'warn "Emacs was not built with native JSON support"))
                     :format nil))
                  (setq doom-doctor--warnings
                        (cons
                         (doom-print--format
                          (doom-print--class 'warn "Emacs was not built with native JSON support"))
                         doom-doctor--warnings)))
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'fill
                                       (string-join
                                        (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                        "\n")))
                   :format nil)))
              (if
                  (featurep 'native-compile)
                  nil
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'warn "Emacs was not built with native compilation support"))
                     :format nil))
                  (setq doom-doctor--warnings
                        (cons
                         (doom-print--format
                          (doom-print--class 'warn "Emacs was not built with native compilation support"))
                         doom-doctor--warnings)))
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'fill
                                       (string-join
                                        (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                        "\n")))
                   :format nil)))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for private config conflicts..."))
               :format nil)
              (let*
                  ((xdg-dir
                    (concat
                     (or
                      (getenv "XDG_CONFIG_HOME")
                      "~/.config")
                     "/doom/"))
                   (doom-dir
                    (or
                     (getenv "DOOMDIR")
                     "~/.doom.d/"))
                   (dir
                    (if
                        (file-directory-p xdg-dir)
                        xdg-dir doom-dir)))
                (if
                    (file-equal-p dir doom-emacs-dir)
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                           (doom-print--class 'path dir)))
                       :format nil)
                      (let
                          ((doom-print-indent
                            (+
                             (if t doom-print-indent-increment 0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'fill
                                             (string-join
                                              (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                              "\n")))
                         :format nil))))
                (if
                    (and
                     (not
                      (file-equal-p xdg-dir doom-dir))
                     (file-directory-p xdg-dir)
                     (file-directory-p doom-dir))
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Detected two private configs, in %s and %s")
                        (abbreviate-file-name xdg-dir)
                        doom-dir)
                       :format nil)
                      (let
                          ((doom-print-indent
                            (+
                             (if t doom-print-indent-increment 0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'fill
                                             (string-join
                                              (list "The second directory will be ignored, as it has lower precedence.")
                                              "\n")))
                         :format nil)))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for stale elc files..."))
               :format nil)
              (elc-check-dir doom-emacs-dir)
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for problematic git global settings..."))
               :format nil)
              (if
                  (executable-find "git")
                  (if
                      (= 0
                         (car
                          (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                      (progn
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                             :format nil))
                          (setq doom-doctor--warnings
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                 doom-doctor--warnings)))
                        (let
                            ((doom-print-indent
                              (+
                               (if t doom-print-indent-increment 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'fill
                                               (string-join
                                                (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                                "\n")))
                           :format nil))))
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                     :format nil))
                  (setq doom-doctor--errors
                        (cons
                         (doom-print--format
                          (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                         doom-doctor--errors))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking Doom Emacs..."))
               :format nil)
              (condition-case ex
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (let
                        ((noninteractive nil)
                         kill-emacs-query-functions kill-emacs-hook)
                      (defvar doom-reloading-p nil)
                      (if
                          (file-exists-p doom-autoloads-file)
                          nil
                        (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                      (require 'doom-start)
                      (doom-initialize-packages))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'success "Initialized Doom Emacs %s")
                      doom-version)
                     :format nil)
                    (doom-print
                     (doom-print--format
                      (if
                          (hash-table-p doom-modules)
                          (doom-print--class 'success "Detected %d modules"
                                             (hash-table-count doom-modules))
                        (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                     :format nil)
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'success "Detected %d packages")
                      (length doom-packages))
                     :format nil)
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'start "Checking Doom core for irregularities..."))
                     :format nil)
                    (let
                        ((doom-print-indent
                          (+
                           (if t doom-print-indent-increment 0)
                           doom-print-indent)))
                      (let
                          ((--dolist-tail--
                            (list "savehist" "projectile.cache")))
                        (while --dolist-tail--
                          (let
                              ((file
                                (car --dolist-tail--)))
                            (let*
                                ((size
                                  (and t
                                       (condition-case nil
                                           (progn
                                             (doom-file-size file doom-cache-dir))
                                         (error nil)))))
                              (if size
                                  (if
                                      (> size 1048576)
                                      (progn
                                        (progn
                                          (if inhibit-message nil
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                 (/ size 1024 1024.0)))
                                             :format nil))
                                          (setq doom-doctor--warnings
                                                (cons
                                                 (doom-print--format
                                                  (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                     (/ size 1024 1024.0)))
                                                 doom-doctor--warnings)))
                                        (let
                                            ((doom-print-indent
                                              (+
                                               (if t doom-print-indent-increment 0)
                                               doom-print-indent)))
                                          (doom-print
                                           (doom-print--format
                                            (doom-print--class 'fill
                                                               (string-join
                                                                (list "Consider deleting it from your system (manually)")
                                                                "\n")))
                                           :format nil))))
                                nil))
                            (setq --dolist-tail--
                                  (cdr --dolist-tail--)))))
                      (if
                          (condition-case nil
                              (progn
                                (executable-find doom-projectile-fd-binary))
                            (error nil))
                          nil
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                             :format nil))
                          (setq doom-doctor--warnings
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                 doom-doctor--warnings))))
                      (require 'projectile)
                      (if
                          (projectile-project-root "~")
                          (progn
                            (progn
                              (if inhibit-message nil
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                 :format nil))
                              (setq doom-doctor--warnings
                                    (cons
                                     (doom-print--format
                                      (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                     doom-doctor--warnings)))
                            (let
                                ((doom-print-indent
                                  (+
                                   (if t doom-print-indent-increment 0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'fill
                                                   (string-join
                                                    (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                    "\n")))
                               :format nil))))
                      (if
                          (and
                           (file-equal-p doom-user-dir "~/.config/doom")
                           (file-directory-p "~/.doom.d"))
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                              (doom-print--class 'path doom-user-dir))
                             :format nil)
                            (let
                                ((doom-print-indent
                                  (+
                                   (if t doom-print-indent-increment 0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'fill
                                                   (string-join
                                                    (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                    "\n")))
                               :format nil))))
                      (if
                          (not
                           (executable-find "fc-list"))
                          (progn
                            (if inhibit-message nil
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                               :format nil))
                            (setq doom-doctor--warnings
                                  (cons
                                   (doom-print--format
                                    (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                   doom-doctor--warnings)))
                        (if
                            (and
                             (cond
                              ((eq system-type 'gnu/linux)
                               (let nil
                                 (concat
                                  (or
                                   (getenv "XDG_DATA_HOME")
                                   "~/.local/share")
                                  "/fonts/")))
                              ((eq system-type 'darwin)
                               (let nil "~/Library/Fonts/")))
                             (require 'all-the-icons nil t))
                            (progn
                              (let
                                  ((temp-buffer
                                    (generate-new-buffer " *temp*" t)))
                                (save-current-buffer
                                  (set-buffer temp-buffer)
                                  (unwind-protect
                                      (progn
                                        (let
                                            ((errors 0))
                                          (let*
                                              ((output
                                                (doom-call-process "fc-list" "" "file"))
                                               (status
                                                (if output
                                                    (car-safe
                                                     (prog1 output
                                                       (setq output
                                                             (cdr output))))
                                                  (signal 'wrong-number-of-arguments
                                                          (list
                                                           '(status . output)
                                                           (length output))))))
                                            (if
                                                (not
                                                 (= 0 status))
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                                 :format nil)
                                              (insert
                                               (cdr
                                                (doom-call-process "fc-list" "" "file")))
                                              (let
                                                  ((--dolist-tail-- all-the-icons-font-names))
                                                (while --dolist-tail--
                                                  (let
                                                      ((font
                                                        (car --dolist-tail--)))
                                                    (if
                                                        (save-excursion
                                                          (re-search-backward font nil t))
                                                        (doom-print
                                                         (doom-print--format
                                                          (doom-print--style 'green "Found font %s" font))
                                                         :format nil)
                                                      (doom-print
                                                       (doom-print--format
                                                        (doom-print--class 'warn "Warning: couldn't find %S font")
                                                        font)
                                                       :format nil))
                                                    (setq --dolist-tail--
                                                          (cdr --dolist-tail--)))))
                                              (if
                                                  (> errors 0)
                                                  (progn
                                                    (let
                                                        ((doom-print-indent
                                                          (+
                                                           (if t doom-print-indent-increment 0)
                                                           doom-print-indent)))
                                                      (doom-print
                                                       (doom-print--format
                                                        (doom-print--class 'fill
                                                                           (string-join
                                                                            (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                            "\n")))
                                                       :format nil))))))))
                                    (and
                                     (buffer-name temp-buffer)
                                     (kill-buffer temp-buffer)))))))))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                     :format nil)
                    (if
                        (file-directory-p doom-user-dir)
                        (progn
                          (let
                              ((doom-print-indent
                                (+
                                 (if t doom-print-indent-increment 0)
                                 doom-print-indent)))
                            (elc-check-dir doom-user-dir))))
                    (if doom-modules
                        (progn
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'start "Checking your enabled modules..."))
                           :format nil)
                          (advice-add #'require :around #'doom-shut-up-a)
                          (maphash
                           #'(lambda
                               (key plist)
                               (let
                                   (doom-local-errors doom-local-warnings)
                                 (let
                                     (doom-doctor--errors doom-doctor--warnings)
                                   (condition-case ex
                                       (let
                                           ((doctor-file
                                             (doom-module-path
                                              (car key)
                                              (cdr key)
                                              "doctor.el"))
                                            (packages-file
                                             (doom-module-path
                                              (car key)
                                              (cdr key)
                                              "packages.el")))
                                         (let*
                                             ((doom-output-indent 6)
                                              (--cl-var--
                                               (let
                                                   (doom-packages doom-disabled-packages)
                                                 (load packages-file 'noerror 'nomessage)
                                                 (mapcar #'car doom-packages)))
                                              (name nil))
                                           (while
                                               (consp --cl-var--)
                                             (setq name
                                                   (car --cl-var--))
                                             (if
                                                 (or
                                                  (doom-package-get name :disable)
                                                  (eval
                                                   (doom-package-get name :ignore))
                                                  (plist-member
                                                   (doom-package-get name :recipe)
                                                   :local-repo)
                                                  (locate-library
                                                   (symbol-name name))
                                                  (doom-package-built-in-p name)
                                                  (doom-package-installed-p name))
                                                 (progn)
                                               (doom-print
                                                (doom-print--format
                                                 (doom-print--class 'error "Missing emacs package: %S")
                                                 name)
                                                :format nil))
                                             (setq --cl-var--
                                                   (cdr --cl-var--)))
                                           nil)
                                         (let
                                             ((inhibit-message t))
                                           (load doctor-file 'noerror 'nomessage)))
                                     ((debug file-missing)
                                      (progn
                                        (if inhibit-message nil
                                          (doom-print
                                           (doom-print--format
                                            (doom-print--class 'error "%s"
                                                               (error-message-string ex)))
                                           :format nil))
                                        (setq doom-doctor--errors
                                              (cons
                                               (doom-print--format
                                                (doom-print--class 'error "%s"
                                                                   (error-message-string ex)))
                                               doom-doctor--errors))))
                                     ((debug error)
                                      (progn
                                        (if inhibit-message nil
                                          (doom-print
                                           (doom-print--format
                                            (doom-print--class 'error "Syntax error: %s" ex))
                                           :format nil))
                                        (setq doom-doctor--errors
                                              (cons
                                               (doom-print--format
                                                (doom-print--class 'error "Syntax error: %s" ex))
                                               doom-doctor--errors)))))
                                   (if
                                       (or doom-doctor--errors doom-doctor--warnings)
                                       (progn
                                         (let
                                             ((doom-print-indent
                                               (+
                                                (if t doom-print-indent-increment 0)
                                                doom-print-indent)))
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'start
                                                                (doom-print--style 'bold "%s %s"))
                                             (car key)
                                             (cdr key))
                                            :format nil)
                                           (doom-print
                                            (doom-print--format "%s"
                                                                (string-join
                                                                 (append doom-doctor--errors doom-doctor--warnings)
                                                                 "\n"))
                                            :format nil))
                                         (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                                 (setq doom-doctor--errors
                                       (append doom-doctor--errors doom-local-errors))
                                 (setq doom-doctor--warnings
                                       (append doom-doctor--warnings doom-local-warnings))))
                           doom-modules))))
                ((debug error)
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                          (or
                                           (cdr-safe ex)
                                           (car ex))))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                              (or
                                               (cdr-safe ex)
                                               (car ex))))
                          doom-doctor--warnings)))
                 (setq doom-modules nil)))
              (terpri)
              (let
                  ((--dolist-tail--
                    (list
                     (list doom-doctor--warnings "warning" 'yellow)
                     (list doom-doctor--errors "error" 'red))))
                (while --dolist-tail--
                  (let
                      ((msg
                        (car --dolist-tail--)))
                    (if
                        (car msg)
                        (progn
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'color
                                               (nth 2 msg)
                                               (if
                                                   (cdr msg)
                                                   "There are %d %ss!" "There is %d %s!")
                                               (length
                                                (car msg))
                                               (nth 1 msg)))
                           :format nil)))
                    (setq --dolist-tail--
                          (cdr --dolist-tail--)))))
              (if
                  (or doom-doctor--errors doom-doctor--warnings)
                  nil
                (doom-print
                 (doom-print--format
                  (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
                 :format nil))
              (exit! :pager\? "+G")))))
  (x4)
  (cli . #s(doom-cli
            ("doom" "doctor")
            nil
            (("SUMMARY" . "Diagnoses common issues on your system.")
             ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
            nil nil nil nil
            (:benchmark nil :prefix
                        (doom)
                        :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
            (closure
             (t)
             (cli alist)
             (let nil
               (doom-print
                (doom-print--format "The doctor will see you now...\n")
                :format nil)
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking your Emacs version..."))
                :format nil)
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (cond
                  ((string= ".50"
                            (substring emacs-version -3))
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                            doom-doctor--errors)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                           "\n")))
                      :format nil)))
                  ((> emacs-major-version 28)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Emacs %s detected" emacs-version))
                        :format nil))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Emacs %s detected" emacs-version))
                            doom-doctor--warnings)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                           "\n")))
                      :format nil)))
                  ((< emacs-major-version 27)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                            doom-doctor--errors))))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for Doom's prerequisites..."))
                :format nil)
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (if
                     (not
                      (executable-find "git"))
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                          :format nil))
                       (setq doom-doctor--errors
                             (cons
                              (doom-print--format
                               (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                              doom-doctor--errors)))
                   (let
                       ((save-match-data-internal
                         (match-data)))
                     (unwind-protect
                         (progn
                           (let*
                               ((version
                                 (cdr
                                  (doom-call-process "git" "version")))
                                (version
                                 (and
                                  (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                  (match-string 1 version))))
                             (if version
                                 (if
                                     (version< version "2.23")
                                     (progn
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                doom-doctor--errors)))))
                               (progn
                                 (if inhibit-message nil
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                    :format nil))
                                 (setq doom-doctor--warnings
                                       (cons
                                        (doom-print--format
                                         (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                        doom-doctor--warnings))))))
                       (set-match-data save-match-data-internal 'evaporate))))
                 (if
                     (executable-find "rg")
                     nil
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                            doom-doctor--errors)))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for Emacs config conflicts..."))
                :format nil)
               (if
                   (file-exists-p "~/.emacs")
                   (progn
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                          :format nil))
                       (setq doom-doctor--warnings
                             (cons
                              (doom-print--format
                               (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                              doom-doctor--warnings)))
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'fill
                                            (string-join
                                             (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                             "\n")))
                        :format nil))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for great Emacs features..."))
                :format nil)
               (if
                   (functionp 'json-serialize)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native JSON support"))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native JSON support"))
                          doom-doctor--warnings)))
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'fill
                                        (string-join
                                         (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                         "\n")))
                    :format nil)))
               (if
                   (featurep 'native-compile)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native compilation support"))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native compilation support"))
                          doom-doctor--warnings)))
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'fill
                                        (string-join
                                         (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                         "\n")))
                    :format nil)))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for private config conflicts..."))
                :format nil)
               (let*
                   ((xdg-dir
                     (concat
                      (or
                       (getenv "XDG_CONFIG_HOME")
                       "~/.config")
                      "/doom/"))
                    (doom-dir
                     (or
                      (getenv "DOOMDIR")
                      "~/.doom.d/"))
                    (dir
                     (if
                         (file-directory-p xdg-dir)
                         xdg-dir doom-dir)))
                 (if
                     (file-equal-p dir doom-emacs-dir)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                            (doom-print--class 'path dir)))
                        :format nil)
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'fill
                                              (string-join
                                               (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                               "\n")))
                          :format nil))))
                 (if
                     (and
                      (not
                       (file-equal-p xdg-dir doom-dir))
                      (file-directory-p xdg-dir)
                      (file-directory-p doom-dir))
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Detected two private configs, in %s and %s")
                         (abbreviate-file-name xdg-dir)
                         doom-dir)
                        :format nil)
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'fill
                                              (string-join
                                               (list "The second directory will be ignored, as it has lower precedence.")
                                               "\n")))
                          :format nil)))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for stale elc files..."))
                :format nil)
               (elc-check-dir doom-emacs-dir)
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for problematic git global settings..."))
                :format nil)
               (if
                   (executable-find "git")
                   (if
                       (= 0
                          (car
                           (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                       (progn
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                              :format nil))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                  doom-doctor--warnings)))
                         (let
                             ((doom-print-indent
                               (+
                                (if t doom-print-indent-increment 0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'fill
                                                (string-join
                                                 (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                                 "\n")))
                            :format nil))))
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                      :format nil))
                   (setq doom-doctor--errors
                         (cons
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                          doom-doctor--errors))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking Doom Emacs..."))
                :format nil)
               (condition-case ex
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (let
                         ((noninteractive nil)
                          kill-emacs-query-functions kill-emacs-hook)
                       (defvar doom-reloading-p nil)
                       (if
                           (file-exists-p doom-autoloads-file)
                           nil
                         (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                       (require 'doom-start)
                       (doom-initialize-packages))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'success "Initialized Doom Emacs %s")
                       doom-version)
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (if
                           (hash-table-p doom-modules)
                           (doom-print--class 'success "Detected %d modules"
                                              (hash-table-count doom-modules))
                         (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'success "Detected %d packages")
                       (length doom-packages))
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'start "Checking Doom core for irregularities..."))
                      :format nil)
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (let
                           ((--dolist-tail--
                             (list "savehist" "projectile.cache")))
                         (while --dolist-tail--
                           (let
                               ((file
                                 (car --dolist-tail--)))
                             (let*
                                 ((size
                                   (and t
                                        (condition-case nil
                                            (progn
                                              (doom-file-size file doom-cache-dir))
                                          (error nil)))))
                               (if size
                                   (if
                                       (> size 1048576)
                                       (progn
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                  (/ size 1024 1024.0)))
                                              :format nil))
                                           (setq doom-doctor--warnings
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                      (/ size 1024 1024.0)))
                                                  doom-doctor--warnings)))
                                         (let
                                             ((doom-print-indent
                                               (+
                                                (if t doom-print-indent-increment 0)
                                                doom-print-indent)))
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'fill
                                                                (string-join
                                                                 (list "Consider deleting it from your system (manually)")
                                                                 "\n")))
                                            :format nil))))
                                 nil))
                             (setq --dolist-tail--
                                   (cdr --dolist-tail--)))))
                       (if
                           (condition-case nil
                               (progn
                                 (executable-find doom-projectile-fd-binary))
                             (error nil))
                           nil
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                              :format nil))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                  doom-doctor--warnings))))
                       (require 'projectile)
                       (if
                           (projectile-project-root "~")
                           (progn
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                  :format nil))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                      doom-doctor--warnings)))
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'fill
                                                    (string-join
                                                     (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                     "\n")))
                                :format nil))))
                       (if
                           (and
                            (file-equal-p doom-user-dir "~/.config/doom")
                            (file-directory-p "~/.doom.d"))
                           (progn
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                               (doom-print--class 'path doom-user-dir))
                              :format nil)
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'fill
                                                    (string-join
                                                     (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                     "\n")))
                                :format nil))))
                       (if
                           (not
                            (executable-find "fc-list"))
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                :format nil))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                    doom-doctor--warnings)))
                         (if
                             (and
                              (cond
                               ((eq system-type 'gnu/linux)
                                (let nil
                                  (concat
                                   (or
                                    (getenv "XDG_DATA_HOME")
                                    "~/.local/share")
                                   "/fonts/")))
                               ((eq system-type 'darwin)
                                (let nil "~/Library/Fonts/")))
                              (require 'all-the-icons nil t))
                             (progn
                               (let
                                   ((temp-buffer
                                     (generate-new-buffer " *temp*" t)))
                                 (save-current-buffer
                                   (set-buffer temp-buffer)
                                   (unwind-protect
                                       (progn
                                         (let
                                             ((errors 0))
                                           (let*
                                               ((output
                                                 (doom-call-process "fc-list" "" "file"))
                                                (status
                                                 (if output
                                                     (car-safe
                                                      (prog1 output
                                                        (setq output
                                                              (cdr output))))
                                                   (signal 'wrong-number-of-arguments
                                                           (list
                                                            '(status . output)
                                                            (length output))))))
                                             (if
                                                 (not
                                                  (= 0 status))
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                                  :format nil)
                                               (insert
                                                (cdr
                                                 (doom-call-process "fc-list" "" "file")))
                                               (let
                                                   ((--dolist-tail-- all-the-icons-font-names))
                                                 (while --dolist-tail--
                                                   (let
                                                       ((font
                                                         (car --dolist-tail--)))
                                                     (if
                                                         (save-excursion
                                                           (re-search-backward font nil t))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--style 'green "Found font %s" font))
                                                          :format nil)
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'warn "Warning: couldn't find %S font")
                                                         font)
                                                        :format nil))
                                                     (setq --dolist-tail--
                                                           (cdr --dolist-tail--)))))
                                               (if
                                                   (> errors 0)
                                                   (progn
                                                     (let
                                                         ((doom-print-indent
                                                           (+
                                                            (if t doom-print-indent-increment 0)
                                                            doom-print-indent)))
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'fill
                                                                            (string-join
                                                                             (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                             "\n")))
                                                        :format nil))))))))
                                     (and
                                      (buffer-name temp-buffer)
                                      (kill-buffer temp-buffer)))))))))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                      :format nil)
                     (if
                         (file-directory-p doom-user-dir)
                         (progn
                           (let
                               ((doom-print-indent
                                 (+
                                  (if t doom-print-indent-increment 0)
                                  doom-print-indent)))
                             (elc-check-dir doom-user-dir))))
                     (if doom-modules
                         (progn
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'start "Checking your enabled modules..."))
                            :format nil)
                           (advice-add #'require :around #'doom-shut-up-a)
                           (maphash
                            #'(lambda
                                (key plist)
                                (let
                                    (doom-local-errors doom-local-warnings)
                                  (let
                                      (doom-doctor--errors doom-doctor--warnings)
                                    (condition-case ex
                                        (let
                                            ((doctor-file
                                              (doom-module-path
                                               (car key)
                                               (cdr key)
                                               "doctor.el"))
                                             (packages-file
                                              (doom-module-path
                                               (car key)
                                               (cdr key)
                                               "packages.el")))
                                          (let*
                                              ((doom-output-indent 6)
                                               (--cl-var--
                                                (let
                                                    (doom-packages doom-disabled-packages)
                                                  (load packages-file 'noerror 'nomessage)
                                                  (mapcar #'car doom-packages)))
                                               (name nil))
                                            (while
                                                (consp --cl-var--)
                                              (setq name
                                                    (car --cl-var--))
                                              (if
                                                  (or
                                                   (doom-package-get name :disable)
                                                   (eval
                                                    (doom-package-get name :ignore))
                                                   (plist-member
                                                    (doom-package-get name :recipe)
                                                    :local-repo)
                                                   (locate-library
                                                    (symbol-name name))
                                                   (doom-package-built-in-p name)
                                                   (doom-package-installed-p name))
                                                  (progn)
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'error "Missing emacs package: %S")
                                                  name)
                                                 :format nil))
                                              (setq --cl-var--
                                                    (cdr --cl-var--)))
                                            nil)
                                          (let
                                              ((inhibit-message t))
                                            (load doctor-file 'noerror 'nomessage)))
                                      ((debug file-missing)
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "%s"
                                                                (error-message-string ex)))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "%s"
                                                                    (error-message-string ex)))
                                                doom-doctor--errors))))
                                      ((debug error)
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Syntax error: %s" ex))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "Syntax error: %s" ex))
                                                doom-doctor--errors)))))
                                    (if
                                        (or doom-doctor--errors doom-doctor--warnings)
                                        (progn
                                          (let
                                              ((doom-print-indent
                                                (+
                                                 (if t doom-print-indent-increment 0)
                                                 doom-print-indent)))
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'start
                                                                 (doom-print--style 'bold "%s %s"))
                                              (car key)
                                              (cdr key))
                                             :format nil)
                                            (doom-print
                                             (doom-print--format "%s"
                                                                 (string-join
                                                                  (append doom-doctor--errors doom-doctor--warnings)
                                                                  "\n"))
                                             :format nil))
                                          (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                                  (setq doom-doctor--errors
                                        (append doom-doctor--errors doom-local-errors))
                                  (setq doom-doctor--warnings
                                        (append doom-doctor--warnings doom-local-warnings))))
                            doom-modules))))
                 ((debug error)
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                           (or
                                            (cdr-safe ex)
                                            (car ex))))
                       :format nil))
                    (setq doom-doctor--warnings
                          (cons
                           (doom-print--format
                            (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                               (or
                                                (cdr-safe ex)
                                                (car ex))))
                           doom-doctor--warnings)))
                  (setq doom-modules nil)))
               (terpri)
               (let
                   ((--dolist-tail--
                     (list
                      (list doom-doctor--warnings "warning" 'yellow)
                      (list doom-doctor--errors "error" 'red))))
                 (while --dolist-tail--
                   (let
                       ((msg
                         (car --dolist-tail--)))
                     (if
                         (car msg)
                         (progn
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'color
                                                (nth 2 msg)
                                                (if
                                                    (cdr msg)
                                                    "There are %d %ss!" "There is %d %s!")
                                                (length
                                                 (car msg))
                                                (nth 1 msg)))
                            :format nil)))
                     (setq --dolist-tail--
                           (cdr --dolist-tail--)))))
               (if
                   (or doom-doctor--errors doom-doctor--warnings)
                   nil
                 (doom-print
                  (doom-print--format
                   (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
                  :format nil))
               (exit! :pager\? "+G")))))
  (bindings)))

;;;; 22
((let*
     ((x3
       (car-safe x2))
      (x4
       (cdr-safe x2)))
   (let
       ((cli x3)
        (bindings x4))
     (doom-cli-execute cli bindings)))
 ((context . #s(doom-cli-context
                (25359 42750 192253 0)
                13992 -1 nil nil nil "doom" nil nil
                ("doom" "doctor")
                nil
                ("doctor")
                (("--eval")
                 ("-E")
                 ("--strict-load")
                 ("--load")
                 ("-L")
                 ("--color")
                 ("--profile")
                 ("--pager")
                 ("--emacsdir")
                 ("--doomdir")
                 ("--debug")
                 ("-D")
                 ("--force")
                 ("-!"))
                ((t)
                 (("doom" "doctor"))
                 (("doom")
                  "doctor"))
                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (command "doom" "doctor")
  (cli . #s(doom-cli
            ("doom" "doctor")
            nil
            (("SUMMARY" . "Diagnoses common issues on your system.")
             ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
            nil nil nil nil
            (:benchmark nil :prefix
                        (doom)
                        :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
            (closure
             (t)
             (cli alist)
             (let nil
               (doom-print
                (doom-print--format "The doctor will see you now...\n")
                :format nil)
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking your Emacs version..."))
                :format nil)
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (cond
                  ((string= ".50"
                            (substring emacs-version -3))
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                            doom-doctor--errors)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                           "\n")))
                      :format nil)))
                  ((> emacs-major-version 28)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Emacs %s detected" emacs-version))
                        :format nil))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Emacs %s detected" emacs-version))
                            doom-doctor--warnings)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                           "\n")))
                      :format nil)))
                  ((< emacs-major-version 27)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                            doom-doctor--errors))))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for Doom's prerequisites..."))
                :format nil)
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (if
                     (not
                      (executable-find "git"))
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                          :format nil))
                       (setq doom-doctor--errors
                             (cons
                              (doom-print--format
                               (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                              doom-doctor--errors)))
                   (let
                       ((save-match-data-internal
                         (match-data)))
                     (unwind-protect
                         (progn
                           (let*
                               ((version
                                 (cdr
                                  (doom-call-process "git" "version")))
                                (version
                                 (and
                                  (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                  (match-string 1 version))))
                             (if version
                                 (if
                                     (version< version "2.23")
                                     (progn
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                doom-doctor--errors)))))
                               (progn
                                 (if inhibit-message nil
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                    :format nil))
                                 (setq doom-doctor--warnings
                                       (cons
                                        (doom-print--format
                                         (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                        doom-doctor--warnings))))))
                       (set-match-data save-match-data-internal 'evaporate))))
                 (if
                     (executable-find "rg")
                     nil
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                            doom-doctor--errors)))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for Emacs config conflicts..."))
                :format nil)
               (if
                   (file-exists-p "~/.emacs")
                   (progn
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                          :format nil))
                       (setq doom-doctor--warnings
                             (cons
                              (doom-print--format
                               (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                              doom-doctor--warnings)))
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'fill
                                            (string-join
                                             (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                             "\n")))
                        :format nil))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for great Emacs features..."))
                :format nil)
               (if
                   (functionp 'json-serialize)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native JSON support"))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native JSON support"))
                          doom-doctor--warnings)))
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'fill
                                        (string-join
                                         (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                         "\n")))
                    :format nil)))
               (if
                   (featurep 'native-compile)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native compilation support"))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native compilation support"))
                          doom-doctor--warnings)))
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'fill
                                        (string-join
                                         (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                         "\n")))
                    :format nil)))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for private config conflicts..."))
                :format nil)
               (let*
                   ((xdg-dir
                     (concat
                      (or
                       (getenv "XDG_CONFIG_HOME")
                       "~/.config")
                      "/doom/"))
                    (doom-dir
                     (or
                      (getenv "DOOMDIR")
                      "~/.doom.d/"))
                    (dir
                     (if
                         (file-directory-p xdg-dir)
                         xdg-dir doom-dir)))
                 (if
                     (file-equal-p dir doom-emacs-dir)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                            (doom-print--class 'path dir)))
                        :format nil)
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'fill
                                              (string-join
                                               (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                               "\n")))
                          :format nil))))
                 (if
                     (and
                      (not
                       (file-equal-p xdg-dir doom-dir))
                      (file-directory-p xdg-dir)
                      (file-directory-p doom-dir))
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Detected two private configs, in %s and %s")
                         (abbreviate-file-name xdg-dir)
                         doom-dir)
                        :format nil)
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'fill
                                              (string-join
                                               (list "The second directory will be ignored, as it has lower precedence.")
                                               "\n")))
                          :format nil)))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for stale elc files..."))
                :format nil)
               (elc-check-dir doom-emacs-dir)
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for problematic git global settings..."))
                :format nil)
               (if
                   (executable-find "git")
                   (if
                       (= 0
                          (car
                           (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                       (progn
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                              :format nil))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                  doom-doctor--warnings)))
                         (let
                             ((doom-print-indent
                               (+
                                (if t doom-print-indent-increment 0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'fill
                                                (string-join
                                                 (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                                 "\n")))
                            :format nil))))
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                      :format nil))
                   (setq doom-doctor--errors
                         (cons
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                          doom-doctor--errors))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking Doom Emacs..."))
                :format nil)
               (condition-case ex
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (let
                         ((noninteractive nil)
                          kill-emacs-query-functions kill-emacs-hook)
                       (defvar doom-reloading-p nil)
                       (if
                           (file-exists-p doom-autoloads-file)
                           nil
                         (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                       (require 'doom-start)
                       (doom-initialize-packages))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'success "Initialized Doom Emacs %s")
                       doom-version)
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (if
                           (hash-table-p doom-modules)
                           (doom-print--class 'success "Detected %d modules"
                                              (hash-table-count doom-modules))
                         (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'success "Detected %d packages")
                       (length doom-packages))
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'start "Checking Doom core for irregularities..."))
                      :format nil)
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (let
                           ((--dolist-tail--
                             (list "savehist" "projectile.cache")))
                         (while --dolist-tail--
                           (let
                               ((file
                                 (car --dolist-tail--)))
                             (let*
                                 ((size
                                   (and t
                                        (condition-case nil
                                            (progn
                                              (doom-file-size file doom-cache-dir))
                                          (error nil)))))
                               (if size
                                   (if
                                       (> size 1048576)
                                       (progn
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                  (/ size 1024 1024.0)))
                                              :format nil))
                                           (setq doom-doctor--warnings
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                      (/ size 1024 1024.0)))
                                                  doom-doctor--warnings)))
                                         (let
                                             ((doom-print-indent
                                               (+
                                                (if t doom-print-indent-increment 0)
                                                doom-print-indent)))
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'fill
                                                                (string-join
                                                                 (list "Consider deleting it from your system (manually)")
                                                                 "\n")))
                                            :format nil))))
                                 nil))
                             (setq --dolist-tail--
                                   (cdr --dolist-tail--)))))
                       (if
                           (condition-case nil
                               (progn
                                 (executable-find doom-projectile-fd-binary))
                             (error nil))
                           nil
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                              :format nil))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                  doom-doctor--warnings))))
                       (require 'projectile)
                       (if
                           (projectile-project-root "~")
                           (progn
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                  :format nil))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                      doom-doctor--warnings)))
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'fill
                                                    (string-join
                                                     (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                     "\n")))
                                :format nil))))
                       (if
                           (and
                            (file-equal-p doom-user-dir "~/.config/doom")
                            (file-directory-p "~/.doom.d"))
                           (progn
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                               (doom-print--class 'path doom-user-dir))
                              :format nil)
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'fill
                                                    (string-join
                                                     (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                     "\n")))
                                :format nil))))
                       (if
                           (not
                            (executable-find "fc-list"))
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                :format nil))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                    doom-doctor--warnings)))
                         (if
                             (and
                              (cond
                               ((eq system-type 'gnu/linux)
                                (let nil
                                  (concat
                                   (or
                                    (getenv "XDG_DATA_HOME")
                                    "~/.local/share")
                                   "/fonts/")))
                               ((eq system-type 'darwin)
                                (let nil "~/Library/Fonts/")))
                              (require 'all-the-icons nil t))
                             (progn
                               (let
                                   ((temp-buffer
                                     (generate-new-buffer " *temp*" t)))
                                 (save-current-buffer
                                   (set-buffer temp-buffer)
                                   (unwind-protect
                                       (progn
                                         (let
                                             ((errors 0))
                                           (let*
                                               ((output
                                                 (doom-call-process "fc-list" "" "file"))
                                                (status
                                                 (if output
                                                     (car-safe
                                                      (prog1 output
                                                        (setq output
                                                              (cdr output))))
                                                   (signal 'wrong-number-of-arguments
                                                           (list
                                                            '(status . output)
                                                            (length output))))))
                                             (if
                                                 (not
                                                  (= 0 status))
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                                  :format nil)
                                               (insert
                                                (cdr
                                                 (doom-call-process "fc-list" "" "file")))
                                               (let
                                                   ((--dolist-tail-- all-the-icons-font-names))
                                                 (while --dolist-tail--
                                                   (let
                                                       ((font
                                                         (car --dolist-tail--)))
                                                     (if
                                                         (save-excursion
                                                           (re-search-backward font nil t))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--style 'green "Found font %s" font))
                                                          :format nil)
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'warn "Warning: couldn't find %S font")
                                                         font)
                                                        :format nil))
                                                     (setq --dolist-tail--
                                                           (cdr --dolist-tail--)))))
                                               (if
                                                   (> errors 0)
                                                   (progn
                                                     (let
                                                         ((doom-print-indent
                                                           (+
                                                            (if t doom-print-indent-increment 0)
                                                            doom-print-indent)))
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'fill
                                                                            (string-join
                                                                             (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                             "\n")))
                                                        :format nil))))))))
                                     (and
                                      (buffer-name temp-buffer)
                                      (kill-buffer temp-buffer)))))))))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                      :format nil)
                     (if
                         (file-directory-p doom-user-dir)
                         (progn
                           (let
                               ((doom-print-indent
                                 (+
                                  (if t doom-print-indent-increment 0)
                                  doom-print-indent)))
                             (elc-check-dir doom-user-dir))))
                     (if doom-modules
                         (progn
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'start "Checking your enabled modules..."))
                            :format nil)
                           (advice-add #'require :around #'doom-shut-up-a)
                           (maphash
                            #'(lambda
                                (key plist)
                                (let
                                    (doom-local-errors doom-local-warnings)
                                  (let
                                      (doom-doctor--errors doom-doctor--warnings)
                                    (condition-case ex
                                        (let
                                            ((doctor-file
                                              (doom-module-path
                                               (car key)
                                               (cdr key)
                                               "doctor.el"))
                                             (packages-file
                                              (doom-module-path
                                               (car key)
                                               (cdr key)
                                               "packages.el")))
                                          (let*
                                              ((doom-output-indent 6)
                                               (--cl-var--
                                                (let
                                                    (doom-packages doom-disabled-packages)
                                                  (load packages-file 'noerror 'nomessage)
                                                  (mapcar #'car doom-packages)))
                                               (name nil))
                                            (while
                                                (consp --cl-var--)
                                              (setq name
                                                    (car --cl-var--))
                                              (if
                                                  (or
                                                   (doom-package-get name :disable)
                                                   (eval
                                                    (doom-package-get name :ignore))
                                                   (plist-member
                                                    (doom-package-get name :recipe)
                                                    :local-repo)
                                                   (locate-library
                                                    (symbol-name name))
                                                   (doom-package-built-in-p name)
                                                   (doom-package-installed-p name))
                                                  (progn)
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'error "Missing emacs package: %S")
                                                  name)
                                                 :format nil))
                                              (setq --cl-var--
                                                    (cdr --cl-var--)))
                                            nil)
                                          (let
                                              ((inhibit-message t))
                                            (load doctor-file 'noerror 'nomessage)))
                                      ((debug file-missing)
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "%s"
                                                                (error-message-string ex)))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "%s"
                                                                    (error-message-string ex)))
                                                doom-doctor--errors))))
                                      ((debug error)
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Syntax error: %s" ex))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "Syntax error: %s" ex))
                                                doom-doctor--errors)))))
                                    (if
                                        (or doom-doctor--errors doom-doctor--warnings)
                                        (progn
                                          (let
                                              ((doom-print-indent
                                                (+
                                                 (if t doom-print-indent-increment 0)
                                                 doom-print-indent)))
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'start
                                                                 (doom-print--style 'bold "%s %s"))
                                              (car key)
                                              (cdr key))
                                             :format nil)
                                            (doom-print
                                             (doom-print--format "%s"
                                                                 (string-join
                                                                  (append doom-doctor--errors doom-doctor--warnings)
                                                                  "\n"))
                                             :format nil))
                                          (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                                  (setq doom-doctor--errors
                                        (append doom-doctor--errors doom-local-errors))
                                  (setq doom-doctor--warnings
                                        (append doom-doctor--warnings doom-local-warnings))))
                            doom-modules))))
                 ((debug error)
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                           (or
                                            (cdr-safe ex)
                                            (car ex))))
                       :format nil))
                    (setq doom-doctor--warnings
                          (cons
                           (doom-print--format
                            (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                               (or
                                                (cdr-safe ex)
                                                (car ex))))
                           doom-doctor--warnings)))
                  (setq doom-modules nil)))
               (terpri)
               (let
                   ((--dolist-tail--
                     (list
                      (list doom-doctor--warnings "warning" 'yellow)
                      (list doom-doctor--errors "error" 'red))))
                 (while --dolist-tail--
                   (let
                       ((msg
                         (car --dolist-tail--)))
                     (if
                         (car msg)
                         (progn
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'color
                                                (nth 2 msg)
                                                (if
                                                    (cdr msg)
                                                    "There are %d %ss!" "There is %d %s!")
                                                (length
                                                 (car msg))
                                                (nth 1 msg)))
                            :format nil)))
                     (setq --dolist-tail--
                           (cdr --dolist-tail--)))))
               (if
                   (or doom-doctor--errors doom-doctor--warnings)
                   nil
                 (doom-print
                  (doom-print--format
                   (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
                  :format nil))
               (exit! :pager\? "+G")))))
  (prefix . "doom")
  (seen t)
  (runners
   (#s(doom-cli
       ("doom" "doctor")
       nil
       (("SUMMARY" . "Diagnoses common issues on your system.")
        ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
       nil nil nil nil
       (:benchmark nil :prefix
                   (doom)
                   :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
       (closure
        (t)
        (cli alist)
        (let nil
          (doom-print
           (doom-print--format "The doctor will see you now...\n")
           :format nil)
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking your Emacs version..."))
           :format nil)
          (let
              ((doom-print-indent
                (+
                 (if t doom-print-indent-increment 0)
                 doom-print-indent)))
            (cond
             ((string= ".50"
                       (substring emacs-version -3))
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                       doom-doctor--errors)))
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'fill
                                     (string-join
                                      (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                      "\n")))
                 :format nil)))
             ((> emacs-major-version 28)
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Emacs %s detected" emacs-version))
                   :format nil))
                (setq doom-doctor--warnings
                      (cons
                       (doom-print--format
                        (doom-print--class 'warn "Emacs %s detected" emacs-version))
                       doom-doctor--warnings)))
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'fill
                                     (string-join
                                      (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                      "\n")))
                 :format nil)))
             ((< emacs-major-version 27)
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                       doom-doctor--errors))))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for Doom's prerequisites..."))
           :format nil)
          (let
              ((doom-print-indent
                (+
                 (if t doom-print-indent-increment 0)
                 doom-print-indent)))
            (if
                (not
                 (executable-find "git"))
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                     :format nil))
                  (setq doom-doctor--errors
                        (cons
                         (doom-print--format
                          (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                         doom-doctor--errors)))
              (let
                  ((save-match-data-internal
                    (match-data)))
                (unwind-protect
                    (progn
                      (let*
                          ((version
                            (cdr
                             (doom-call-process "git" "version")))
                           (version
                            (and
                             (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                             (match-string 1 version))))
                        (if version
                            (if
                                (version< version "2.23")
                                (progn
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                       :format nil))
                                    (setq doom-doctor--errors
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                           doom-doctor--errors)))))
                          (progn
                            (if inhibit-message nil
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                               :format nil))
                            (setq doom-doctor--warnings
                                  (cons
                                   (doom-print--format
                                    (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                   doom-doctor--warnings))))))
                  (set-match-data save-match-data-internal 'evaporate))))
            (if
                (executable-find "rg")
                nil
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                       doom-doctor--errors)))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for Emacs config conflicts..."))
           :format nil)
          (if
              (file-exists-p "~/.emacs")
              (progn
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                     :format nil))
                  (setq doom-doctor--warnings
                        (cons
                         (doom-print--format
                          (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                         doom-doctor--warnings)))
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'fill
                                       (string-join
                                        (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                        "\n")))
                   :format nil))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for great Emacs features..."))
           :format nil)
          (if
              (functionp 'json-serialize)
              nil
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Emacs was not built with native JSON support"))
                 :format nil))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Emacs was not built with native JSON support"))
                     doom-doctor--warnings)))
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (doom-print
               (doom-print--format
                (doom-print--class 'fill
                                   (string-join
                                    (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                    "\n")))
               :format nil)))
          (if
              (featurep 'native-compile)
              nil
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Emacs was not built with native compilation support"))
                 :format nil))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Emacs was not built with native compilation support"))
                     doom-doctor--warnings)))
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (doom-print
               (doom-print--format
                (doom-print--class 'fill
                                   (string-join
                                    (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                    "\n")))
               :format nil)))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for private config conflicts..."))
           :format nil)
          (let*
              ((xdg-dir
                (concat
                 (or
                  (getenv "XDG_CONFIG_HOME")
                  "~/.config")
                 "/doom/"))
               (doom-dir
                (or
                 (getenv "DOOMDIR")
                 "~/.doom.d/"))
               (dir
                (if
                    (file-directory-p xdg-dir)
                    xdg-dir doom-dir)))
            (if
                (file-equal-p dir doom-emacs-dir)
                (progn
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                       (doom-print--class 'path dir)))
                   :format nil)
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'fill
                                         (string-join
                                          (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                          "\n")))
                     :format nil))))
            (if
                (and
                 (not
                  (file-equal-p xdg-dir doom-dir))
                 (file-directory-p xdg-dir)
                 (file-directory-p doom-dir))
                (progn
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Detected two private configs, in %s and %s")
                    (abbreviate-file-name xdg-dir)
                    doom-dir)
                   :format nil)
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'fill
                                         (string-join
                                          (list "The second directory will be ignored, as it has lower precedence.")
                                          "\n")))
                     :format nil)))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for stale elc files..."))
           :format nil)
          (elc-check-dir doom-emacs-dir)
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for problematic git global settings..."))
           :format nil)
          (if
              (executable-find "git")
              (if
                  (= 0
                     (car
                      (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                  (progn
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                         :format nil))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                             doom-doctor--warnings)))
                    (let
                        ((doom-print-indent
                          (+
                           (if t doom-print-indent-increment 0)
                           doom-print-indent)))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'fill
                                           (string-join
                                            (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                            "\n")))
                       :format nil))))
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                 :format nil))
              (setq doom-doctor--errors
                    (cons
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                     doom-doctor--errors))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking Doom Emacs..."))
           :format nil)
          (condition-case ex
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (let
                    ((noninteractive nil)
                     kill-emacs-query-functions kill-emacs-hook)
                  (defvar doom-reloading-p nil)
                  (if
                      (file-exists-p doom-autoloads-file)
                      nil
                    (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                  (require 'doom-start)
                  (doom-initialize-packages))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'success "Initialized Doom Emacs %s")
                  doom-version)
                 :format nil)
                (doom-print
                 (doom-print--format
                  (if
                      (hash-table-p doom-modules)
                      (doom-print--class 'success "Detected %d modules"
                                         (hash-table-count doom-modules))
                    (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                 :format nil)
                (doom-print
                 (doom-print--format
                  (doom-print--class 'success "Detected %d packages")
                  (length doom-packages))
                 :format nil)
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking Doom core for irregularities..."))
                 :format nil)
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (let
                      ((--dolist-tail--
                        (list "savehist" "projectile.cache")))
                    (while --dolist-tail--
                      (let
                          ((file
                            (car --dolist-tail--)))
                        (let*
                            ((size
                              (and t
                                   (condition-case nil
                                       (progn
                                         (doom-file-size file doom-cache-dir))
                                     (error nil)))))
                          (if size
                              (if
                                  (> size 1048576)
                                  (progn
                                    (progn
                                      (if inhibit-message nil
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                             (/ size 1024 1024.0)))
                                         :format nil))
                                      (setq doom-doctor--warnings
                                            (cons
                                             (doom-print--format
                                              (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                 (/ size 1024 1024.0)))
                                             doom-doctor--warnings)))
                                    (let
                                        ((doom-print-indent
                                          (+
                                           (if t doom-print-indent-increment 0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'fill
                                                           (string-join
                                                            (list "Consider deleting it from your system (manually)")
                                                            "\n")))
                                       :format nil))))
                            nil))
                        (setq --dolist-tail--
                              (cdr --dolist-tail--)))))
                  (if
                      (condition-case nil
                          (progn
                            (executable-find doom-projectile-fd-binary))
                        (error nil))
                      nil
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                         :format nil))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                             doom-doctor--warnings))))
                  (require 'projectile)
                  (if
                      (projectile-project-root "~")
                      (progn
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                             :format nil))
                          (setq doom-doctor--warnings
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                 doom-doctor--warnings)))
                        (let
                            ((doom-print-indent
                              (+
                               (if t doom-print-indent-increment 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'fill
                                               (string-join
                                                (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                "\n")))
                           :format nil))))
                  (if
                      (and
                       (file-equal-p doom-user-dir "~/.config/doom")
                       (file-directory-p "~/.doom.d"))
                      (progn
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                          (doom-print--class 'path doom-user-dir))
                         :format nil)
                        (let
                            ((doom-print-indent
                              (+
                               (if t doom-print-indent-increment 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'fill
                                               (string-join
                                                (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                "\n")))
                           :format nil))))
                  (if
                      (not
                       (executable-find "fc-list"))
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                           :format nil))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                               doom-doctor--warnings)))
                    (if
                        (and
                         (cond
                          ((eq system-type 'gnu/linux)
                           (let nil
                             (concat
                              (or
                               (getenv "XDG_DATA_HOME")
                               "~/.local/share")
                              "/fonts/")))
                          ((eq system-type 'darwin)
                           (let nil "~/Library/Fonts/")))
                         (require 'all-the-icons nil t))
                        (progn
                          (let
                              ((temp-buffer
                                (generate-new-buffer " *temp*" t)))
                            (save-current-buffer
                              (set-buffer temp-buffer)
                              (unwind-protect
                                  (progn
                                    (let
                                        ((errors 0))
                                      (let*
                                          ((output
                                            (doom-call-process "fc-list" "" "file"))
                                           (status
                                            (if output
                                                (car-safe
                                                 (prog1 output
                                                   (setq output
                                                         (cdr output))))
                                              (signal 'wrong-number-of-arguments
                                                      (list
                                                       '(status . output)
                                                       (length output))))))
                                        (if
                                            (not
                                             (= 0 status))
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                             :format nil)
                                          (insert
                                           (cdr
                                            (doom-call-process "fc-list" "" "file")))
                                          (let
                                              ((--dolist-tail-- all-the-icons-font-names))
                                            (while --dolist-tail--
                                              (let
                                                  ((font
                                                    (car --dolist-tail--)))
                                                (if
                                                    (save-excursion
                                                      (re-search-backward font nil t))
                                                    (doom-print
                                                     (doom-print--format
                                                      (doom-print--style 'green "Found font %s" font))
                                                     :format nil)
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'warn "Warning: couldn't find %S font")
                                                    font)
                                                   :format nil))
                                                (setq --dolist-tail--
                                                      (cdr --dolist-tail--)))))
                                          (if
                                              (> errors 0)
                                              (progn
                                                (let
                                                    ((doom-print-indent
                                                      (+
                                                       (if t doom-print-indent-increment 0)
                                                       doom-print-indent)))
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'fill
                                                                       (string-join
                                                                        (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                        "\n")))
                                                   :format nil))))))))
                                (and
                                 (buffer-name temp-buffer)
                                 (kill-buffer temp-buffer)))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                 :format nil)
                (if
                    (file-directory-p doom-user-dir)
                    (progn
                      (let
                          ((doom-print-indent
                            (+
                             (if t doom-print-indent-increment 0)
                             doom-print-indent)))
                        (elc-check-dir doom-user-dir))))
                (if doom-modules
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'start "Checking your enabled modules..."))
                       :format nil)
                      (advice-add #'require :around #'doom-shut-up-a)
                      (maphash
                       #'(lambda
                           (key plist)
                           (let
                               (doom-local-errors doom-local-warnings)
                             (let
                                 (doom-doctor--errors doom-doctor--warnings)
                               (condition-case ex
                                   (let
                                       ((doctor-file
                                         (doom-module-path
                                          (car key)
                                          (cdr key)
                                          "doctor.el"))
                                        (packages-file
                                         (doom-module-path
                                          (car key)
                                          (cdr key)
                                          "packages.el")))
                                     (let*
                                         ((doom-output-indent 6)
                                          (--cl-var--
                                           (let
                                               (doom-packages doom-disabled-packages)
                                             (load packages-file 'noerror 'nomessage)
                                             (mapcar #'car doom-packages)))
                                          (name nil))
                                       (while
                                           (consp --cl-var--)
                                         (setq name
                                               (car --cl-var--))
                                         (if
                                             (or
                                              (doom-package-get name :disable)
                                              (eval
                                               (doom-package-get name :ignore))
                                              (plist-member
                                               (doom-package-get name :recipe)
                                               :local-repo)
                                              (locate-library
                                               (symbol-name name))
                                              (doom-package-built-in-p name)
                                              (doom-package-installed-p name))
                                             (progn)
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Missing emacs package: %S")
                                             name)
                                            :format nil))
                                         (setq --cl-var--
                                               (cdr --cl-var--)))
                                       nil)
                                     (let
                                         ((inhibit-message t))
                                       (load doctor-file 'noerror 'nomessage)))
                                 ((debug file-missing)
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "%s"
                                                           (error-message-string ex)))
                                       :format nil))
                                    (setq doom-doctor--errors
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'error "%s"
                                                               (error-message-string ex)))
                                           doom-doctor--errors))))
                                 ((debug error)
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "Syntax error: %s" ex))
                                       :format nil))
                                    (setq doom-doctor--errors
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'error "Syntax error: %s" ex))
                                           doom-doctor--errors)))))
                               (if
                                   (or doom-doctor--errors doom-doctor--warnings)
                                   (progn
                                     (let
                                         ((doom-print-indent
                                           (+
                                            (if t doom-print-indent-increment 0)
                                            doom-print-indent)))
                                       (doom-print
                                        (doom-print--format
                                         (doom-print--class 'start
                                                            (doom-print--style 'bold "%s %s"))
                                         (car key)
                                         (cdr key))
                                        :format nil)
                                       (doom-print
                                        (doom-print--format "%s"
                                                            (string-join
                                                             (append doom-doctor--errors doom-doctor--warnings)
                                                             "\n"))
                                        :format nil))
                                     (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                             (setq doom-doctor--errors
                                   (append doom-doctor--errors doom-local-errors))
                             (setq doom-doctor--warnings
                                   (append doom-doctor--warnings doom-local-warnings))))
                       doom-modules))))
            ((debug error)
             (progn
               (if inhibit-message nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                      (or
                                       (cdr-safe ex)
                                       (car ex))))
                  :format nil))
               (setq doom-doctor--warnings
                     (cons
                      (doom-print--format
                       (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                          (or
                                           (cdr-safe ex)
                                           (car ex))))
                      doom-doctor--warnings)))
             (setq doom-modules nil)))
          (terpri)
          (let
              ((--dolist-tail--
                (list
                 (list doom-doctor--warnings "warning" 'yellow)
                 (list doom-doctor--errors "error" 'red))))
            (while --dolist-tail--
              (let
                  ((msg
                    (car --dolist-tail--)))
                (if
                    (car msg)
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'color
                                           (nth 2 msg)
                                           (if
                                               (cdr msg)
                                               "There are %d %ss!" "There is %d %s!")
                                           (length
                                            (car msg))
                                           (nth 1 msg)))
                       :format nil)))
                (setq --dolist-tail--
                      (cdr --dolist-tail--)))))
          (if
              (or doom-doctor--errors doom-doctor--warnings)
              nil
            (doom-print
             (doom-print--format
              (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
             :format nil))
          (exit! :pager\? "+G"))))))
  (--dolist-tail--
   (#s(doom-cli
       ("doom" "doctor")
       nil
       (("SUMMARY" . "Diagnoses common issues on your system.")
        ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
       nil nil nil nil
       (:benchmark nil :prefix
                   (doom)
                   :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
       (closure
        (t)
        (cli alist)
        (let nil
          (doom-print
           (doom-print--format "The doctor will see you now...\n")
           :format nil)
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking your Emacs version..."))
           :format nil)
          (let
              ((doom-print-indent
                (+
                 (if t doom-print-indent-increment 0)
                 doom-print-indent)))
            (cond
             ((string= ".50"
                       (substring emacs-version -3))
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                       doom-doctor--errors)))
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'fill
                                     (string-join
                                      (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                      "\n")))
                 :format nil)))
             ((> emacs-major-version 28)
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Emacs %s detected" emacs-version))
                   :format nil))
                (setq doom-doctor--warnings
                      (cons
                       (doom-print--format
                        (doom-print--class 'warn "Emacs %s detected" emacs-version))
                       doom-doctor--warnings)))
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'fill
                                     (string-join
                                      (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                      "\n")))
                 :format nil)))
             ((< emacs-major-version 27)
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                       doom-doctor--errors))))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for Doom's prerequisites..."))
           :format nil)
          (let
              ((doom-print-indent
                (+
                 (if t doom-print-indent-increment 0)
                 doom-print-indent)))
            (if
                (not
                 (executable-find "git"))
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                     :format nil))
                  (setq doom-doctor--errors
                        (cons
                         (doom-print--format
                          (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                         doom-doctor--errors)))
              (let
                  ((save-match-data-internal
                    (match-data)))
                (unwind-protect
                    (progn
                      (let*
                          ((version
                            (cdr
                             (doom-call-process "git" "version")))
                           (version
                            (and
                             (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                             (match-string 1 version))))
                        (if version
                            (if
                                (version< version "2.23")
                                (progn
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                       :format nil))
                                    (setq doom-doctor--errors
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                           doom-doctor--errors)))))
                          (progn
                            (if inhibit-message nil
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                               :format nil))
                            (setq doom-doctor--warnings
                                  (cons
                                   (doom-print--format
                                    (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                   doom-doctor--warnings))))))
                  (set-match-data save-match-data-internal 'evaporate))))
            (if
                (executable-find "rg")
                nil
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                       doom-doctor--errors)))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for Emacs config conflicts..."))
           :format nil)
          (if
              (file-exists-p "~/.emacs")
              (progn
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                     :format nil))
                  (setq doom-doctor--warnings
                        (cons
                         (doom-print--format
                          (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                         doom-doctor--warnings)))
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'fill
                                       (string-join
                                        (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                        "\n")))
                   :format nil))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for great Emacs features..."))
           :format nil)
          (if
              (functionp 'json-serialize)
              nil
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Emacs was not built with native JSON support"))
                 :format nil))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Emacs was not built with native JSON support"))
                     doom-doctor--warnings)))
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (doom-print
               (doom-print--format
                (doom-print--class 'fill
                                   (string-join
                                    (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                    "\n")))
               :format nil)))
          (if
              (featurep 'native-compile)
              nil
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Emacs was not built with native compilation support"))
                 :format nil))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Emacs was not built with native compilation support"))
                     doom-doctor--warnings)))
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (doom-print
               (doom-print--format
                (doom-print--class 'fill
                                   (string-join
                                    (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                    "\n")))
               :format nil)))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for private config conflicts..."))
           :format nil)
          (let*
              ((xdg-dir
                (concat
                 (or
                  (getenv "XDG_CONFIG_HOME")
                  "~/.config")
                 "/doom/"))
               (doom-dir
                (or
                 (getenv "DOOMDIR")
                 "~/.doom.d/"))
               (dir
                (if
                    (file-directory-p xdg-dir)
                    xdg-dir doom-dir)))
            (if
                (file-equal-p dir doom-emacs-dir)
                (progn
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                       (doom-print--class 'path dir)))
                   :format nil)
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'fill
                                         (string-join
                                          (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                          "\n")))
                     :format nil))))
            (if
                (and
                 (not
                  (file-equal-p xdg-dir doom-dir))
                 (file-directory-p xdg-dir)
                 (file-directory-p doom-dir))
                (progn
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Detected two private configs, in %s and %s")
                    (abbreviate-file-name xdg-dir)
                    doom-dir)
                   :format nil)
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'fill
                                         (string-join
                                          (list "The second directory will be ignored, as it has lower precedence.")
                                          "\n")))
                     :format nil)))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for stale elc files..."))
           :format nil)
          (elc-check-dir doom-emacs-dir)
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for problematic git global settings..."))
           :format nil)
          (if
              (executable-find "git")
              (if
                  (= 0
                     (car
                      (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                  (progn
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                         :format nil))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                             doom-doctor--warnings)))
                    (let
                        ((doom-print-indent
                          (+
                           (if t doom-print-indent-increment 0)
                           doom-print-indent)))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'fill
                                           (string-join
                                            (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                            "\n")))
                       :format nil))))
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                 :format nil))
              (setq doom-doctor--errors
                    (cons
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                     doom-doctor--errors))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking Doom Emacs..."))
           :format nil)
          (condition-case ex
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (let
                    ((noninteractive nil)
                     kill-emacs-query-functions kill-emacs-hook)
                  (defvar doom-reloading-p nil)
                  (if
                      (file-exists-p doom-autoloads-file)
                      nil
                    (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                  (require 'doom-start)
                  (doom-initialize-packages))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'success "Initialized Doom Emacs %s")
                  doom-version)
                 :format nil)
                (doom-print
                 (doom-print--format
                  (if
                      (hash-table-p doom-modules)
                      (doom-print--class 'success "Detected %d modules"
                                         (hash-table-count doom-modules))
                    (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                 :format nil)
                (doom-print
                 (doom-print--format
                  (doom-print--class 'success "Detected %d packages")
                  (length doom-packages))
                 :format nil)
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking Doom core for irregularities..."))
                 :format nil)
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (let
                      ((--dolist-tail--
                        (list "savehist" "projectile.cache")))
                    (while --dolist-tail--
                      (let
                          ((file
                            (car --dolist-tail--)))
                        (let*
                            ((size
                              (and t
                                   (condition-case nil
                                       (progn
                                         (doom-file-size file doom-cache-dir))
                                     (error nil)))))
                          (if size
                              (if
                                  (> size 1048576)
                                  (progn
                                    (progn
                                      (if inhibit-message nil
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                             (/ size 1024 1024.0)))
                                         :format nil))
                                      (setq doom-doctor--warnings
                                            (cons
                                             (doom-print--format
                                              (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                 (/ size 1024 1024.0)))
                                             doom-doctor--warnings)))
                                    (let
                                        ((doom-print-indent
                                          (+
                                           (if t doom-print-indent-increment 0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'fill
                                                           (string-join
                                                            (list "Consider deleting it from your system (manually)")
                                                            "\n")))
                                       :format nil))))
                            nil))
                        (setq --dolist-tail--
                              (cdr --dolist-tail--)))))
                  (if
                      (condition-case nil
                          (progn
                            (executable-find doom-projectile-fd-binary))
                        (error nil))
                      nil
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                         :format nil))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                             doom-doctor--warnings))))
                  (require 'projectile)
                  (if
                      (projectile-project-root "~")
                      (progn
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                             :format nil))
                          (setq doom-doctor--warnings
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                 doom-doctor--warnings)))
                        (let
                            ((doom-print-indent
                              (+
                               (if t doom-print-indent-increment 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'fill
                                               (string-join
                                                (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                "\n")))
                           :format nil))))
                  (if
                      (and
                       (file-equal-p doom-user-dir "~/.config/doom")
                       (file-directory-p "~/.doom.d"))
                      (progn
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                          (doom-print--class 'path doom-user-dir))
                         :format nil)
                        (let
                            ((doom-print-indent
                              (+
                               (if t doom-print-indent-increment 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'fill
                                               (string-join
                                                (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                "\n")))
                           :format nil))))
                  (if
                      (not
                       (executable-find "fc-list"))
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                           :format nil))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                               doom-doctor--warnings)))
                    (if
                        (and
                         (cond
                          ((eq system-type 'gnu/linux)
                           (let nil
                             (concat
                              (or
                               (getenv "XDG_DATA_HOME")
                               "~/.local/share")
                              "/fonts/")))
                          ((eq system-type 'darwin)
                           (let nil "~/Library/Fonts/")))
                         (require 'all-the-icons nil t))
                        (progn
                          (let
                              ((temp-buffer
                                (generate-new-buffer " *temp*" t)))
                            (save-current-buffer
                              (set-buffer temp-buffer)
                              (unwind-protect
                                  (progn
                                    (let
                                        ((errors 0))
                                      (let*
                                          ((output
                                            (doom-call-process "fc-list" "" "file"))
                                           (status
                                            (if output
                                                (car-safe
                                                 (prog1 output
                                                   (setq output
                                                         (cdr output))))
                                              (signal 'wrong-number-of-arguments
                                                      (list
                                                       '(status . output)
                                                       (length output))))))
                                        (if
                                            (not
                                             (= 0 status))
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                             :format nil)
                                          (insert
                                           (cdr
                                            (doom-call-process "fc-list" "" "file")))
                                          (let
                                              ((--dolist-tail-- all-the-icons-font-names))
                                            (while --dolist-tail--
                                              (let
                                                  ((font
                                                    (car --dolist-tail--)))
                                                (if
                                                    (save-excursion
                                                      (re-search-backward font nil t))
                                                    (doom-print
                                                     (doom-print--format
                                                      (doom-print--style 'green "Found font %s" font))
                                                     :format nil)
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'warn "Warning: couldn't find %S font")
                                                    font)
                                                   :format nil))
                                                (setq --dolist-tail--
                                                      (cdr --dolist-tail--)))))
                                          (if
                                              (> errors 0)
                                              (progn
                                                (let
                                                    ((doom-print-indent
                                                      (+
                                                       (if t doom-print-indent-increment 0)
                                                       doom-print-indent)))
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'fill
                                                                       (string-join
                                                                        (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                        "\n")))
                                                   :format nil))))))))
                                (and
                                 (buffer-name temp-buffer)
                                 (kill-buffer temp-buffer)))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                 :format nil)
                (if
                    (file-directory-p doom-user-dir)
                    (progn
                      (let
                          ((doom-print-indent
                            (+
                             (if t doom-print-indent-increment 0)
                             doom-print-indent)))
                        (elc-check-dir doom-user-dir))))
                (if doom-modules
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'start "Checking your enabled modules..."))
                       :format nil)
                      (advice-add #'require :around #'doom-shut-up-a)
                      (maphash
                       #'(lambda
                           (key plist)
                           (let
                               (doom-local-errors doom-local-warnings)
                             (let
                                 (doom-doctor--errors doom-doctor--warnings)
                               (condition-case ex
                                   (let
                                       ((doctor-file
                                         (doom-module-path
                                          (car key)
                                          (cdr key)
                                          "doctor.el"))
                                        (packages-file
                                         (doom-module-path
                                          (car key)
                                          (cdr key)
                                          "packages.el")))
                                     (let*
                                         ((doom-output-indent 6)
                                          (--cl-var--
                                           (let
                                               (doom-packages doom-disabled-packages)
                                             (load packages-file 'noerror 'nomessage)
                                             (mapcar #'car doom-packages)))
                                          (name nil))
                                       (while
                                           (consp --cl-var--)
                                         (setq name
                                               (car --cl-var--))
                                         (if
                                             (or
                                              (doom-package-get name :disable)
                                              (eval
                                               (doom-package-get name :ignore))
                                              (plist-member
                                               (doom-package-get name :recipe)
                                               :local-repo)
                                              (locate-library
                                               (symbol-name name))
                                              (doom-package-built-in-p name)
                                              (doom-package-installed-p name))
                                             (progn)
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Missing emacs package: %S")
                                             name)
                                            :format nil))
                                         (setq --cl-var--
                                               (cdr --cl-var--)))
                                       nil)
                                     (let
                                         ((inhibit-message t))
                                       (load doctor-file 'noerror 'nomessage)))
                                 ((debug file-missing)
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "%s"
                                                           (error-message-string ex)))
                                       :format nil))
                                    (setq doom-doctor--errors
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'error "%s"
                                                               (error-message-string ex)))
                                           doom-doctor--errors))))
                                 ((debug error)
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "Syntax error: %s" ex))
                                       :format nil))
                                    (setq doom-doctor--errors
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'error "Syntax error: %s" ex))
                                           doom-doctor--errors)))))
                               (if
                                   (or doom-doctor--errors doom-doctor--warnings)
                                   (progn
                                     (let
                                         ((doom-print-indent
                                           (+
                                            (if t doom-print-indent-increment 0)
                                            doom-print-indent)))
                                       (doom-print
                                        (doom-print--format
                                         (doom-print--class 'start
                                                            (doom-print--style 'bold "%s %s"))
                                         (car key)
                                         (cdr key))
                                        :format nil)
                                       (doom-print
                                        (doom-print--format "%s"
                                                            (string-join
                                                             (append doom-doctor--errors doom-doctor--warnings)
                                                             "\n"))
                                        :format nil))
                                     (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                             (setq doom-doctor--errors
                                   (append doom-doctor--errors doom-local-errors))
                             (setq doom-doctor--warnings
                                   (append doom-doctor--warnings doom-local-warnings))))
                       doom-modules))))
            ((debug error)
             (progn
               (if inhibit-message nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                      (or
                                       (cdr-safe ex)
                                       (car ex))))
                  :format nil))
               (setq doom-doctor--warnings
                     (cons
                      (doom-print--format
                       (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                          (or
                                           (cdr-safe ex)
                                           (car ex))))
                      doom-doctor--warnings)))
             (setq doom-modules nil)))
          (terpri)
          (let
              ((--dolist-tail--
                (list
                 (list doom-doctor--warnings "warning" 'yellow)
                 (list doom-doctor--errors "error" 'red))))
            (while --dolist-tail--
              (let
                  ((msg
                    (car --dolist-tail--)))
                (if
                    (car msg)
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'color
                                           (nth 2 msg)
                                           (if
                                               (cdr msg)
                                               "There are %d %ss!" "There is %d %s!")
                                           (length
                                            (car msg))
                                           (nth 1 msg)))
                       :format nil)))
                (setq --dolist-tail--
                      (cdr --dolist-tail--)))))
          (if
              (or doom-doctor--errors doom-doctor--warnings)
              nil
            (doom-print
             (doom-print--format
              (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
             :format nil))
          (exit! :pager\? "+G"))))))
  (x2 #s(doom-cli
         ("doom" "doctor")
         nil
         (("SUMMARY" . "Diagnoses common issues on your system.")
          ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
         nil nil nil nil
         (:benchmark nil :prefix
                     (doom)
                     :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
         (closure
          (t)
          (cli alist)
          (let nil
            (doom-print
             (doom-print--format "The doctor will see you now...\n")
             :format nil)
            (doom-print
             (doom-print--format
              (doom-print--class 'start "Checking your Emacs version..."))
             :format nil)
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (cond
               ((string= ".50"
                         (substring emacs-version -3))
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                     :format nil))
                  (setq doom-doctor--errors
                        (cons
                         (doom-print--format
                          (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                         doom-doctor--errors)))
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'fill
                                       (string-join
                                        (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                        "\n")))
                   :format nil)))
               ((> emacs-major-version 28)
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'warn "Emacs %s detected" emacs-version))
                     :format nil))
                  (setq doom-doctor--warnings
                        (cons
                         (doom-print--format
                          (doom-print--class 'warn "Emacs %s detected" emacs-version))
                         doom-doctor--warnings)))
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'fill
                                       (string-join
                                        (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                        "\n")))
                   :format nil)))
               ((< emacs-major-version 27)
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                     :format nil))
                  (setq doom-doctor--errors
                        (cons
                         (doom-print--format
                          (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                         doom-doctor--errors))))))
            (doom-print
             (doom-print--format
              (doom-print--class 'start "Checking for Doom's prerequisites..."))
             :format nil)
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (if
                  (not
                   (executable-find "git"))
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                       :format nil))
                    (setq doom-doctor--errors
                          (cons
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                           doom-doctor--errors)))
                (let
                    ((save-match-data-internal
                      (match-data)))
                  (unwind-protect
                      (progn
                        (let*
                            ((version
                              (cdr
                               (doom-call-process "git" "version")))
                             (version
                              (and
                               (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                               (match-string 1 version))))
                          (if version
                              (if
                                  (version< version "2.23")
                                  (progn
                                    (progn
                                      (if inhibit-message nil
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                         :format nil))
                                      (setq doom-doctor--errors
                                            (cons
                                             (doom-print--format
                                              (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                             doom-doctor--errors)))))
                            (progn
                              (if inhibit-message nil
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                 :format nil))
                              (setq doom-doctor--warnings
                                    (cons
                                     (doom-print--format
                                      (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                     doom-doctor--warnings))))))
                    (set-match-data save-match-data-internal 'evaporate))))
              (if
                  (executable-find "rg")
                  nil
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                     :format nil))
                  (setq doom-doctor--errors
                        (cons
                         (doom-print--format
                          (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                         doom-doctor--errors)))))
            (doom-print
             (doom-print--format
              (doom-print--class 'start "Checking for Emacs config conflicts..."))
             :format nil)
            (if
                (file-exists-p "~/.emacs")
                (progn
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                       :format nil))
                    (setq doom-doctor--warnings
                          (cons
                           (doom-print--format
                            (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                           doom-doctor--warnings)))
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'fill
                                         (string-join
                                          (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                          "\n")))
                     :format nil))))
            (doom-print
             (doom-print--format
              (doom-print--class 'start "Checking for great Emacs features..."))
             :format nil)
            (if
                (functionp 'json-serialize)
                nil
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Emacs was not built with native JSON support"))
                   :format nil))
                (setq doom-doctor--warnings
                      (cons
                       (doom-print--format
                        (doom-print--class 'warn "Emacs was not built with native JSON support"))
                       doom-doctor--warnings)))
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'fill
                                     (string-join
                                      (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                      "\n")))
                 :format nil)))
            (if
                (featurep 'native-compile)
                nil
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Emacs was not built with native compilation support"))
                   :format nil))
                (setq doom-doctor--warnings
                      (cons
                       (doom-print--format
                        (doom-print--class 'warn "Emacs was not built with native compilation support"))
                       doom-doctor--warnings)))
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'fill
                                     (string-join
                                      (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                      "\n")))
                 :format nil)))
            (doom-print
             (doom-print--format
              (doom-print--class 'start "Checking for private config conflicts..."))
             :format nil)
            (let*
                ((xdg-dir
                  (concat
                   (or
                    (getenv "XDG_CONFIG_HOME")
                    "~/.config")
                   "/doom/"))
                 (doom-dir
                  (or
                   (getenv "DOOMDIR")
                   "~/.doom.d/"))
                 (dir
                  (if
                      (file-directory-p xdg-dir)
                      xdg-dir doom-dir)))
              (if
                  (file-equal-p dir doom-emacs-dir)
                  (progn
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                         (doom-print--class 'path dir)))
                     :format nil)
                    (let
                        ((doom-print-indent
                          (+
                           (if t doom-print-indent-increment 0)
                           doom-print-indent)))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'fill
                                           (string-join
                                            (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                            "\n")))
                       :format nil))))
              (if
                  (and
                   (not
                    (file-equal-p xdg-dir doom-dir))
                   (file-directory-p xdg-dir)
                   (file-directory-p doom-dir))
                  (progn
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'warn "Detected two private configs, in %s and %s")
                      (abbreviate-file-name xdg-dir)
                      doom-dir)
                     :format nil)
                    (let
                        ((doom-print-indent
                          (+
                           (if t doom-print-indent-increment 0)
                           doom-print-indent)))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'fill
                                           (string-join
                                            (list "The second directory will be ignored, as it has lower precedence.")
                                            "\n")))
                       :format nil)))))
            (doom-print
             (doom-print--format
              (doom-print--class 'start "Checking for stale elc files..."))
             :format nil)
            (elc-check-dir doom-emacs-dir)
            (doom-print
             (doom-print--format
              (doom-print--class 'start "Checking for problematic git global settings..."))
             :format nil)
            (if
                (executable-find "git")
                (if
                    (= 0
                       (car
                        (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                    (progn
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                           :format nil))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                               doom-doctor--warnings)))
                      (let
                          ((doom-print-indent
                            (+
                             (if t doom-print-indent-increment 0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'fill
                                             (string-join
                                              (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                              "\n")))
                         :format nil))))
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                       doom-doctor--errors))))
            (doom-print
             (doom-print--format
              (doom-print--class 'start "Checking Doom Emacs..."))
             :format nil)
            (condition-case ex
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (let
                      ((noninteractive nil)
                       kill-emacs-query-functions kill-emacs-hook)
                    (defvar doom-reloading-p nil)
                    (if
                        (file-exists-p doom-autoloads-file)
                        nil
                      (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                    (require 'doom-start)
                    (doom-initialize-packages))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'success "Initialized Doom Emacs %s")
                    doom-version)
                   :format nil)
                  (doom-print
                   (doom-print--format
                    (if
                        (hash-table-p doom-modules)
                        (doom-print--class 'success "Detected %d modules"
                                           (hash-table-count doom-modules))
                      (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                   :format nil)
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'success "Detected %d packages")
                    (length doom-packages))
                   :format nil)
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'start "Checking Doom core for irregularities..."))
                   :format nil)
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (let
                        ((--dolist-tail--
                          (list "savehist" "projectile.cache")))
                      (while --dolist-tail--
                        (let
                            ((file
                              (car --dolist-tail--)))
                          (let*
                              ((size
                                (and t
                                     (condition-case nil
                                         (progn
                                           (doom-file-size file doom-cache-dir))
                                       (error nil)))))
                            (if size
                                (if
                                    (> size 1048576)
                                    (progn
                                      (progn
                                        (if inhibit-message nil
                                          (doom-print
                                           (doom-print--format
                                            (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                               (/ size 1024 1024.0)))
                                           :format nil))
                                        (setq doom-doctor--warnings
                                              (cons
                                               (doom-print--format
                                                (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                   (/ size 1024 1024.0)))
                                               doom-doctor--warnings)))
                                      (let
                                          ((doom-print-indent
                                            (+
                                             (if t doom-print-indent-increment 0)
                                             doom-print-indent)))
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'fill
                                                             (string-join
                                                              (list "Consider deleting it from your system (manually)")
                                                              "\n")))
                                         :format nil))))
                              nil))
                          (setq --dolist-tail--
                                (cdr --dolist-tail--)))))
                    (if
                        (condition-case nil
                            (progn
                              (executable-find doom-projectile-fd-binary))
                          (error nil))
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                           :format nil))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                               doom-doctor--warnings))))
                    (require 'projectile)
                    (if
                        (projectile-project-root "~")
                        (progn
                          (progn
                            (if inhibit-message nil
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                               :format nil))
                            (setq doom-doctor--warnings
                                  (cons
                                   (doom-print--format
                                    (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                   doom-doctor--warnings)))
                          (let
                              ((doom-print-indent
                                (+
                                 (if t doom-print-indent-increment 0)
                                 doom-print-indent)))
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'fill
                                                 (string-join
                                                  (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                  "\n")))
                             :format nil))))
                    (if
                        (and
                         (file-equal-p doom-user-dir "~/.config/doom")
                         (file-directory-p "~/.doom.d"))
                        (progn
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                            (doom-print--class 'path doom-user-dir))
                           :format nil)
                          (let
                              ((doom-print-indent
                                (+
                                 (if t doom-print-indent-increment 0)
                                 doom-print-indent)))
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'fill
                                                 (string-join
                                                  (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                  "\n")))
                             :format nil))))
                    (if
                        (not
                         (executable-find "fc-list"))
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                             :format nil))
                          (setq doom-doctor--warnings
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                 doom-doctor--warnings)))
                      (if
                          (and
                           (cond
                            ((eq system-type 'gnu/linux)
                             (let nil
                               (concat
                                (or
                                 (getenv "XDG_DATA_HOME")
                                 "~/.local/share")
                                "/fonts/")))
                            ((eq system-type 'darwin)
                             (let nil "~/Library/Fonts/")))
                           (require 'all-the-icons nil t))
                          (progn
                            (let
                                ((temp-buffer
                                  (generate-new-buffer " *temp*" t)))
                              (save-current-buffer
                                (set-buffer temp-buffer)
                                (unwind-protect
                                    (progn
                                      (let
                                          ((errors 0))
                                        (let*
                                            ((output
                                              (doom-call-process "fc-list" "" "file"))
                                             (status
                                              (if output
                                                  (car-safe
                                                   (prog1 output
                                                     (setq output
                                                           (cdr output))))
                                                (signal 'wrong-number-of-arguments
                                                        (list
                                                         '(status . output)
                                                         (length output))))))
                                          (if
                                              (not
                                               (= 0 status))
                                              (doom-print
                                               (doom-print--format
                                                (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                               :format nil)
                                            (insert
                                             (cdr
                                              (doom-call-process "fc-list" "" "file")))
                                            (let
                                                ((--dolist-tail-- all-the-icons-font-names))
                                              (while --dolist-tail--
                                                (let
                                                    ((font
                                                      (car --dolist-tail--)))
                                                  (if
                                                      (save-excursion
                                                        (re-search-backward font nil t))
                                                      (doom-print
                                                       (doom-print--format
                                                        (doom-print--style 'green "Found font %s" font))
                                                       :format nil)
                                                    (doom-print
                                                     (doom-print--format
                                                      (doom-print--class 'warn "Warning: couldn't find %S font")
                                                      font)
                                                     :format nil))
                                                  (setq --dolist-tail--
                                                        (cdr --dolist-tail--)))))
                                            (if
                                                (> errors 0)
                                                (progn
                                                  (let
                                                      ((doom-print-indent
                                                        (+
                                                         (if t doom-print-indent-increment 0)
                                                         doom-print-indent)))
                                                    (doom-print
                                                     (doom-print--format
                                                      (doom-print--class 'fill
                                                                         (string-join
                                                                          (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                          "\n")))
                                                     :format nil))))))))
                                  (and
                                   (buffer-name temp-buffer)
                                   (kill-buffer temp-buffer)))))))))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                   :format nil)
                  (if
                      (file-directory-p doom-user-dir)
                      (progn
                        (let
                            ((doom-print-indent
                              (+
                               (if t doom-print-indent-increment 0)
                               doom-print-indent)))
                          (elc-check-dir doom-user-dir))))
                  (if doom-modules
                      (progn
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'start "Checking your enabled modules..."))
                         :format nil)
                        (advice-add #'require :around #'doom-shut-up-a)
                        (maphash
                         #'(lambda
                             (key plist)
                             (let
                                 (doom-local-errors doom-local-warnings)
                               (let
                                   (doom-doctor--errors doom-doctor--warnings)
                                 (condition-case ex
                                     (let
                                         ((doctor-file
                                           (doom-module-path
                                            (car key)
                                            (cdr key)
                                            "doctor.el"))
                                          (packages-file
                                           (doom-module-path
                                            (car key)
                                            (cdr key)
                                            "packages.el")))
                                       (let*
                                           ((doom-output-indent 6)
                                            (--cl-var--
                                             (let
                                                 (doom-packages doom-disabled-packages)
                                               (load packages-file 'noerror 'nomessage)
                                               (mapcar #'car doom-packages)))
                                            (name nil))
                                         (while
                                             (consp --cl-var--)
                                           (setq name
                                                 (car --cl-var--))
                                           (if
                                               (or
                                                (doom-package-get name :disable)
                                                (eval
                                                 (doom-package-get name :ignore))
                                                (plist-member
                                                 (doom-package-get name :recipe)
                                                 :local-repo)
                                                (locate-library
                                                 (symbol-name name))
                                                (doom-package-built-in-p name)
                                                (doom-package-installed-p name))
                                               (progn)
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'error "Missing emacs package: %S")
                                               name)
                                              :format nil))
                                           (setq --cl-var--
                                                 (cdr --cl-var--)))
                                         nil)
                                       (let
                                           ((inhibit-message t))
                                         (load doctor-file 'noerror 'nomessage)))
                                   ((debug file-missing)
                                    (progn
                                      (if inhibit-message nil
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'error "%s"
                                                             (error-message-string ex)))
                                         :format nil))
                                      (setq doom-doctor--errors
                                            (cons
                                             (doom-print--format
                                              (doom-print--class 'error "%s"
                                                                 (error-message-string ex)))
                                             doom-doctor--errors))))
                                   ((debug error)
                                    (progn
                                      (if inhibit-message nil
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'error "Syntax error: %s" ex))
                                         :format nil))
                                      (setq doom-doctor--errors
                                            (cons
                                             (doom-print--format
                                              (doom-print--class 'error "Syntax error: %s" ex))
                                             doom-doctor--errors)))))
                                 (if
                                     (or doom-doctor--errors doom-doctor--warnings)
                                     (progn
                                       (let
                                           ((doom-print-indent
                                             (+
                                              (if t doom-print-indent-increment 0)
                                              doom-print-indent)))
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--class 'start
                                                              (doom-print--style 'bold "%s %s"))
                                           (car key)
                                           (cdr key))
                                          :format nil)
                                         (doom-print
                                          (doom-print--format "%s"
                                                              (string-join
                                                               (append doom-doctor--errors doom-doctor--warnings)
                                                               "\n"))
                                          :format nil))
                                       (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                               (setq doom-doctor--errors
                                     (append doom-doctor--errors doom-local-errors))
                               (setq doom-doctor--warnings
                                     (append doom-doctor--warnings doom-local-warnings))))
                         doom-modules))))
              ((debug error)
               (progn
                 (if inhibit-message nil
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                        (or
                                         (cdr-safe ex)
                                         (car ex))))
                    :format nil))
                 (setq doom-doctor--warnings
                       (cons
                        (doom-print--format
                         (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                            (or
                                             (cdr-safe ex)
                                             (car ex))))
                        doom-doctor--warnings)))
               (setq doom-modules nil)))
            (terpri)
            (let
                ((--dolist-tail--
                  (list
                   (list doom-doctor--warnings "warning" 'yellow)
                   (list doom-doctor--errors "error" 'red))))
              (while --dolist-tail--
                (let
                    ((msg
                      (car --dolist-tail--)))
                  (if
                      (car msg)
                      (progn
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'color
                                             (nth 2 msg)
                                             (if
                                                 (cdr msg)
                                                 "There are %d %ss!" "There is %d %s!")
                                             (length
                                              (car msg))
                                             (nth 1 msg)))
                         :format nil)))
                  (setq --dolist-tail--
                        (cdr --dolist-tail--)))))
            (if
                (or doom-doctor--errors doom-doctor--warnings)
                nil
              (doom-print
               (doom-print--format
                (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
               :format nil))
            (exit! :pager\? "+G")))))
  (x3 . #s(doom-cli
           ("doom" "doctor")
           nil
           (("SUMMARY" . "Diagnoses common issues on your system.")
            ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
           nil nil nil nil
           (:benchmark nil :prefix
                       (doom)
                       :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
           (closure
            (t)
            (cli alist)
            (let nil
              (doom-print
               (doom-print--format "The doctor will see you now...\n")
               :format nil)
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking your Emacs version..."))
               :format nil)
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (cond
                 ((string= ".50"
                           (substring emacs-version -3))
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                       :format nil))
                    (setq doom-doctor--errors
                          (cons
                           (doom-print--format
                            (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                           doom-doctor--errors)))
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'fill
                                         (string-join
                                          (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                          "\n")))
                     :format nil)))
                 ((> emacs-major-version 28)
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Emacs %s detected" emacs-version))
                       :format nil))
                    (setq doom-doctor--warnings
                          (cons
                           (doom-print--format
                            (doom-print--class 'warn "Emacs %s detected" emacs-version))
                           doom-doctor--warnings)))
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'fill
                                         (string-join
                                          (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                          "\n")))
                     :format nil)))
                 ((< emacs-major-version 27)
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                       :format nil))
                    (setq doom-doctor--errors
                          (cons
                           (doom-print--format
                            (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                           doom-doctor--errors))))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for Doom's prerequisites..."))
               :format nil)
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (if
                    (not
                     (executable-find "git"))
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                         :format nil))
                      (setq doom-doctor--errors
                            (cons
                             (doom-print--format
                              (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                             doom-doctor--errors)))
                  (let
                      ((save-match-data-internal
                        (match-data)))
                    (unwind-protect
                        (progn
                          (let*
                              ((version
                                (cdr
                                 (doom-call-process "git" "version")))
                               (version
                                (and
                                 (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                 (match-string 1 version))))
                            (if version
                                (if
                                    (version< version "2.23")
                                    (progn
                                      (progn
                                        (if inhibit-message nil
                                          (doom-print
                                           (doom-print--format
                                            (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                           :format nil))
                                        (setq doom-doctor--errors
                                              (cons
                                               (doom-print--format
                                                (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                               doom-doctor--errors)))))
                              (progn
                                (if inhibit-message nil
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                   :format nil))
                                (setq doom-doctor--warnings
                                      (cons
                                       (doom-print--format
                                        (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                       doom-doctor--warnings))))))
                      (set-match-data save-match-data-internal 'evaporate))))
                (if
                    (executable-find "rg")
                    nil
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                       :format nil))
                    (setq doom-doctor--errors
                          (cons
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                           doom-doctor--errors)))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for Emacs config conflicts..."))
               :format nil)
              (if
                  (file-exists-p "~/.emacs")
                  (progn
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                         :format nil))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                             doom-doctor--warnings)))
                    (let
                        ((doom-print-indent
                          (+
                           (if t doom-print-indent-increment 0)
                           doom-print-indent)))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'fill
                                           (string-join
                                            (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                            "\n")))
                       :format nil))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for great Emacs features..."))
               :format nil)
              (if
                  (functionp 'json-serialize)
                  nil
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'warn "Emacs was not built with native JSON support"))
                     :format nil))
                  (setq doom-doctor--warnings
                        (cons
                         (doom-print--format
                          (doom-print--class 'warn "Emacs was not built with native JSON support"))
                         doom-doctor--warnings)))
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'fill
                                       (string-join
                                        (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                        "\n")))
                   :format nil)))
              (if
                  (featurep 'native-compile)
                  nil
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'warn "Emacs was not built with native compilation support"))
                     :format nil))
                  (setq doom-doctor--warnings
                        (cons
                         (doom-print--format
                          (doom-print--class 'warn "Emacs was not built with native compilation support"))
                         doom-doctor--warnings)))
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'fill
                                       (string-join
                                        (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                        "\n")))
                   :format nil)))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for private config conflicts..."))
               :format nil)
              (let*
                  ((xdg-dir
                    (concat
                     (or
                      (getenv "XDG_CONFIG_HOME")
                      "~/.config")
                     "/doom/"))
                   (doom-dir
                    (or
                     (getenv "DOOMDIR")
                     "~/.doom.d/"))
                   (dir
                    (if
                        (file-directory-p xdg-dir)
                        xdg-dir doom-dir)))
                (if
                    (file-equal-p dir doom-emacs-dir)
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                           (doom-print--class 'path dir)))
                       :format nil)
                      (let
                          ((doom-print-indent
                            (+
                             (if t doom-print-indent-increment 0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'fill
                                             (string-join
                                              (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                              "\n")))
                         :format nil))))
                (if
                    (and
                     (not
                      (file-equal-p xdg-dir doom-dir))
                     (file-directory-p xdg-dir)
                     (file-directory-p doom-dir))
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Detected two private configs, in %s and %s")
                        (abbreviate-file-name xdg-dir)
                        doom-dir)
                       :format nil)
                      (let
                          ((doom-print-indent
                            (+
                             (if t doom-print-indent-increment 0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'fill
                                             (string-join
                                              (list "The second directory will be ignored, as it has lower precedence.")
                                              "\n")))
                         :format nil)))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for stale elc files..."))
               :format nil)
              (elc-check-dir doom-emacs-dir)
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking for problematic git global settings..."))
               :format nil)
              (if
                  (executable-find "git")
                  (if
                      (= 0
                         (car
                          (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                      (progn
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                             :format nil))
                          (setq doom-doctor--warnings
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                 doom-doctor--warnings)))
                        (let
                            ((doom-print-indent
                              (+
                               (if t doom-print-indent-increment 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'fill
                                               (string-join
                                                (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                                "\n")))
                           :format nil))))
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                     :format nil))
                  (setq doom-doctor--errors
                        (cons
                         (doom-print--format
                          (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                         doom-doctor--errors))))
              (doom-print
               (doom-print--format
                (doom-print--class 'start "Checking Doom Emacs..."))
               :format nil)
              (condition-case ex
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (let
                        ((noninteractive nil)
                         kill-emacs-query-functions kill-emacs-hook)
                      (defvar doom-reloading-p nil)
                      (if
                          (file-exists-p doom-autoloads-file)
                          nil
                        (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                      (require 'doom-start)
                      (doom-initialize-packages))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'success "Initialized Doom Emacs %s")
                      doom-version)
                     :format nil)
                    (doom-print
                     (doom-print--format
                      (if
                          (hash-table-p doom-modules)
                          (doom-print--class 'success "Detected %d modules"
                                             (hash-table-count doom-modules))
                        (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                     :format nil)
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'success "Detected %d packages")
                      (length doom-packages))
                     :format nil)
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'start "Checking Doom core for irregularities..."))
                     :format nil)
                    (let
                        ((doom-print-indent
                          (+
                           (if t doom-print-indent-increment 0)
                           doom-print-indent)))
                      (let
                          ((--dolist-tail--
                            (list "savehist" "projectile.cache")))
                        (while --dolist-tail--
                          (let
                              ((file
                                (car --dolist-tail--)))
                            (let*
                                ((size
                                  (and t
                                       (condition-case nil
                                           (progn
                                             (doom-file-size file doom-cache-dir))
                                         (error nil)))))
                              (if size
                                  (if
                                      (> size 1048576)
                                      (progn
                                        (progn
                                          (if inhibit-message nil
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                 (/ size 1024 1024.0)))
                                             :format nil))
                                          (setq doom-doctor--warnings
                                                (cons
                                                 (doom-print--format
                                                  (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                     (/ size 1024 1024.0)))
                                                 doom-doctor--warnings)))
                                        (let
                                            ((doom-print-indent
                                              (+
                                               (if t doom-print-indent-increment 0)
                                               doom-print-indent)))
                                          (doom-print
                                           (doom-print--format
                                            (doom-print--class 'fill
                                                               (string-join
                                                                (list "Consider deleting it from your system (manually)")
                                                                "\n")))
                                           :format nil))))
                                nil))
                            (setq --dolist-tail--
                                  (cdr --dolist-tail--)))))
                      (if
                          (condition-case nil
                              (progn
                                (executable-find doom-projectile-fd-binary))
                            (error nil))
                          nil
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                             :format nil))
                          (setq doom-doctor--warnings
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                 doom-doctor--warnings))))
                      (require 'projectile)
                      (if
                          (projectile-project-root "~")
                          (progn
                            (progn
                              (if inhibit-message nil
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                 :format nil))
                              (setq doom-doctor--warnings
                                    (cons
                                     (doom-print--format
                                      (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                     doom-doctor--warnings)))
                            (let
                                ((doom-print-indent
                                  (+
                                   (if t doom-print-indent-increment 0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'fill
                                                   (string-join
                                                    (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                    "\n")))
                               :format nil))))
                      (if
                          (and
                           (file-equal-p doom-user-dir "~/.config/doom")
                           (file-directory-p "~/.doom.d"))
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                              (doom-print--class 'path doom-user-dir))
                             :format nil)
                            (let
                                ((doom-print-indent
                                  (+
                                   (if t doom-print-indent-increment 0)
                                   doom-print-indent)))
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'fill
                                                   (string-join
                                                    (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                    "\n")))
                               :format nil))))
                      (if
                          (not
                           (executable-find "fc-list"))
                          (progn
                            (if inhibit-message nil
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                               :format nil))
                            (setq doom-doctor--warnings
                                  (cons
                                   (doom-print--format
                                    (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                   doom-doctor--warnings)))
                        (if
                            (and
                             (cond
                              ((eq system-type 'gnu/linux)
                               (let nil
                                 (concat
                                  (or
                                   (getenv "XDG_DATA_HOME")
                                   "~/.local/share")
                                  "/fonts/")))
                              ((eq system-type 'darwin)
                               (let nil "~/Library/Fonts/")))
                             (require 'all-the-icons nil t))
                            (progn
                              (let
                                  ((temp-buffer
                                    (generate-new-buffer " *temp*" t)))
                                (save-current-buffer
                                  (set-buffer temp-buffer)
                                  (unwind-protect
                                      (progn
                                        (let
                                            ((errors 0))
                                          (let*
                                              ((output
                                                (doom-call-process "fc-list" "" "file"))
                                               (status
                                                (if output
                                                    (car-safe
                                                     (prog1 output
                                                       (setq output
                                                             (cdr output))))
                                                  (signal 'wrong-number-of-arguments
                                                          (list
                                                           '(status . output)
                                                           (length output))))))
                                            (if
                                                (not
                                                 (= 0 status))
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                                 :format nil)
                                              (insert
                                               (cdr
                                                (doom-call-process "fc-list" "" "file")))
                                              (let
                                                  ((--dolist-tail-- all-the-icons-font-names))
                                                (while --dolist-tail--
                                                  (let
                                                      ((font
                                                        (car --dolist-tail--)))
                                                    (if
                                                        (save-excursion
                                                          (re-search-backward font nil t))
                                                        (doom-print
                                                         (doom-print--format
                                                          (doom-print--style 'green "Found font %s" font))
                                                         :format nil)
                                                      (doom-print
                                                       (doom-print--format
                                                        (doom-print--class 'warn "Warning: couldn't find %S font")
                                                        font)
                                                       :format nil))
                                                    (setq --dolist-tail--
                                                          (cdr --dolist-tail--)))))
                                              (if
                                                  (> errors 0)
                                                  (progn
                                                    (let
                                                        ((doom-print-indent
                                                          (+
                                                           (if t doom-print-indent-increment 0)
                                                           doom-print-indent)))
                                                      (doom-print
                                                       (doom-print--format
                                                        (doom-print--class 'fill
                                                                           (string-join
                                                                            (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                            "\n")))
                                                       :format nil))))))))
                                    (and
                                     (buffer-name temp-buffer)
                                     (kill-buffer temp-buffer)))))))))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                     :format nil)
                    (if
                        (file-directory-p doom-user-dir)
                        (progn
                          (let
                              ((doom-print-indent
                                (+
                                 (if t doom-print-indent-increment 0)
                                 doom-print-indent)))
                            (elc-check-dir doom-user-dir))))
                    (if doom-modules
                        (progn
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'start "Checking your enabled modules..."))
                           :format nil)
                          (advice-add #'require :around #'doom-shut-up-a)
                          (maphash
                           #'(lambda
                               (key plist)
                               (let
                                   (doom-local-errors doom-local-warnings)
                                 (let
                                     (doom-doctor--errors doom-doctor--warnings)
                                   (condition-case ex
                                       (let
                                           ((doctor-file
                                             (doom-module-path
                                              (car key)
                                              (cdr key)
                                              "doctor.el"))
                                            (packages-file
                                             (doom-module-path
                                              (car key)
                                              (cdr key)
                                              "packages.el")))
                                         (let*
                                             ((doom-output-indent 6)
                                              (--cl-var--
                                               (let
                                                   (doom-packages doom-disabled-packages)
                                                 (load packages-file 'noerror 'nomessage)
                                                 (mapcar #'car doom-packages)))
                                              (name nil))
                                           (while
                                               (consp --cl-var--)
                                             (setq name
                                                   (car --cl-var--))
                                             (if
                                                 (or
                                                  (doom-package-get name :disable)
                                                  (eval
                                                   (doom-package-get name :ignore))
                                                  (plist-member
                                                   (doom-package-get name :recipe)
                                                   :local-repo)
                                                  (locate-library
                                                   (symbol-name name))
                                                  (doom-package-built-in-p name)
                                                  (doom-package-installed-p name))
                                                 (progn)
                                               (doom-print
                                                (doom-print--format
                                                 (doom-print--class 'error "Missing emacs package: %S")
                                                 name)
                                                :format nil))
                                             (setq --cl-var--
                                                   (cdr --cl-var--)))
                                           nil)
                                         (let
                                             ((inhibit-message t))
                                           (load doctor-file 'noerror 'nomessage)))
                                     ((debug file-missing)
                                      (progn
                                        (if inhibit-message nil
                                          (doom-print
                                           (doom-print--format
                                            (doom-print--class 'error "%s"
                                                               (error-message-string ex)))
                                           :format nil))
                                        (setq doom-doctor--errors
                                              (cons
                                               (doom-print--format
                                                (doom-print--class 'error "%s"
                                                                   (error-message-string ex)))
                                               doom-doctor--errors))))
                                     ((debug error)
                                      (progn
                                        (if inhibit-message nil
                                          (doom-print
                                           (doom-print--format
                                            (doom-print--class 'error "Syntax error: %s" ex))
                                           :format nil))
                                        (setq doom-doctor--errors
                                              (cons
                                               (doom-print--format
                                                (doom-print--class 'error "Syntax error: %s" ex))
                                               doom-doctor--errors)))))
                                   (if
                                       (or doom-doctor--errors doom-doctor--warnings)
                                       (progn
                                         (let
                                             ((doom-print-indent
                                               (+
                                                (if t doom-print-indent-increment 0)
                                                doom-print-indent)))
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'start
                                                                (doom-print--style 'bold "%s %s"))
                                             (car key)
                                             (cdr key))
                                            :format nil)
                                           (doom-print
                                            (doom-print--format "%s"
                                                                (string-join
                                                                 (append doom-doctor--errors doom-doctor--warnings)
                                                                 "\n"))
                                            :format nil))
                                         (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                                 (setq doom-doctor--errors
                                       (append doom-doctor--errors doom-local-errors))
                                 (setq doom-doctor--warnings
                                       (append doom-doctor--warnings doom-local-warnings))))
                           doom-modules))))
                ((debug error)
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                          (or
                                           (cdr-safe ex)
                                           (car ex))))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                              (or
                                               (cdr-safe ex)
                                               (car ex))))
                          doom-doctor--warnings)))
                 (setq doom-modules nil)))
              (terpri)
              (let
                  ((--dolist-tail--
                    (list
                     (list doom-doctor--warnings "warning" 'yellow)
                     (list doom-doctor--errors "error" 'red))))
                (while --dolist-tail--
                  (let
                      ((msg
                        (car --dolist-tail--)))
                    (if
                        (car msg)
                        (progn
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'color
                                               (nth 2 msg)
                                               (if
                                                   (cdr msg)
                                                   "There are %d %ss!" "There is %d %s!")
                                               (length
                                                (car msg))
                                               (nth 1 msg)))
                           :format nil)))
                    (setq --dolist-tail--
                          (cdr --dolist-tail--)))))
              (if
                  (or doom-doctor--errors doom-doctor--warnings)
                  nil
                (doom-print
                 (doom-print--format
                  (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
                 :format nil))
              (exit! :pager\? "+G")))))
  (x4)))

;;;; 23
((progn
   (ignore
    (consp x2))
   (let*
       ((x3
         (car-safe x2))
        (x4
         (cdr-safe x2)))
     (let
         ((cli x3)
          (bindings x4))
       (doom-cli-execute cli bindings))))
 nil)

;;;; 24
((let
     ((x2
       (car --dolist-tail--)))
   (progn
     (ignore
      (consp x2))
     (let*
         ((x3
           (car-safe x2))
          (x4
           (cdr-safe x2)))
       (let
           ((cli x3)
            (bindings x4))
         (doom-cli-execute cli bindings))))
   (setq --dolist-tail--
         (cdr --dolist-tail--)))
 ((context . #s(doom-cli-context
                (25359 42750 192253 0)
                13992 -1 nil nil nil "doom" nil nil
                ("doom" "doctor")
                nil
                ("doctor")
                (("--eval")
                 ("-E")
                 ("--strict-load")
                 ("--load")
                 ("-L")
                 ("--color")
                 ("--profile")
                 ("--pager")
                 ("--emacsdir")
                 ("--doomdir")
                 ("--debug")
                 ("-D")
                 ("--force")
                 ("-!"))
                ((t)
                 (("doom" "doctor"))
                 (("doom")
                  "doctor"))
                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (command "doom" "doctor")
  (cli . #s(doom-cli
            ("doom" "doctor")
            nil
            (("SUMMARY" . "Diagnoses common issues on your system.")
             ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
            nil nil nil nil
            (:benchmark nil :prefix
                        (doom)
                        :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
            (closure
             (t)
             (cli alist)
             (let nil
               (doom-print
                (doom-print--format "The doctor will see you now...\n")
                :format nil)
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking your Emacs version..."))
                :format nil)
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (cond
                  ((string= ".50"
                            (substring emacs-version -3))
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                            doom-doctor--errors)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                           "\n")))
                      :format nil)))
                  ((> emacs-major-version 28)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Emacs %s detected" emacs-version))
                        :format nil))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Emacs %s detected" emacs-version))
                            doom-doctor--warnings)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                           "\n")))
                      :format nil)))
                  ((< emacs-major-version 27)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                            doom-doctor--errors))))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for Doom's prerequisites..."))
                :format nil)
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (if
                     (not
                      (executable-find "git"))
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                          :format nil))
                       (setq doom-doctor--errors
                             (cons
                              (doom-print--format
                               (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                              doom-doctor--errors)))
                   (let
                       ((save-match-data-internal
                         (match-data)))
                     (unwind-protect
                         (progn
                           (let*
                               ((version
                                 (cdr
                                  (doom-call-process "git" "version")))
                                (version
                                 (and
                                  (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                  (match-string 1 version))))
                             (if version
                                 (if
                                     (version< version "2.23")
                                     (progn
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                doom-doctor--errors)))))
                               (progn
                                 (if inhibit-message nil
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                    :format nil))
                                 (setq doom-doctor--warnings
                                       (cons
                                        (doom-print--format
                                         (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                        doom-doctor--warnings))))))
                       (set-match-data save-match-data-internal 'evaporate))))
                 (if
                     (executable-find "rg")
                     nil
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                            doom-doctor--errors)))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for Emacs config conflicts..."))
                :format nil)
               (if
                   (file-exists-p "~/.emacs")
                   (progn
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                          :format nil))
                       (setq doom-doctor--warnings
                             (cons
                              (doom-print--format
                               (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                              doom-doctor--warnings)))
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'fill
                                            (string-join
                                             (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                             "\n")))
                        :format nil))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for great Emacs features..."))
                :format nil)
               (if
                   (functionp 'json-serialize)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native JSON support"))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native JSON support"))
                          doom-doctor--warnings)))
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'fill
                                        (string-join
                                         (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                         "\n")))
                    :format nil)))
               (if
                   (featurep 'native-compile)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native compilation support"))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native compilation support"))
                          doom-doctor--warnings)))
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'fill
                                        (string-join
                                         (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                         "\n")))
                    :format nil)))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for private config conflicts..."))
                :format nil)
               (let*
                   ((xdg-dir
                     (concat
                      (or
                       (getenv "XDG_CONFIG_HOME")
                       "~/.config")
                      "/doom/"))
                    (doom-dir
                     (or
                      (getenv "DOOMDIR")
                      "~/.doom.d/"))
                    (dir
                     (if
                         (file-directory-p xdg-dir)
                         xdg-dir doom-dir)))
                 (if
                     (file-equal-p dir doom-emacs-dir)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                            (doom-print--class 'path dir)))
                        :format nil)
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'fill
                                              (string-join
                                               (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                               "\n")))
                          :format nil))))
                 (if
                     (and
                      (not
                       (file-equal-p xdg-dir doom-dir))
                      (file-directory-p xdg-dir)
                      (file-directory-p doom-dir))
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Detected two private configs, in %s and %s")
                         (abbreviate-file-name xdg-dir)
                         doom-dir)
                        :format nil)
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'fill
                                              (string-join
                                               (list "The second directory will be ignored, as it has lower precedence.")
                                               "\n")))
                          :format nil)))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for stale elc files..."))
                :format nil)
               (elc-check-dir doom-emacs-dir)
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for problematic git global settings..."))
                :format nil)
               (if
                   (executable-find "git")
                   (if
                       (= 0
                          (car
                           (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                       (progn
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                              :format nil))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                  doom-doctor--warnings)))
                         (let
                             ((doom-print-indent
                               (+
                                (if t doom-print-indent-increment 0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'fill
                                                (string-join
                                                 (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                                 "\n")))
                            :format nil))))
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                      :format nil))
                   (setq doom-doctor--errors
                         (cons
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                          doom-doctor--errors))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking Doom Emacs..."))
                :format nil)
               (condition-case ex
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (let
                         ((noninteractive nil)
                          kill-emacs-query-functions kill-emacs-hook)
                       (defvar doom-reloading-p nil)
                       (if
                           (file-exists-p doom-autoloads-file)
                           nil
                         (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                       (require 'doom-start)
                       (doom-initialize-packages))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'success "Initialized Doom Emacs %s")
                       doom-version)
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (if
                           (hash-table-p doom-modules)
                           (doom-print--class 'success "Detected %d modules"
                                              (hash-table-count doom-modules))
                         (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'success "Detected %d packages")
                       (length doom-packages))
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'start "Checking Doom core for irregularities..."))
                      :format nil)
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (let
                           ((--dolist-tail--
                             (list "savehist" "projectile.cache")))
                         (while --dolist-tail--
                           (let
                               ((file
                                 (car --dolist-tail--)))
                             (let*
                                 ((size
                                   (and t
                                        (condition-case nil
                                            (progn
                                              (doom-file-size file doom-cache-dir))
                                          (error nil)))))
                               (if size
                                   (if
                                       (> size 1048576)
                                       (progn
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                  (/ size 1024 1024.0)))
                                              :format nil))
                                           (setq doom-doctor--warnings
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                      (/ size 1024 1024.0)))
                                                  doom-doctor--warnings)))
                                         (let
                                             ((doom-print-indent
                                               (+
                                                (if t doom-print-indent-increment 0)
                                                doom-print-indent)))
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'fill
                                                                (string-join
                                                                 (list "Consider deleting it from your system (manually)")
                                                                 "\n")))
                                            :format nil))))
                                 nil))
                             (setq --dolist-tail--
                                   (cdr --dolist-tail--)))))
                       (if
                           (condition-case nil
                               (progn
                                 (executable-find doom-projectile-fd-binary))
                             (error nil))
                           nil
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                              :format nil))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                  doom-doctor--warnings))))
                       (require 'projectile)
                       (if
                           (projectile-project-root "~")
                           (progn
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                  :format nil))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                      doom-doctor--warnings)))
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'fill
                                                    (string-join
                                                     (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                     "\n")))
                                :format nil))))
                       (if
                           (and
                            (file-equal-p doom-user-dir "~/.config/doom")
                            (file-directory-p "~/.doom.d"))
                           (progn
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                               (doom-print--class 'path doom-user-dir))
                              :format nil)
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'fill
                                                    (string-join
                                                     (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                     "\n")))
                                :format nil))))
                       (if
                           (not
                            (executable-find "fc-list"))
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                :format nil))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                    doom-doctor--warnings)))
                         (if
                             (and
                              (cond
                               ((eq system-type 'gnu/linux)
                                (let nil
                                  (concat
                                   (or
                                    (getenv "XDG_DATA_HOME")
                                    "~/.local/share")
                                   "/fonts/")))
                               ((eq system-type 'darwin)
                                (let nil "~/Library/Fonts/")))
                              (require 'all-the-icons nil t))
                             (progn
                               (let
                                   ((temp-buffer
                                     (generate-new-buffer " *temp*" t)))
                                 (save-current-buffer
                                   (set-buffer temp-buffer)
                                   (unwind-protect
                                       (progn
                                         (let
                                             ((errors 0))
                                           (let*
                                               ((output
                                                 (doom-call-process "fc-list" "" "file"))
                                                (status
                                                 (if output
                                                     (car-safe
                                                      (prog1 output
                                                        (setq output
                                                              (cdr output))))
                                                   (signal 'wrong-number-of-arguments
                                                           (list
                                                            '(status . output)
                                                            (length output))))))
                                             (if
                                                 (not
                                                  (= 0 status))
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                                  :format nil)
                                               (insert
                                                (cdr
                                                 (doom-call-process "fc-list" "" "file")))
                                               (let
                                                   ((--dolist-tail-- all-the-icons-font-names))
                                                 (while --dolist-tail--
                                                   (let
                                                       ((font
                                                         (car --dolist-tail--)))
                                                     (if
                                                         (save-excursion
                                                           (re-search-backward font nil t))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--style 'green "Found font %s" font))
                                                          :format nil)
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'warn "Warning: couldn't find %S font")
                                                         font)
                                                        :format nil))
                                                     (setq --dolist-tail--
                                                           (cdr --dolist-tail--)))))
                                               (if
                                                   (> errors 0)
                                                   (progn
                                                     (let
                                                         ((doom-print-indent
                                                           (+
                                                            (if t doom-print-indent-increment 0)
                                                            doom-print-indent)))
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'fill
                                                                            (string-join
                                                                             (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                             "\n")))
                                                        :format nil))))))))
                                     (and
                                      (buffer-name temp-buffer)
                                      (kill-buffer temp-buffer)))))))))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                      :format nil)
                     (if
                         (file-directory-p doom-user-dir)
                         (progn
                           (let
                               ((doom-print-indent
                                 (+
                                  (if t doom-print-indent-increment 0)
                                  doom-print-indent)))
                             (elc-check-dir doom-user-dir))))
                     (if doom-modules
                         (progn
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'start "Checking your enabled modules..."))
                            :format nil)
                           (advice-add #'require :around #'doom-shut-up-a)
                           (maphash
                            #'(lambda
                                (key plist)
                                (let
                                    (doom-local-errors doom-local-warnings)
                                  (let
                                      (doom-doctor--errors doom-doctor--warnings)
                                    (condition-case ex
                                        (let
                                            ((doctor-file
                                              (doom-module-path
                                               (car key)
                                               (cdr key)
                                               "doctor.el"))
                                             (packages-file
                                              (doom-module-path
                                               (car key)
                                               (cdr key)
                                               "packages.el")))
                                          (let*
                                              ((doom-output-indent 6)
                                               (--cl-var--
                                                (let
                                                    (doom-packages doom-disabled-packages)
                                                  (load packages-file 'noerror 'nomessage)
                                                  (mapcar #'car doom-packages)))
                                               (name nil))
                                            (while
                                                (consp --cl-var--)
                                              (setq name
                                                    (car --cl-var--))
                                              (if
                                                  (or
                                                   (doom-package-get name :disable)
                                                   (eval
                                                    (doom-package-get name :ignore))
                                                   (plist-member
                                                    (doom-package-get name :recipe)
                                                    :local-repo)
                                                   (locate-library
                                                    (symbol-name name))
                                                   (doom-package-built-in-p name)
                                                   (doom-package-installed-p name))
                                                  (progn)
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'error "Missing emacs package: %S")
                                                  name)
                                                 :format nil))
                                              (setq --cl-var--
                                                    (cdr --cl-var--)))
                                            nil)
                                          (let
                                              ((inhibit-message t))
                                            (load doctor-file 'noerror 'nomessage)))
                                      ((debug file-missing)
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "%s"
                                                                (error-message-string ex)))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "%s"
                                                                    (error-message-string ex)))
                                                doom-doctor--errors))))
                                      ((debug error)
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Syntax error: %s" ex))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "Syntax error: %s" ex))
                                                doom-doctor--errors)))))
                                    (if
                                        (or doom-doctor--errors doom-doctor--warnings)
                                        (progn
                                          (let
                                              ((doom-print-indent
                                                (+
                                                 (if t doom-print-indent-increment 0)
                                                 doom-print-indent)))
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'start
                                                                 (doom-print--style 'bold "%s %s"))
                                              (car key)
                                              (cdr key))
                                             :format nil)
                                            (doom-print
                                             (doom-print--format "%s"
                                                                 (string-join
                                                                  (append doom-doctor--errors doom-doctor--warnings)
                                                                  "\n"))
                                             :format nil))
                                          (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                                  (setq doom-doctor--errors
                                        (append doom-doctor--errors doom-local-errors))
                                  (setq doom-doctor--warnings
                                        (append doom-doctor--warnings doom-local-warnings))))
                            doom-modules))))
                 ((debug error)
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                           (or
                                            (cdr-safe ex)
                                            (car ex))))
                       :format nil))
                    (setq doom-doctor--warnings
                          (cons
                           (doom-print--format
                            (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                               (or
                                                (cdr-safe ex)
                                                (car ex))))
                           doom-doctor--warnings)))
                  (setq doom-modules nil)))
               (terpri)
               (let
                   ((--dolist-tail--
                     (list
                      (list doom-doctor--warnings "warning" 'yellow)
                      (list doom-doctor--errors "error" 'red))))
                 (while --dolist-tail--
                   (let
                       ((msg
                         (car --dolist-tail--)))
                     (if
                         (car msg)
                         (progn
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'color
                                                (nth 2 msg)
                                                (if
                                                    (cdr msg)
                                                    "There are %d %ss!" "There is %d %s!")
                                                (length
                                                 (car msg))
                                                (nth 1 msg)))
                            :format nil)))
                     (setq --dolist-tail--
                           (cdr --dolist-tail--)))))
               (if
                   (or doom-doctor--errors doom-doctor--warnings)
                   nil
                 (doom-print
                  (doom-print--format
                   (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
                  :format nil))
               (exit! :pager\? "+G")))))
  (prefix . "doom")
  (seen t)
  (runners
   (#s(doom-cli
       ("doom" "doctor")
       nil
       (("SUMMARY" . "Diagnoses common issues on your system.")
        ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
       nil nil nil nil
       (:benchmark nil :prefix
                   (doom)
                   :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
       (closure
        (t)
        (cli alist)
        (let nil
          (doom-print
           (doom-print--format "The doctor will see you now...\n")
           :format nil)
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking your Emacs version..."))
           :format nil)
          (let
              ((doom-print-indent
                (+
                 (if t doom-print-indent-increment 0)
                 doom-print-indent)))
            (cond
             ((string= ".50"
                       (substring emacs-version -3))
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                       doom-doctor--errors)))
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'fill
                                     (string-join
                                      (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                      "\n")))
                 :format nil)))
             ((> emacs-major-version 28)
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Emacs %s detected" emacs-version))
                   :format nil))
                (setq doom-doctor--warnings
                      (cons
                       (doom-print--format
                        (doom-print--class 'warn "Emacs %s detected" emacs-version))
                       doom-doctor--warnings)))
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'fill
                                     (string-join
                                      (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                      "\n")))
                 :format nil)))
             ((< emacs-major-version 27)
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                       doom-doctor--errors))))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for Doom's prerequisites..."))
           :format nil)
          (let
              ((doom-print-indent
                (+
                 (if t doom-print-indent-increment 0)
                 doom-print-indent)))
            (if
                (not
                 (executable-find "git"))
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                     :format nil))
                  (setq doom-doctor--errors
                        (cons
                         (doom-print--format
                          (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                         doom-doctor--errors)))
              (let
                  ((save-match-data-internal
                    (match-data)))
                (unwind-protect
                    (progn
                      (let*
                          ((version
                            (cdr
                             (doom-call-process "git" "version")))
                           (version
                            (and
                             (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                             (match-string 1 version))))
                        (if version
                            (if
                                (version< version "2.23")
                                (progn
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                       :format nil))
                                    (setq doom-doctor--errors
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                           doom-doctor--errors)))))
                          (progn
                            (if inhibit-message nil
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                               :format nil))
                            (setq doom-doctor--warnings
                                  (cons
                                   (doom-print--format
                                    (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                   doom-doctor--warnings))))))
                  (set-match-data save-match-data-internal 'evaporate))))
            (if
                (executable-find "rg")
                nil
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                       doom-doctor--errors)))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for Emacs config conflicts..."))
           :format nil)
          (if
              (file-exists-p "~/.emacs")
              (progn
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                     :format nil))
                  (setq doom-doctor--warnings
                        (cons
                         (doom-print--format
                          (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                         doom-doctor--warnings)))
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'fill
                                       (string-join
                                        (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                        "\n")))
                   :format nil))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for great Emacs features..."))
           :format nil)
          (if
              (functionp 'json-serialize)
              nil
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Emacs was not built with native JSON support"))
                 :format nil))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Emacs was not built with native JSON support"))
                     doom-doctor--warnings)))
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (doom-print
               (doom-print--format
                (doom-print--class 'fill
                                   (string-join
                                    (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                    "\n")))
               :format nil)))
          (if
              (featurep 'native-compile)
              nil
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Emacs was not built with native compilation support"))
                 :format nil))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Emacs was not built with native compilation support"))
                     doom-doctor--warnings)))
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (doom-print
               (doom-print--format
                (doom-print--class 'fill
                                   (string-join
                                    (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                    "\n")))
               :format nil)))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for private config conflicts..."))
           :format nil)
          (let*
              ((xdg-dir
                (concat
                 (or
                  (getenv "XDG_CONFIG_HOME")
                  "~/.config")
                 "/doom/"))
               (doom-dir
                (or
                 (getenv "DOOMDIR")
                 "~/.doom.d/"))
               (dir
                (if
                    (file-directory-p xdg-dir)
                    xdg-dir doom-dir)))
            (if
                (file-equal-p dir doom-emacs-dir)
                (progn
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                       (doom-print--class 'path dir)))
                   :format nil)
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'fill
                                         (string-join
                                          (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                          "\n")))
                     :format nil))))
            (if
                (and
                 (not
                  (file-equal-p xdg-dir doom-dir))
                 (file-directory-p xdg-dir)
                 (file-directory-p doom-dir))
                (progn
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Detected two private configs, in %s and %s")
                    (abbreviate-file-name xdg-dir)
                    doom-dir)
                   :format nil)
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'fill
                                         (string-join
                                          (list "The second directory will be ignored, as it has lower precedence.")
                                          "\n")))
                     :format nil)))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for stale elc files..."))
           :format nil)
          (elc-check-dir doom-emacs-dir)
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for problematic git global settings..."))
           :format nil)
          (if
              (executable-find "git")
              (if
                  (= 0
                     (car
                      (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                  (progn
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                         :format nil))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                             doom-doctor--warnings)))
                    (let
                        ((doom-print-indent
                          (+
                           (if t doom-print-indent-increment 0)
                           doom-print-indent)))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'fill
                                           (string-join
                                            (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                            "\n")))
                       :format nil))))
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                 :format nil))
              (setq doom-doctor--errors
                    (cons
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                     doom-doctor--errors))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking Doom Emacs..."))
           :format nil)
          (condition-case ex
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (let
                    ((noninteractive nil)
                     kill-emacs-query-functions kill-emacs-hook)
                  (defvar doom-reloading-p nil)
                  (if
                      (file-exists-p doom-autoloads-file)
                      nil
                    (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                  (require 'doom-start)
                  (doom-initialize-packages))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'success "Initialized Doom Emacs %s")
                  doom-version)
                 :format nil)
                (doom-print
                 (doom-print--format
                  (if
                      (hash-table-p doom-modules)
                      (doom-print--class 'success "Detected %d modules"
                                         (hash-table-count doom-modules))
                    (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                 :format nil)
                (doom-print
                 (doom-print--format
                  (doom-print--class 'success "Detected %d packages")
                  (length doom-packages))
                 :format nil)
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking Doom core for irregularities..."))
                 :format nil)
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (let
                      ((--dolist-tail--
                        (list "savehist" "projectile.cache")))
                    (while --dolist-tail--
                      (let
                          ((file
                            (car --dolist-tail--)))
                        (let*
                            ((size
                              (and t
                                   (condition-case nil
                                       (progn
                                         (doom-file-size file doom-cache-dir))
                                     (error nil)))))
                          (if size
                              (if
                                  (> size 1048576)
                                  (progn
                                    (progn
                                      (if inhibit-message nil
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                             (/ size 1024 1024.0)))
                                         :format nil))
                                      (setq doom-doctor--warnings
                                            (cons
                                             (doom-print--format
                                              (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                 (/ size 1024 1024.0)))
                                             doom-doctor--warnings)))
                                    (let
                                        ((doom-print-indent
                                          (+
                                           (if t doom-print-indent-increment 0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'fill
                                                           (string-join
                                                            (list "Consider deleting it from your system (manually)")
                                                            "\n")))
                                       :format nil))))
                            nil))
                        (setq --dolist-tail--
                              (cdr --dolist-tail--)))))
                  (if
                      (condition-case nil
                          (progn
                            (executable-find doom-projectile-fd-binary))
                        (error nil))
                      nil
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                         :format nil))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                             doom-doctor--warnings))))
                  (require 'projectile)
                  (if
                      (projectile-project-root "~")
                      (progn
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                             :format nil))
                          (setq doom-doctor--warnings
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                 doom-doctor--warnings)))
                        (let
                            ((doom-print-indent
                              (+
                               (if t doom-print-indent-increment 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'fill
                                               (string-join
                                                (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                "\n")))
                           :format nil))))
                  (if
                      (and
                       (file-equal-p doom-user-dir "~/.config/doom")
                       (file-directory-p "~/.doom.d"))
                      (progn
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                          (doom-print--class 'path doom-user-dir))
                         :format nil)
                        (let
                            ((doom-print-indent
                              (+
                               (if t doom-print-indent-increment 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'fill
                                               (string-join
                                                (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                "\n")))
                           :format nil))))
                  (if
                      (not
                       (executable-find "fc-list"))
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                           :format nil))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                               doom-doctor--warnings)))
                    (if
                        (and
                         (cond
                          ((eq system-type 'gnu/linux)
                           (let nil
                             (concat
                              (or
                               (getenv "XDG_DATA_HOME")
                               "~/.local/share")
                              "/fonts/")))
                          ((eq system-type 'darwin)
                           (let nil "~/Library/Fonts/")))
                         (require 'all-the-icons nil t))
                        (progn
                          (let
                              ((temp-buffer
                                (generate-new-buffer " *temp*" t)))
                            (save-current-buffer
                              (set-buffer temp-buffer)
                              (unwind-protect
                                  (progn
                                    (let
                                        ((errors 0))
                                      (let*
                                          ((output
                                            (doom-call-process "fc-list" "" "file"))
                                           (status
                                            (if output
                                                (car-safe
                                                 (prog1 output
                                                   (setq output
                                                         (cdr output))))
                                              (signal 'wrong-number-of-arguments
                                                      (list
                                                       '(status . output)
                                                       (length output))))))
                                        (if
                                            (not
                                             (= 0 status))
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                             :format nil)
                                          (insert
                                           (cdr
                                            (doom-call-process "fc-list" "" "file")))
                                          (let
                                              ((--dolist-tail-- all-the-icons-font-names))
                                            (while --dolist-tail--
                                              (let
                                                  ((font
                                                    (car --dolist-tail--)))
                                                (if
                                                    (save-excursion
                                                      (re-search-backward font nil t))
                                                    (doom-print
                                                     (doom-print--format
                                                      (doom-print--style 'green "Found font %s" font))
                                                     :format nil)
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'warn "Warning: couldn't find %S font")
                                                    font)
                                                   :format nil))
                                                (setq --dolist-tail--
                                                      (cdr --dolist-tail--)))))
                                          (if
                                              (> errors 0)
                                              (progn
                                                (let
                                                    ((doom-print-indent
                                                      (+
                                                       (if t doom-print-indent-increment 0)
                                                       doom-print-indent)))
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'fill
                                                                       (string-join
                                                                        (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                        "\n")))
                                                   :format nil))))))))
                                (and
                                 (buffer-name temp-buffer)
                                 (kill-buffer temp-buffer)))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                 :format nil)
                (if
                    (file-directory-p doom-user-dir)
                    (progn
                      (let
                          ((doom-print-indent
                            (+
                             (if t doom-print-indent-increment 0)
                             doom-print-indent)))
                        (elc-check-dir doom-user-dir))))
                (if doom-modules
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'start "Checking your enabled modules..."))
                       :format nil)
                      (advice-add #'require :around #'doom-shut-up-a)
                      (maphash
                       #'(lambda
                           (key plist)
                           (let
                               (doom-local-errors doom-local-warnings)
                             (let
                                 (doom-doctor--errors doom-doctor--warnings)
                               (condition-case ex
                                   (let
                                       ((doctor-file
                                         (doom-module-path
                                          (car key)
                                          (cdr key)
                                          "doctor.el"))
                                        (packages-file
                                         (doom-module-path
                                          (car key)
                                          (cdr key)
                                          "packages.el")))
                                     (let*
                                         ((doom-output-indent 6)
                                          (--cl-var--
                                           (let
                                               (doom-packages doom-disabled-packages)
                                             (load packages-file 'noerror 'nomessage)
                                             (mapcar #'car doom-packages)))
                                          (name nil))
                                       (while
                                           (consp --cl-var--)
                                         (setq name
                                               (car --cl-var--))
                                         (if
                                             (or
                                              (doom-package-get name :disable)
                                              (eval
                                               (doom-package-get name :ignore))
                                              (plist-member
                                               (doom-package-get name :recipe)
                                               :local-repo)
                                              (locate-library
                                               (symbol-name name))
                                              (doom-package-built-in-p name)
                                              (doom-package-installed-p name))
                                             (progn)
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Missing emacs package: %S")
                                             name)
                                            :format nil))
                                         (setq --cl-var--
                                               (cdr --cl-var--)))
                                       nil)
                                     (let
                                         ((inhibit-message t))
                                       (load doctor-file 'noerror 'nomessage)))
                                 ((debug file-missing)
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "%s"
                                                           (error-message-string ex)))
                                       :format nil))
                                    (setq doom-doctor--errors
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'error "%s"
                                                               (error-message-string ex)))
                                           doom-doctor--errors))))
                                 ((debug error)
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "Syntax error: %s" ex))
                                       :format nil))
                                    (setq doom-doctor--errors
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'error "Syntax error: %s" ex))
                                           doom-doctor--errors)))))
                               (if
                                   (or doom-doctor--errors doom-doctor--warnings)
                                   (progn
                                     (let
                                         ((doom-print-indent
                                           (+
                                            (if t doom-print-indent-increment 0)
                                            doom-print-indent)))
                                       (doom-print
                                        (doom-print--format
                                         (doom-print--class 'start
                                                            (doom-print--style 'bold "%s %s"))
                                         (car key)
                                         (cdr key))
                                        :format nil)
                                       (doom-print
                                        (doom-print--format "%s"
                                                            (string-join
                                                             (append doom-doctor--errors doom-doctor--warnings)
                                                             "\n"))
                                        :format nil))
                                     (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                             (setq doom-doctor--errors
                                   (append doom-doctor--errors doom-local-errors))
                             (setq doom-doctor--warnings
                                   (append doom-doctor--warnings doom-local-warnings))))
                       doom-modules))))
            ((debug error)
             (progn
               (if inhibit-message nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                      (or
                                       (cdr-safe ex)
                                       (car ex))))
                  :format nil))
               (setq doom-doctor--warnings
                     (cons
                      (doom-print--format
                       (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                          (or
                                           (cdr-safe ex)
                                           (car ex))))
                      doom-doctor--warnings)))
             (setq doom-modules nil)))
          (terpri)
          (let
              ((--dolist-tail--
                (list
                 (list doom-doctor--warnings "warning" 'yellow)
                 (list doom-doctor--errors "error" 'red))))
            (while --dolist-tail--
              (let
                  ((msg
                    (car --dolist-tail--)))
                (if
                    (car msg)
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'color
                                           (nth 2 msg)
                                           (if
                                               (cdr msg)
                                               "There are %d %ss!" "There is %d %s!")
                                           (length
                                            (car msg))
                                           (nth 1 msg)))
                       :format nil)))
                (setq --dolist-tail--
                      (cdr --dolist-tail--)))))
          (if
              (or doom-doctor--errors doom-doctor--warnings)
              nil
            (doom-print
             (doom-print--format
              (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
             :format nil))
          (exit! :pager\? "+G"))))))
  (--dolist-tail--
   (#s(doom-cli
       ("doom" "doctor")
       nil
       (("SUMMARY" . "Diagnoses common issues on your system.")
        ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
       nil nil nil nil
       (:benchmark nil :prefix
                   (doom)
                   :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
       (closure
        (t)
        (cli alist)
        (let nil
          (doom-print
           (doom-print--format "The doctor will see you now...\n")
           :format nil)
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking your Emacs version..."))
           :format nil)
          (let
              ((doom-print-indent
                (+
                 (if t doom-print-indent-increment 0)
                 doom-print-indent)))
            (cond
             ((string= ".50"
                       (substring emacs-version -3))
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                       doom-doctor--errors)))
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'fill
                                     (string-join
                                      (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                      "\n")))
                 :format nil)))
             ((> emacs-major-version 28)
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Emacs %s detected" emacs-version))
                   :format nil))
                (setq doom-doctor--warnings
                      (cons
                       (doom-print--format
                        (doom-print--class 'warn "Emacs %s detected" emacs-version))
                       doom-doctor--warnings)))
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'fill
                                     (string-join
                                      (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                      "\n")))
                 :format nil)))
             ((< emacs-major-version 27)
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                       doom-doctor--errors))))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for Doom's prerequisites..."))
           :format nil)
          (let
              ((doom-print-indent
                (+
                 (if t doom-print-indent-increment 0)
                 doom-print-indent)))
            (if
                (not
                 (executable-find "git"))
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                     :format nil))
                  (setq doom-doctor--errors
                        (cons
                         (doom-print--format
                          (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                         doom-doctor--errors)))
              (let
                  ((save-match-data-internal
                    (match-data)))
                (unwind-protect
                    (progn
                      (let*
                          ((version
                            (cdr
                             (doom-call-process "git" "version")))
                           (version
                            (and
                             (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                             (match-string 1 version))))
                        (if version
                            (if
                                (version< version "2.23")
                                (progn
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                       :format nil))
                                    (setq doom-doctor--errors
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                           doom-doctor--errors)))))
                          (progn
                            (if inhibit-message nil
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                               :format nil))
                            (setq doom-doctor--warnings
                                  (cons
                                   (doom-print--format
                                    (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                   doom-doctor--warnings))))))
                  (set-match-data save-match-data-internal 'evaporate))))
            (if
                (executable-find "rg")
                nil
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                       doom-doctor--errors)))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for Emacs config conflicts..."))
           :format nil)
          (if
              (file-exists-p "~/.emacs")
              (progn
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                     :format nil))
                  (setq doom-doctor--warnings
                        (cons
                         (doom-print--format
                          (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                         doom-doctor--warnings)))
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'fill
                                       (string-join
                                        (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                        "\n")))
                   :format nil))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for great Emacs features..."))
           :format nil)
          (if
              (functionp 'json-serialize)
              nil
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Emacs was not built with native JSON support"))
                 :format nil))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Emacs was not built with native JSON support"))
                     doom-doctor--warnings)))
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (doom-print
               (doom-print--format
                (doom-print--class 'fill
                                   (string-join
                                    (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                    "\n")))
               :format nil)))
          (if
              (featurep 'native-compile)
              nil
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Emacs was not built with native compilation support"))
                 :format nil))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Emacs was not built with native compilation support"))
                     doom-doctor--warnings)))
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (doom-print
               (doom-print--format
                (doom-print--class 'fill
                                   (string-join
                                    (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                    "\n")))
               :format nil)))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for private config conflicts..."))
           :format nil)
          (let*
              ((xdg-dir
                (concat
                 (or
                  (getenv "XDG_CONFIG_HOME")
                  "~/.config")
                 "/doom/"))
               (doom-dir
                (or
                 (getenv "DOOMDIR")
                 "~/.doom.d/"))
               (dir
                (if
                    (file-directory-p xdg-dir)
                    xdg-dir doom-dir)))
            (if
                (file-equal-p dir doom-emacs-dir)
                (progn
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                       (doom-print--class 'path dir)))
                   :format nil)
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'fill
                                         (string-join
                                          (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                          "\n")))
                     :format nil))))
            (if
                (and
                 (not
                  (file-equal-p xdg-dir doom-dir))
                 (file-directory-p xdg-dir)
                 (file-directory-p doom-dir))
                (progn
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Detected two private configs, in %s and %s")
                    (abbreviate-file-name xdg-dir)
                    doom-dir)
                   :format nil)
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'fill
                                         (string-join
                                          (list "The second directory will be ignored, as it has lower precedence.")
                                          "\n")))
                     :format nil)))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for stale elc files..."))
           :format nil)
          (elc-check-dir doom-emacs-dir)
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for problematic git global settings..."))
           :format nil)
          (if
              (executable-find "git")
              (if
                  (= 0
                     (car
                      (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                  (progn
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                         :format nil))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                             doom-doctor--warnings)))
                    (let
                        ((doom-print-indent
                          (+
                           (if t doom-print-indent-increment 0)
                           doom-print-indent)))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'fill
                                           (string-join
                                            (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                            "\n")))
                       :format nil))))
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                 :format nil))
              (setq doom-doctor--errors
                    (cons
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                     doom-doctor--errors))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking Doom Emacs..."))
           :format nil)
          (condition-case ex
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (let
                    ((noninteractive nil)
                     kill-emacs-query-functions kill-emacs-hook)
                  (defvar doom-reloading-p nil)
                  (if
                      (file-exists-p doom-autoloads-file)
                      nil
                    (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                  (require 'doom-start)
                  (doom-initialize-packages))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'success "Initialized Doom Emacs %s")
                  doom-version)
                 :format nil)
                (doom-print
                 (doom-print--format
                  (if
                      (hash-table-p doom-modules)
                      (doom-print--class 'success "Detected %d modules"
                                         (hash-table-count doom-modules))
                    (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                 :format nil)
                (doom-print
                 (doom-print--format
                  (doom-print--class 'success "Detected %d packages")
                  (length doom-packages))
                 :format nil)
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking Doom core for irregularities..."))
                 :format nil)
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (let
                      ((--dolist-tail--
                        (list "savehist" "projectile.cache")))
                    (while --dolist-tail--
                      (let
                          ((file
                            (car --dolist-tail--)))
                        (let*
                            ((size
                              (and t
                                   (condition-case nil
                                       (progn
                                         (doom-file-size file doom-cache-dir))
                                     (error nil)))))
                          (if size
                              (if
                                  (> size 1048576)
                                  (progn
                                    (progn
                                      (if inhibit-message nil
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                             (/ size 1024 1024.0)))
                                         :format nil))
                                      (setq doom-doctor--warnings
                                            (cons
                                             (doom-print--format
                                              (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                 (/ size 1024 1024.0)))
                                             doom-doctor--warnings)))
                                    (let
                                        ((doom-print-indent
                                          (+
                                           (if t doom-print-indent-increment 0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'fill
                                                           (string-join
                                                            (list "Consider deleting it from your system (manually)")
                                                            "\n")))
                                       :format nil))))
                            nil))
                        (setq --dolist-tail--
                              (cdr --dolist-tail--)))))
                  (if
                      (condition-case nil
                          (progn
                            (executable-find doom-projectile-fd-binary))
                        (error nil))
                      nil
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                         :format nil))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                             doom-doctor--warnings))))
                  (require 'projectile)
                  (if
                      (projectile-project-root "~")
                      (progn
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                             :format nil))
                          (setq doom-doctor--warnings
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                 doom-doctor--warnings)))
                        (let
                            ((doom-print-indent
                              (+
                               (if t doom-print-indent-increment 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'fill
                                               (string-join
                                                (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                "\n")))
                           :format nil))))
                  (if
                      (and
                       (file-equal-p doom-user-dir "~/.config/doom")
                       (file-directory-p "~/.doom.d"))
                      (progn
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                          (doom-print--class 'path doom-user-dir))
                         :format nil)
                        (let
                            ((doom-print-indent
                              (+
                               (if t doom-print-indent-increment 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'fill
                                               (string-join
                                                (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                "\n")))
                           :format nil))))
                  (if
                      (not
                       (executable-find "fc-list"))
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                           :format nil))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                               doom-doctor--warnings)))
                    (if
                        (and
                         (cond
                          ((eq system-type 'gnu/linux)
                           (let nil
                             (concat
                              (or
                               (getenv "XDG_DATA_HOME")
                               "~/.local/share")
                              "/fonts/")))
                          ((eq system-type 'darwin)
                           (let nil "~/Library/Fonts/")))
                         (require 'all-the-icons nil t))
                        (progn
                          (let
                              ((temp-buffer
                                (generate-new-buffer " *temp*" t)))
                            (save-current-buffer
                              (set-buffer temp-buffer)
                              (unwind-protect
                                  (progn
                                    (let
                                        ((errors 0))
                                      (let*
                                          ((output
                                            (doom-call-process "fc-list" "" "file"))
                                           (status
                                            (if output
                                                (car-safe
                                                 (prog1 output
                                                   (setq output
                                                         (cdr output))))
                                              (signal 'wrong-number-of-arguments
                                                      (list
                                                       '(status . output)
                                                       (length output))))))
                                        (if
                                            (not
                                             (= 0 status))
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                             :format nil)
                                          (insert
                                           (cdr
                                            (doom-call-process "fc-list" "" "file")))
                                          (let
                                              ((--dolist-tail-- all-the-icons-font-names))
                                            (while --dolist-tail--
                                              (let
                                                  ((font
                                                    (car --dolist-tail--)))
                                                (if
                                                    (save-excursion
                                                      (re-search-backward font nil t))
                                                    (doom-print
                                                     (doom-print--format
                                                      (doom-print--style 'green "Found font %s" font))
                                                     :format nil)
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'warn "Warning: couldn't find %S font")
                                                    font)
                                                   :format nil))
                                                (setq --dolist-tail--
                                                      (cdr --dolist-tail--)))))
                                          (if
                                              (> errors 0)
                                              (progn
                                                (let
                                                    ((doom-print-indent
                                                      (+
                                                       (if t doom-print-indent-increment 0)
                                                       doom-print-indent)))
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'fill
                                                                       (string-join
                                                                        (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                        "\n")))
                                                   :format nil))))))))
                                (and
                                 (buffer-name temp-buffer)
                                 (kill-buffer temp-buffer)))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                 :format nil)
                (if
                    (file-directory-p doom-user-dir)
                    (progn
                      (let
                          ((doom-print-indent
                            (+
                             (if t doom-print-indent-increment 0)
                             doom-print-indent)))
                        (elc-check-dir doom-user-dir))))
                (if doom-modules
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'start "Checking your enabled modules..."))
                       :format nil)
                      (advice-add #'require :around #'doom-shut-up-a)
                      (maphash
                       #'(lambda
                           (key plist)
                           (let
                               (doom-local-errors doom-local-warnings)
                             (let
                                 (doom-doctor--errors doom-doctor--warnings)
                               (condition-case ex
                                   (let
                                       ((doctor-file
                                         (doom-module-path
                                          (car key)
                                          (cdr key)
                                          "doctor.el"))
                                        (packages-file
                                         (doom-module-path
                                          (car key)
                                          (cdr key)
                                          "packages.el")))
                                     (let*
                                         ((doom-output-indent 6)
                                          (--cl-var--
                                           (let
                                               (doom-packages doom-disabled-packages)
                                             (load packages-file 'noerror 'nomessage)
                                             (mapcar #'car doom-packages)))
                                          (name nil))
                                       (while
                                           (consp --cl-var--)
                                         (setq name
                                               (car --cl-var--))
                                         (if
                                             (or
                                              (doom-package-get name :disable)
                                              (eval
                                               (doom-package-get name :ignore))
                                              (plist-member
                                               (doom-package-get name :recipe)
                                               :local-repo)
                                              (locate-library
                                               (symbol-name name))
                                              (doom-package-built-in-p name)
                                              (doom-package-installed-p name))
                                             (progn)
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Missing emacs package: %S")
                                             name)
                                            :format nil))
                                         (setq --cl-var--
                                               (cdr --cl-var--)))
                                       nil)
                                     (let
                                         ((inhibit-message t))
                                       (load doctor-file 'noerror 'nomessage)))
                                 ((debug file-missing)
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "%s"
                                                           (error-message-string ex)))
                                       :format nil))
                                    (setq doom-doctor--errors
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'error "%s"
                                                               (error-message-string ex)))
                                           doom-doctor--errors))))
                                 ((debug error)
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "Syntax error: %s" ex))
                                       :format nil))
                                    (setq doom-doctor--errors
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'error "Syntax error: %s" ex))
                                           doom-doctor--errors)))))
                               (if
                                   (or doom-doctor--errors doom-doctor--warnings)
                                   (progn
                                     (let
                                         ((doom-print-indent
                                           (+
                                            (if t doom-print-indent-increment 0)
                                            doom-print-indent)))
                                       (doom-print
                                        (doom-print--format
                                         (doom-print--class 'start
                                                            (doom-print--style 'bold "%s %s"))
                                         (car key)
                                         (cdr key))
                                        :format nil)
                                       (doom-print
                                        (doom-print--format "%s"
                                                            (string-join
                                                             (append doom-doctor--errors doom-doctor--warnings)
                                                             "\n"))
                                        :format nil))
                                     (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                             (setq doom-doctor--errors
                                   (append doom-doctor--errors doom-local-errors))
                             (setq doom-doctor--warnings
                                   (append doom-doctor--warnings doom-local-warnings))))
                       doom-modules))))
            ((debug error)
             (progn
               (if inhibit-message nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                      (or
                                       (cdr-safe ex)
                                       (car ex))))
                  :format nil))
               (setq doom-doctor--warnings
                     (cons
                      (doom-print--format
                       (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                          (or
                                           (cdr-safe ex)
                                           (car ex))))
                      doom-doctor--warnings)))
             (setq doom-modules nil)))
          (terpri)
          (let
              ((--dolist-tail--
                (list
                 (list doom-doctor--warnings "warning" 'yellow)
                 (list doom-doctor--errors "error" 'red))))
            (while --dolist-tail--
              (let
                  ((msg
                    (car --dolist-tail--)))
                (if
                    (car msg)
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'color
                                           (nth 2 msg)
                                           (if
                                               (cdr msg)
                                               "There are %d %ss!" "There is %d %s!")
                                           (length
                                            (car msg))
                                           (nth 1 msg)))
                       :format nil)))
                (setq --dolist-tail--
                      (cdr --dolist-tail--)))))
          (if
              (or doom-doctor--errors doom-doctor--warnings)
              nil
            (doom-print
             (doom-print--format
              (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
             :format nil))
          (exit! :pager\? "+G"))))))
  (x2 #s(doom-cli
         ("doom" "doctor")
         nil
         (("SUMMARY" . "Diagnoses common issues on your system.")
          ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
         nil nil nil nil
         (:benchmark nil :prefix
                     (doom)
                     :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
         (closure
          (t)
          (cli alist)
          (let nil
            (doom-print
             (doom-print--format "The doctor will see you now...\n")
             :format nil)
            (doom-print
             (doom-print--format
              (doom-print--class 'start "Checking your Emacs version..."))
             :format nil)
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (cond
               ((string= ".50"
                         (substring emacs-version -3))
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                     :format nil))
                  (setq doom-doctor--errors
                        (cons
                         (doom-print--format
                          (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                         doom-doctor--errors)))
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'fill
                                       (string-join
                                        (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                        "\n")))
                   :format nil)))
               ((> emacs-major-version 28)
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'warn "Emacs %s detected" emacs-version))
                     :format nil))
                  (setq doom-doctor--warnings
                        (cons
                         (doom-print--format
                          (doom-print--class 'warn "Emacs %s detected" emacs-version))
                         doom-doctor--warnings)))
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'fill
                                       (string-join
                                        (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                        "\n")))
                   :format nil)))
               ((< emacs-major-version 27)
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                     :format nil))
                  (setq doom-doctor--errors
                        (cons
                         (doom-print--format
                          (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                         doom-doctor--errors))))))
            (doom-print
             (doom-print--format
              (doom-print--class 'start "Checking for Doom's prerequisites..."))
             :format nil)
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (if
                  (not
                   (executable-find "git"))
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                       :format nil))
                    (setq doom-doctor--errors
                          (cons
                           (doom-print--format
                            (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                           doom-doctor--errors)))
                (let
                    ((save-match-data-internal
                      (match-data)))
                  (unwind-protect
                      (progn
                        (let*
                            ((version
                              (cdr
                               (doom-call-process "git" "version")))
                             (version
                              (and
                               (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                               (match-string 1 version))))
                          (if version
                              (if
                                  (version< version "2.23")
                                  (progn
                                    (progn
                                      (if inhibit-message nil
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                         :format nil))
                                      (setq doom-doctor--errors
                                            (cons
                                             (doom-print--format
                                              (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                             doom-doctor--errors)))))
                            (progn
                              (if inhibit-message nil
                                (doom-print
                                 (doom-print--format
                                  (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                 :format nil))
                              (setq doom-doctor--warnings
                                    (cons
                                     (doom-print--format
                                      (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                     doom-doctor--warnings))))))
                    (set-match-data save-match-data-internal 'evaporate))))
              (if
                  (executable-find "rg")
                  nil
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                     :format nil))
                  (setq doom-doctor--errors
                        (cons
                         (doom-print--format
                          (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                         doom-doctor--errors)))))
            (doom-print
             (doom-print--format
              (doom-print--class 'start "Checking for Emacs config conflicts..."))
             :format nil)
            (if
                (file-exists-p "~/.emacs")
                (progn
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                       :format nil))
                    (setq doom-doctor--warnings
                          (cons
                           (doom-print--format
                            (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                           doom-doctor--warnings)))
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'fill
                                         (string-join
                                          (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                          "\n")))
                     :format nil))))
            (doom-print
             (doom-print--format
              (doom-print--class 'start "Checking for great Emacs features..."))
             :format nil)
            (if
                (functionp 'json-serialize)
                nil
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Emacs was not built with native JSON support"))
                   :format nil))
                (setq doom-doctor--warnings
                      (cons
                       (doom-print--format
                        (doom-print--class 'warn "Emacs was not built with native JSON support"))
                       doom-doctor--warnings)))
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'fill
                                     (string-join
                                      (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                      "\n")))
                 :format nil)))
            (if
                (featurep 'native-compile)
                nil
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Emacs was not built with native compilation support"))
                   :format nil))
                (setq doom-doctor--warnings
                      (cons
                       (doom-print--format
                        (doom-print--class 'warn "Emacs was not built with native compilation support"))
                       doom-doctor--warnings)))
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'fill
                                     (string-join
                                      (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                      "\n")))
                 :format nil)))
            (doom-print
             (doom-print--format
              (doom-print--class 'start "Checking for private config conflicts..."))
             :format nil)
            (let*
                ((xdg-dir
                  (concat
                   (or
                    (getenv "XDG_CONFIG_HOME")
                    "~/.config")
                   "/doom/"))
                 (doom-dir
                  (or
                   (getenv "DOOMDIR")
                   "~/.doom.d/"))
                 (dir
                  (if
                      (file-directory-p xdg-dir)
                      xdg-dir doom-dir)))
              (if
                  (file-equal-p dir doom-emacs-dir)
                  (progn
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                         (doom-print--class 'path dir)))
                     :format nil)
                    (let
                        ((doom-print-indent
                          (+
                           (if t doom-print-indent-increment 0)
                           doom-print-indent)))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'fill
                                           (string-join
                                            (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                            "\n")))
                       :format nil))))
              (if
                  (and
                   (not
                    (file-equal-p xdg-dir doom-dir))
                   (file-directory-p xdg-dir)
                   (file-directory-p doom-dir))
                  (progn
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'warn "Detected two private configs, in %s and %s")
                      (abbreviate-file-name xdg-dir)
                      doom-dir)
                     :format nil)
                    (let
                        ((doom-print-indent
                          (+
                           (if t doom-print-indent-increment 0)
                           doom-print-indent)))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'fill
                                           (string-join
                                            (list "The second directory will be ignored, as it has lower precedence.")
                                            "\n")))
                       :format nil)))))
            (doom-print
             (doom-print--format
              (doom-print--class 'start "Checking for stale elc files..."))
             :format nil)
            (elc-check-dir doom-emacs-dir)
            (doom-print
             (doom-print--format
              (doom-print--class 'start "Checking for problematic git global settings..."))
             :format nil)
            (if
                (executable-find "git")
                (if
                    (= 0
                       (car
                        (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                    (progn
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                           :format nil))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                               doom-doctor--warnings)))
                      (let
                          ((doom-print-indent
                            (+
                             (if t doom-print-indent-increment 0)
                             doom-print-indent)))
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'fill
                                             (string-join
                                              (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                              "\n")))
                         :format nil))))
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                       doom-doctor--errors))))
            (doom-print
             (doom-print--format
              (doom-print--class 'start "Checking Doom Emacs..."))
             :format nil)
            (condition-case ex
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (let
                      ((noninteractive nil)
                       kill-emacs-query-functions kill-emacs-hook)
                    (defvar doom-reloading-p nil)
                    (if
                        (file-exists-p doom-autoloads-file)
                        nil
                      (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                    (require 'doom-start)
                    (doom-initialize-packages))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'success "Initialized Doom Emacs %s")
                    doom-version)
                   :format nil)
                  (doom-print
                   (doom-print--format
                    (if
                        (hash-table-p doom-modules)
                        (doom-print--class 'success "Detected %d modules"
                                           (hash-table-count doom-modules))
                      (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                   :format nil)
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'success "Detected %d packages")
                    (length doom-packages))
                   :format nil)
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'start "Checking Doom core for irregularities..."))
                   :format nil)
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (let
                        ((--dolist-tail--
                          (list "savehist" "projectile.cache")))
                      (while --dolist-tail--
                        (let
                            ((file
                              (car --dolist-tail--)))
                          (let*
                              ((size
                                (and t
                                     (condition-case nil
                                         (progn
                                           (doom-file-size file doom-cache-dir))
                                       (error nil)))))
                            (if size
                                (if
                                    (> size 1048576)
                                    (progn
                                      (progn
                                        (if inhibit-message nil
                                          (doom-print
                                           (doom-print--format
                                            (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                               (/ size 1024 1024.0)))
                                           :format nil))
                                        (setq doom-doctor--warnings
                                              (cons
                                               (doom-print--format
                                                (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                   (/ size 1024 1024.0)))
                                               doom-doctor--warnings)))
                                      (let
                                          ((doom-print-indent
                                            (+
                                             (if t doom-print-indent-increment 0)
                                             doom-print-indent)))
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'fill
                                                             (string-join
                                                              (list "Consider deleting it from your system (manually)")
                                                              "\n")))
                                         :format nil))))
                              nil))
                          (setq --dolist-tail--
                                (cdr --dolist-tail--)))))
                    (if
                        (condition-case nil
                            (progn
                              (executable-find doom-projectile-fd-binary))
                          (error nil))
                        nil
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                           :format nil))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                               doom-doctor--warnings))))
                    (require 'projectile)
                    (if
                        (projectile-project-root "~")
                        (progn
                          (progn
                            (if inhibit-message nil
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                               :format nil))
                            (setq doom-doctor--warnings
                                  (cons
                                   (doom-print--format
                                    (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                   doom-doctor--warnings)))
                          (let
                              ((doom-print-indent
                                (+
                                 (if t doom-print-indent-increment 0)
                                 doom-print-indent)))
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'fill
                                                 (string-join
                                                  (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                  "\n")))
                             :format nil))))
                    (if
                        (and
                         (file-equal-p doom-user-dir "~/.config/doom")
                         (file-directory-p "~/.doom.d"))
                        (progn
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                            (doom-print--class 'path doom-user-dir))
                           :format nil)
                          (let
                              ((doom-print-indent
                                (+
                                 (if t doom-print-indent-increment 0)
                                 doom-print-indent)))
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'fill
                                                 (string-join
                                                  (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                  "\n")))
                             :format nil))))
                    (if
                        (not
                         (executable-find "fc-list"))
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                             :format nil))
                          (setq doom-doctor--warnings
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                 doom-doctor--warnings)))
                      (if
                          (and
                           (cond
                            ((eq system-type 'gnu/linux)
                             (let nil
                               (concat
                                (or
                                 (getenv "XDG_DATA_HOME")
                                 "~/.local/share")
                                "/fonts/")))
                            ((eq system-type 'darwin)
                             (let nil "~/Library/Fonts/")))
                           (require 'all-the-icons nil t))
                          (progn
                            (let
                                ((temp-buffer
                                  (generate-new-buffer " *temp*" t)))
                              (save-current-buffer
                                (set-buffer temp-buffer)
                                (unwind-protect
                                    (progn
                                      (let
                                          ((errors 0))
                                        (let*
                                            ((output
                                              (doom-call-process "fc-list" "" "file"))
                                             (status
                                              (if output
                                                  (car-safe
                                                   (prog1 output
                                                     (setq output
                                                           (cdr output))))
                                                (signal 'wrong-number-of-arguments
                                                        (list
                                                         '(status . output)
                                                         (length output))))))
                                          (if
                                              (not
                                               (= 0 status))
                                              (doom-print
                                               (doom-print--format
                                                (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                               :format nil)
                                            (insert
                                             (cdr
                                              (doom-call-process "fc-list" "" "file")))
                                            (let
                                                ((--dolist-tail-- all-the-icons-font-names))
                                              (while --dolist-tail--
                                                (let
                                                    ((font
                                                      (car --dolist-tail--)))
                                                  (if
                                                      (save-excursion
                                                        (re-search-backward font nil t))
                                                      (doom-print
                                                       (doom-print--format
                                                        (doom-print--style 'green "Found font %s" font))
                                                       :format nil)
                                                    (doom-print
                                                     (doom-print--format
                                                      (doom-print--class 'warn "Warning: couldn't find %S font")
                                                      font)
                                                     :format nil))
                                                  (setq --dolist-tail--
                                                        (cdr --dolist-tail--)))))
                                            (if
                                                (> errors 0)
                                                (progn
                                                  (let
                                                      ((doom-print-indent
                                                        (+
                                                         (if t doom-print-indent-increment 0)
                                                         doom-print-indent)))
                                                    (doom-print
                                                     (doom-print--format
                                                      (doom-print--class 'fill
                                                                         (string-join
                                                                          (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                          "\n")))
                                                     :format nil))))))))
                                  (and
                                   (buffer-name temp-buffer)
                                   (kill-buffer temp-buffer)))))))))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                   :format nil)
                  (if
                      (file-directory-p doom-user-dir)
                      (progn
                        (let
                            ((doom-print-indent
                              (+
                               (if t doom-print-indent-increment 0)
                               doom-print-indent)))
                          (elc-check-dir doom-user-dir))))
                  (if doom-modules
                      (progn
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'start "Checking your enabled modules..."))
                         :format nil)
                        (advice-add #'require :around #'doom-shut-up-a)
                        (maphash
                         #'(lambda
                             (key plist)
                             (let
                                 (doom-local-errors doom-local-warnings)
                               (let
                                   (doom-doctor--errors doom-doctor--warnings)
                                 (condition-case ex
                                     (let
                                         ((doctor-file
                                           (doom-module-path
                                            (car key)
                                            (cdr key)
                                            "doctor.el"))
                                          (packages-file
                                           (doom-module-path
                                            (car key)
                                            (cdr key)
                                            "packages.el")))
                                       (let*
                                           ((doom-output-indent 6)
                                            (--cl-var--
                                             (let
                                                 (doom-packages doom-disabled-packages)
                                               (load packages-file 'noerror 'nomessage)
                                               (mapcar #'car doom-packages)))
                                            (name nil))
                                         (while
                                             (consp --cl-var--)
                                           (setq name
                                                 (car --cl-var--))
                                           (if
                                               (or
                                                (doom-package-get name :disable)
                                                (eval
                                                 (doom-package-get name :ignore))
                                                (plist-member
                                                 (doom-package-get name :recipe)
                                                 :local-repo)
                                                (locate-library
                                                 (symbol-name name))
                                                (doom-package-built-in-p name)
                                                (doom-package-installed-p name))
                                               (progn)
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'error "Missing emacs package: %S")
                                               name)
                                              :format nil))
                                           (setq --cl-var--
                                                 (cdr --cl-var--)))
                                         nil)
                                       (let
                                           ((inhibit-message t))
                                         (load doctor-file 'noerror 'nomessage)))
                                   ((debug file-missing)
                                    (progn
                                      (if inhibit-message nil
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'error "%s"
                                                             (error-message-string ex)))
                                         :format nil))
                                      (setq doom-doctor--errors
                                            (cons
                                             (doom-print--format
                                              (doom-print--class 'error "%s"
                                                                 (error-message-string ex)))
                                             doom-doctor--errors))))
                                   ((debug error)
                                    (progn
                                      (if inhibit-message nil
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'error "Syntax error: %s" ex))
                                         :format nil))
                                      (setq doom-doctor--errors
                                            (cons
                                             (doom-print--format
                                              (doom-print--class 'error "Syntax error: %s" ex))
                                             doom-doctor--errors)))))
                                 (if
                                     (or doom-doctor--errors doom-doctor--warnings)
                                     (progn
                                       (let
                                           ((doom-print-indent
                                             (+
                                              (if t doom-print-indent-increment 0)
                                              doom-print-indent)))
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--class 'start
                                                              (doom-print--style 'bold "%s %s"))
                                           (car key)
                                           (cdr key))
                                          :format nil)
                                         (doom-print
                                          (doom-print--format "%s"
                                                              (string-join
                                                               (append doom-doctor--errors doom-doctor--warnings)
                                                               "\n"))
                                          :format nil))
                                       (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                               (setq doom-doctor--errors
                                     (append doom-doctor--errors doom-local-errors))
                               (setq doom-doctor--warnings
                                     (append doom-doctor--warnings doom-local-warnings))))
                         doom-modules))))
              ((debug error)
               (progn
                 (if inhibit-message nil
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                        (or
                                         (cdr-safe ex)
                                         (car ex))))
                    :format nil))
                 (setq doom-doctor--warnings
                       (cons
                        (doom-print--format
                         (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                            (or
                                             (cdr-safe ex)
                                             (car ex))))
                        doom-doctor--warnings)))
               (setq doom-modules nil)))
            (terpri)
            (let
                ((--dolist-tail--
                  (list
                   (list doom-doctor--warnings "warning" 'yellow)
                   (list doom-doctor--errors "error" 'red))))
              (while --dolist-tail--
                (let
                    ((msg
                      (car --dolist-tail--)))
                  (if
                      (car msg)
                      (progn
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'color
                                             (nth 2 msg)
                                             (if
                                                 (cdr msg)
                                                 "There are %d %ss!" "There is %d %s!")
                                             (length
                                              (car msg))
                                             (nth 1 msg)))
                         :format nil)))
                  (setq --dolist-tail--
                        (cdr --dolist-tail--)))))
            (if
                (or doom-doctor--errors doom-doctor--warnings)
                nil
              (doom-print
               (doom-print--format
                (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
               :format nil))
            (exit! :pager\? "+G")))))))

;;;; 25
((while --dolist-tail--
   (let
       ((x2
         (car --dolist-tail--)))
     (progn
       (ignore
        (consp x2))
       (let*
           ((x3
             (car-safe x2))
            (x4
             (cdr-safe x2)))
         (let
             ((cli x3)
              (bindings x4))
           (doom-cli-execute cli bindings))))
     (setq --dolist-tail--
           (cdr --dolist-tail--))))
 nil)

;;;; 26
((let
     ((--dolist-tail--
       (nreverse runners)))
   (while --dolist-tail--
     (let
         ((x2
           (car --dolist-tail--)))
       (progn
         (ignore
          (consp x2))
         (let*
             ((x3
               (car-safe x2))
              (x4
               (cdr-safe x2)))
           (let
               ((cli x3)
                (bindings x4))
             (doom-cli-execute cli bindings))))
       (setq --dolist-tail--
             (cdr --dolist-tail--)))))
 ((context . #s(doom-cli-context
                (25359 42750 192253 0)
                13992 -1 nil nil nil "doom" nil nil
                ("doom" "doctor")
                nil
                ("doctor")
                (("--eval")
                 ("-E")
                 ("--strict-load")
                 ("--load")
                 ("-L")
                 ("--color")
                 ("--profile")
                 ("--pager")
                 ("--emacsdir")
                 ("--doomdir")
                 ("--debug")
                 ("-D")
                 ("--force")
                 ("-!"))
                ((t)
                 (("doom" "doctor"))
                 (("doom")
                  "doctor"))
                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (command "doom" "doctor")
  (cli . #s(doom-cli
            ("doom" "doctor")
            nil
            (("SUMMARY" . "Diagnoses common issues on your system.")
             ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
            nil nil nil nil
            (:benchmark nil :prefix
                        (doom)
                        :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
            (closure
             (t)
             (cli alist)
             (let nil
               (doom-print
                (doom-print--format "The doctor will see you now...\n")
                :format nil)
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking your Emacs version..."))
                :format nil)
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (cond
                  ((string= ".50"
                            (substring emacs-version -3))
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                            doom-doctor--errors)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                           "\n")))
                      :format nil)))
                  ((> emacs-major-version 28)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Emacs %s detected" emacs-version))
                        :format nil))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Emacs %s detected" emacs-version))
                            doom-doctor--warnings)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                           "\n")))
                      :format nil)))
                  ((< emacs-major-version 27)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                            doom-doctor--errors))))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for Doom's prerequisites..."))
                :format nil)
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (if
                     (not
                      (executable-find "git"))
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                          :format nil))
                       (setq doom-doctor--errors
                             (cons
                              (doom-print--format
                               (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                              doom-doctor--errors)))
                   (let
                       ((save-match-data-internal
                         (match-data)))
                     (unwind-protect
                         (progn
                           (let*
                               ((version
                                 (cdr
                                  (doom-call-process "git" "version")))
                                (version
                                 (and
                                  (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                  (match-string 1 version))))
                             (if version
                                 (if
                                     (version< version "2.23")
                                     (progn
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                doom-doctor--errors)))))
                               (progn
                                 (if inhibit-message nil
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                    :format nil))
                                 (setq doom-doctor--warnings
                                       (cons
                                        (doom-print--format
                                         (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                        doom-doctor--warnings))))))
                       (set-match-data save-match-data-internal 'evaporate))))
                 (if
                     (executable-find "rg")
                     nil
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                            doom-doctor--errors)))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for Emacs config conflicts..."))
                :format nil)
               (if
                   (file-exists-p "~/.emacs")
                   (progn
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                          :format nil))
                       (setq doom-doctor--warnings
                             (cons
                              (doom-print--format
                               (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                              doom-doctor--warnings)))
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'fill
                                            (string-join
                                             (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                             "\n")))
                        :format nil))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for great Emacs features..."))
                :format nil)
               (if
                   (functionp 'json-serialize)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native JSON support"))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native JSON support"))
                          doom-doctor--warnings)))
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'fill
                                        (string-join
                                         (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                         "\n")))
                    :format nil)))
               (if
                   (featurep 'native-compile)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native compilation support"))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native compilation support"))
                          doom-doctor--warnings)))
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'fill
                                        (string-join
                                         (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                         "\n")))
                    :format nil)))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for private config conflicts..."))
                :format nil)
               (let*
                   ((xdg-dir
                     (concat
                      (or
                       (getenv "XDG_CONFIG_HOME")
                       "~/.config")
                      "/doom/"))
                    (doom-dir
                     (or
                      (getenv "DOOMDIR")
                      "~/.doom.d/"))
                    (dir
                     (if
                         (file-directory-p xdg-dir)
                         xdg-dir doom-dir)))
                 (if
                     (file-equal-p dir doom-emacs-dir)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                            (doom-print--class 'path dir)))
                        :format nil)
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'fill
                                              (string-join
                                               (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                               "\n")))
                          :format nil))))
                 (if
                     (and
                      (not
                       (file-equal-p xdg-dir doom-dir))
                      (file-directory-p xdg-dir)
                      (file-directory-p doom-dir))
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Detected two private configs, in %s and %s")
                         (abbreviate-file-name xdg-dir)
                         doom-dir)
                        :format nil)
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'fill
                                              (string-join
                                               (list "The second directory will be ignored, as it has lower precedence.")
                                               "\n")))
                          :format nil)))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for stale elc files..."))
                :format nil)
               (elc-check-dir doom-emacs-dir)
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for problematic git global settings..."))
                :format nil)
               (if
                   (executable-find "git")
                   (if
                       (= 0
                          (car
                           (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                       (progn
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                              :format nil))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                  doom-doctor--warnings)))
                         (let
                             ((doom-print-indent
                               (+
                                (if t doom-print-indent-increment 0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'fill
                                                (string-join
                                                 (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                                 "\n")))
                            :format nil))))
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                      :format nil))
                   (setq doom-doctor--errors
                         (cons
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                          doom-doctor--errors))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking Doom Emacs..."))
                :format nil)
               (condition-case ex
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (let
                         ((noninteractive nil)
                          kill-emacs-query-functions kill-emacs-hook)
                       (defvar doom-reloading-p nil)
                       (if
                           (file-exists-p doom-autoloads-file)
                           nil
                         (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                       (require 'doom-start)
                       (doom-initialize-packages))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'success "Initialized Doom Emacs %s")
                       doom-version)
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (if
                           (hash-table-p doom-modules)
                           (doom-print--class 'success "Detected %d modules"
                                              (hash-table-count doom-modules))
                         (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'success "Detected %d packages")
                       (length doom-packages))
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'start "Checking Doom core for irregularities..."))
                      :format nil)
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (let
                           ((--dolist-tail--
                             (list "savehist" "projectile.cache")))
                         (while --dolist-tail--
                           (let
                               ((file
                                 (car --dolist-tail--)))
                             (let*
                                 ((size
                                   (and t
                                        (condition-case nil
                                            (progn
                                              (doom-file-size file doom-cache-dir))
                                          (error nil)))))
                               (if size
                                   (if
                                       (> size 1048576)
                                       (progn
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                  (/ size 1024 1024.0)))
                                              :format nil))
                                           (setq doom-doctor--warnings
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                      (/ size 1024 1024.0)))
                                                  doom-doctor--warnings)))
                                         (let
                                             ((doom-print-indent
                                               (+
                                                (if t doom-print-indent-increment 0)
                                                doom-print-indent)))
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'fill
                                                                (string-join
                                                                 (list "Consider deleting it from your system (manually)")
                                                                 "\n")))
                                            :format nil))))
                                 nil))
                             (setq --dolist-tail--
                                   (cdr --dolist-tail--)))))
                       (if
                           (condition-case nil
                               (progn
                                 (executable-find doom-projectile-fd-binary))
                             (error nil))
                           nil
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                              :format nil))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                  doom-doctor--warnings))))
                       (require 'projectile)
                       (if
                           (projectile-project-root "~")
                           (progn
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                  :format nil))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                      doom-doctor--warnings)))
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'fill
                                                    (string-join
                                                     (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                     "\n")))
                                :format nil))))
                       (if
                           (and
                            (file-equal-p doom-user-dir "~/.config/doom")
                            (file-directory-p "~/.doom.d"))
                           (progn
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                               (doom-print--class 'path doom-user-dir))
                              :format nil)
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'fill
                                                    (string-join
                                                     (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                     "\n")))
                                :format nil))))
                       (if
                           (not
                            (executable-find "fc-list"))
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                :format nil))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                    doom-doctor--warnings)))
                         (if
                             (and
                              (cond
                               ((eq system-type 'gnu/linux)
                                (let nil
                                  (concat
                                   (or
                                    (getenv "XDG_DATA_HOME")
                                    "~/.local/share")
                                   "/fonts/")))
                               ((eq system-type 'darwin)
                                (let nil "~/Library/Fonts/")))
                              (require 'all-the-icons nil t))
                             (progn
                               (let
                                   ((temp-buffer
                                     (generate-new-buffer " *temp*" t)))
                                 (save-current-buffer
                                   (set-buffer temp-buffer)
                                   (unwind-protect
                                       (progn
                                         (let
                                             ((errors 0))
                                           (let*
                                               ((output
                                                 (doom-call-process "fc-list" "" "file"))
                                                (status
                                                 (if output
                                                     (car-safe
                                                      (prog1 output
                                                        (setq output
                                                              (cdr output))))
                                                   (signal 'wrong-number-of-arguments
                                                           (list
                                                            '(status . output)
                                                            (length output))))))
                                             (if
                                                 (not
                                                  (= 0 status))
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                                  :format nil)
                                               (insert
                                                (cdr
                                                 (doom-call-process "fc-list" "" "file")))
                                               (let
                                                   ((--dolist-tail-- all-the-icons-font-names))
                                                 (while --dolist-tail--
                                                   (let
                                                       ((font
                                                         (car --dolist-tail--)))
                                                     (if
                                                         (save-excursion
                                                           (re-search-backward font nil t))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--style 'green "Found font %s" font))
                                                          :format nil)
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'warn "Warning: couldn't find %S font")
                                                         font)
                                                        :format nil))
                                                     (setq --dolist-tail--
                                                           (cdr --dolist-tail--)))))
                                               (if
                                                   (> errors 0)
                                                   (progn
                                                     (let
                                                         ((doom-print-indent
                                                           (+
                                                            (if t doom-print-indent-increment 0)
                                                            doom-print-indent)))
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'fill
                                                                            (string-join
                                                                             (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                             "\n")))
                                                        :format nil))))))))
                                     (and
                                      (buffer-name temp-buffer)
                                      (kill-buffer temp-buffer)))))))))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                      :format nil)
                     (if
                         (file-directory-p doom-user-dir)
                         (progn
                           (let
                               ((doom-print-indent
                                 (+
                                  (if t doom-print-indent-increment 0)
                                  doom-print-indent)))
                             (elc-check-dir doom-user-dir))))
                     (if doom-modules
                         (progn
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'start "Checking your enabled modules..."))
                            :format nil)
                           (advice-add #'require :around #'doom-shut-up-a)
                           (maphash
                            #'(lambda
                                (key plist)
                                (let
                                    (doom-local-errors doom-local-warnings)
                                  (let
                                      (doom-doctor--errors doom-doctor--warnings)
                                    (condition-case ex
                                        (let
                                            ((doctor-file
                                              (doom-module-path
                                               (car key)
                                               (cdr key)
                                               "doctor.el"))
                                             (packages-file
                                              (doom-module-path
                                               (car key)
                                               (cdr key)
                                               "packages.el")))
                                          (let*
                                              ((doom-output-indent 6)
                                               (--cl-var--
                                                (let
                                                    (doom-packages doom-disabled-packages)
                                                  (load packages-file 'noerror 'nomessage)
                                                  (mapcar #'car doom-packages)))
                                               (name nil))
                                            (while
                                                (consp --cl-var--)
                                              (setq name
                                                    (car --cl-var--))
                                              (if
                                                  (or
                                                   (doom-package-get name :disable)
                                                   (eval
                                                    (doom-package-get name :ignore))
                                                   (plist-member
                                                    (doom-package-get name :recipe)
                                                    :local-repo)
                                                   (locate-library
                                                    (symbol-name name))
                                                   (doom-package-built-in-p name)
                                                   (doom-package-installed-p name))
                                                  (progn)
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'error "Missing emacs package: %S")
                                                  name)
                                                 :format nil))
                                              (setq --cl-var--
                                                    (cdr --cl-var--)))
                                            nil)
                                          (let
                                              ((inhibit-message t))
                                            (load doctor-file 'noerror 'nomessage)))
                                      ((debug file-missing)
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "%s"
                                                                (error-message-string ex)))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "%s"
                                                                    (error-message-string ex)))
                                                doom-doctor--errors))))
                                      ((debug error)
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Syntax error: %s" ex))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "Syntax error: %s" ex))
                                                doom-doctor--errors)))))
                                    (if
                                        (or doom-doctor--errors doom-doctor--warnings)
                                        (progn
                                          (let
                                              ((doom-print-indent
                                                (+
                                                 (if t doom-print-indent-increment 0)
                                                 doom-print-indent)))
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'start
                                                                 (doom-print--style 'bold "%s %s"))
                                              (car key)
                                              (cdr key))
                                             :format nil)
                                            (doom-print
                                             (doom-print--format "%s"
                                                                 (string-join
                                                                  (append doom-doctor--errors doom-doctor--warnings)
                                                                  "\n"))
                                             :format nil))
                                          (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                                  (setq doom-doctor--errors
                                        (append doom-doctor--errors doom-local-errors))
                                  (setq doom-doctor--warnings
                                        (append doom-doctor--warnings doom-local-warnings))))
                            doom-modules))))
                 ((debug error)
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                           (or
                                            (cdr-safe ex)
                                            (car ex))))
                       :format nil))
                    (setq doom-doctor--warnings
                          (cons
                           (doom-print--format
                            (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                               (or
                                                (cdr-safe ex)
                                                (car ex))))
                           doom-doctor--warnings)))
                  (setq doom-modules nil)))
               (terpri)
               (let
                   ((--dolist-tail--
                     (list
                      (list doom-doctor--warnings "warning" 'yellow)
                      (list doom-doctor--errors "error" 'red))))
                 (while --dolist-tail--
                   (let
                       ((msg
                         (car --dolist-tail--)))
                     (if
                         (car msg)
                         (progn
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'color
                                                (nth 2 msg)
                                                (if
                                                    (cdr msg)
                                                    "There are %d %ss!" "There is %d %s!")
                                                (length
                                                 (car msg))
                                                (nth 1 msg)))
                            :format nil)))
                     (setq --dolist-tail--
                           (cdr --dolist-tail--)))))
               (if
                   (or doom-doctor--errors doom-doctor--warnings)
                   nil
                 (doom-print
                  (doom-print--format
                   (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
                  :format nil))
               (exit! :pager\? "+G")))))
  (prefix . "doom")
  (seen t)
  (runners
   (#s(doom-cli
       ("doom" "doctor")
       nil
       (("SUMMARY" . "Diagnoses common issues on your system.")
        ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
       nil nil nil nil
       (:benchmark nil :prefix
                   (doom)
                   :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
       (closure
        (t)
        (cli alist)
        (let nil
          (doom-print
           (doom-print--format "The doctor will see you now...\n")
           :format nil)
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking your Emacs version..."))
           :format nil)
          (let
              ((doom-print-indent
                (+
                 (if t doom-print-indent-increment 0)
                 doom-print-indent)))
            (cond
             ((string= ".50"
                       (substring emacs-version -3))
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                       doom-doctor--errors)))
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'fill
                                     (string-join
                                      (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                      "\n")))
                 :format nil)))
             ((> emacs-major-version 28)
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Emacs %s detected" emacs-version))
                   :format nil))
                (setq doom-doctor--warnings
                      (cons
                       (doom-print--format
                        (doom-print--class 'warn "Emacs %s detected" emacs-version))
                       doom-doctor--warnings)))
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'fill
                                     (string-join
                                      (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                      "\n")))
                 :format nil)))
             ((< emacs-major-version 27)
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                       doom-doctor--errors))))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for Doom's prerequisites..."))
           :format nil)
          (let
              ((doom-print-indent
                (+
                 (if t doom-print-indent-increment 0)
                 doom-print-indent)))
            (if
                (not
                 (executable-find "git"))
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                     :format nil))
                  (setq doom-doctor--errors
                        (cons
                         (doom-print--format
                          (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                         doom-doctor--errors)))
              (let
                  ((save-match-data-internal
                    (match-data)))
                (unwind-protect
                    (progn
                      (let*
                          ((version
                            (cdr
                             (doom-call-process "git" "version")))
                           (version
                            (and
                             (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                             (match-string 1 version))))
                        (if version
                            (if
                                (version< version "2.23")
                                (progn
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                       :format nil))
                                    (setq doom-doctor--errors
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                           doom-doctor--errors)))))
                          (progn
                            (if inhibit-message nil
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                               :format nil))
                            (setq doom-doctor--warnings
                                  (cons
                                   (doom-print--format
                                    (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                   doom-doctor--warnings))))))
                  (set-match-data save-match-data-internal 'evaporate))))
            (if
                (executable-find "rg")
                nil
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                       doom-doctor--errors)))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for Emacs config conflicts..."))
           :format nil)
          (if
              (file-exists-p "~/.emacs")
              (progn
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                     :format nil))
                  (setq doom-doctor--warnings
                        (cons
                         (doom-print--format
                          (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                         doom-doctor--warnings)))
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'fill
                                       (string-join
                                        (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                        "\n")))
                   :format nil))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for great Emacs features..."))
           :format nil)
          (if
              (functionp 'json-serialize)
              nil
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Emacs was not built with native JSON support"))
                 :format nil))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Emacs was not built with native JSON support"))
                     doom-doctor--warnings)))
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (doom-print
               (doom-print--format
                (doom-print--class 'fill
                                   (string-join
                                    (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                    "\n")))
               :format nil)))
          (if
              (featurep 'native-compile)
              nil
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Emacs was not built with native compilation support"))
                 :format nil))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Emacs was not built with native compilation support"))
                     doom-doctor--warnings)))
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (doom-print
               (doom-print--format
                (doom-print--class 'fill
                                   (string-join
                                    (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                    "\n")))
               :format nil)))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for private config conflicts..."))
           :format nil)
          (let*
              ((xdg-dir
                (concat
                 (or
                  (getenv "XDG_CONFIG_HOME")
                  "~/.config")
                 "/doom/"))
               (doom-dir
                (or
                 (getenv "DOOMDIR")
                 "~/.doom.d/"))
               (dir
                (if
                    (file-directory-p xdg-dir)
                    xdg-dir doom-dir)))
            (if
                (file-equal-p dir doom-emacs-dir)
                (progn
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                       (doom-print--class 'path dir)))
                   :format nil)
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'fill
                                         (string-join
                                          (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                          "\n")))
                     :format nil))))
            (if
                (and
                 (not
                  (file-equal-p xdg-dir doom-dir))
                 (file-directory-p xdg-dir)
                 (file-directory-p doom-dir))
                (progn
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Detected two private configs, in %s and %s")
                    (abbreviate-file-name xdg-dir)
                    doom-dir)
                   :format nil)
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'fill
                                         (string-join
                                          (list "The second directory will be ignored, as it has lower precedence.")
                                          "\n")))
                     :format nil)))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for stale elc files..."))
           :format nil)
          (elc-check-dir doom-emacs-dir)
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for problematic git global settings..."))
           :format nil)
          (if
              (executable-find "git")
              (if
                  (= 0
                     (car
                      (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                  (progn
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                         :format nil))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                             doom-doctor--warnings)))
                    (let
                        ((doom-print-indent
                          (+
                           (if t doom-print-indent-increment 0)
                           doom-print-indent)))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'fill
                                           (string-join
                                            (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                            "\n")))
                       :format nil))))
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                 :format nil))
              (setq doom-doctor--errors
                    (cons
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                     doom-doctor--errors))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking Doom Emacs..."))
           :format nil)
          (condition-case ex
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (let
                    ((noninteractive nil)
                     kill-emacs-query-functions kill-emacs-hook)
                  (defvar doom-reloading-p nil)
                  (if
                      (file-exists-p doom-autoloads-file)
                      nil
                    (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                  (require 'doom-start)
                  (doom-initialize-packages))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'success "Initialized Doom Emacs %s")
                  doom-version)
                 :format nil)
                (doom-print
                 (doom-print--format
                  (if
                      (hash-table-p doom-modules)
                      (doom-print--class 'success "Detected %d modules"
                                         (hash-table-count doom-modules))
                    (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                 :format nil)
                (doom-print
                 (doom-print--format
                  (doom-print--class 'success "Detected %d packages")
                  (length doom-packages))
                 :format nil)
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking Doom core for irregularities..."))
                 :format nil)
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (let
                      ((--dolist-tail--
                        (list "savehist" "projectile.cache")))
                    (while --dolist-tail--
                      (let
                          ((file
                            (car --dolist-tail--)))
                        (let*
                            ((size
                              (and t
                                   (condition-case nil
                                       (progn
                                         (doom-file-size file doom-cache-dir))
                                     (error nil)))))
                          (if size
                              (if
                                  (> size 1048576)
                                  (progn
                                    (progn
                                      (if inhibit-message nil
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                             (/ size 1024 1024.0)))
                                         :format nil))
                                      (setq doom-doctor--warnings
                                            (cons
                                             (doom-print--format
                                              (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                 (/ size 1024 1024.0)))
                                             doom-doctor--warnings)))
                                    (let
                                        ((doom-print-indent
                                          (+
                                           (if t doom-print-indent-increment 0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'fill
                                                           (string-join
                                                            (list "Consider deleting it from your system (manually)")
                                                            "\n")))
                                       :format nil))))
                            nil))
                        (setq --dolist-tail--
                              (cdr --dolist-tail--)))))
                  (if
                      (condition-case nil
                          (progn
                            (executable-find doom-projectile-fd-binary))
                        (error nil))
                      nil
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                         :format nil))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                             doom-doctor--warnings))))
                  (require 'projectile)
                  (if
                      (projectile-project-root "~")
                      (progn
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                             :format nil))
                          (setq doom-doctor--warnings
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                 doom-doctor--warnings)))
                        (let
                            ((doom-print-indent
                              (+
                               (if t doom-print-indent-increment 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'fill
                                               (string-join
                                                (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                "\n")))
                           :format nil))))
                  (if
                      (and
                       (file-equal-p doom-user-dir "~/.config/doom")
                       (file-directory-p "~/.doom.d"))
                      (progn
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                          (doom-print--class 'path doom-user-dir))
                         :format nil)
                        (let
                            ((doom-print-indent
                              (+
                               (if t doom-print-indent-increment 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'fill
                                               (string-join
                                                (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                "\n")))
                           :format nil))))
                  (if
                      (not
                       (executable-find "fc-list"))
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                           :format nil))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                               doom-doctor--warnings)))
                    (if
                        (and
                         (cond
                          ((eq system-type 'gnu/linux)
                           (let nil
                             (concat
                              (or
                               (getenv "XDG_DATA_HOME")
                               "~/.local/share")
                              "/fonts/")))
                          ((eq system-type 'darwin)
                           (let nil "~/Library/Fonts/")))
                         (require 'all-the-icons nil t))
                        (progn
                          (let
                              ((temp-buffer
                                (generate-new-buffer " *temp*" t)))
                            (save-current-buffer
                              (set-buffer temp-buffer)
                              (unwind-protect
                                  (progn
                                    (let
                                        ((errors 0))
                                      (let*
                                          ((output
                                            (doom-call-process "fc-list" "" "file"))
                                           (status
                                            (if output
                                                (car-safe
                                                 (prog1 output
                                                   (setq output
                                                         (cdr output))))
                                              (signal 'wrong-number-of-arguments
                                                      (list
                                                       '(status . output)
                                                       (length output))))))
                                        (if
                                            (not
                                             (= 0 status))
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                             :format nil)
                                          (insert
                                           (cdr
                                            (doom-call-process "fc-list" "" "file")))
                                          (let
                                              ((--dolist-tail-- all-the-icons-font-names))
                                            (while --dolist-tail--
                                              (let
                                                  ((font
                                                    (car --dolist-tail--)))
                                                (if
                                                    (save-excursion
                                                      (re-search-backward font nil t))
                                                    (doom-print
                                                     (doom-print--format
                                                      (doom-print--style 'green "Found font %s" font))
                                                     :format nil)
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'warn "Warning: couldn't find %S font")
                                                    font)
                                                   :format nil))
                                                (setq --dolist-tail--
                                                      (cdr --dolist-tail--)))))
                                          (if
                                              (> errors 0)
                                              (progn
                                                (let
                                                    ((doom-print-indent
                                                      (+
                                                       (if t doom-print-indent-increment 0)
                                                       doom-print-indent)))
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'fill
                                                                       (string-join
                                                                        (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                        "\n")))
                                                   :format nil))))))))
                                (and
                                 (buffer-name temp-buffer)
                                 (kill-buffer temp-buffer)))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                 :format nil)
                (if
                    (file-directory-p doom-user-dir)
                    (progn
                      (let
                          ((doom-print-indent
                            (+
                             (if t doom-print-indent-increment 0)
                             doom-print-indent)))
                        (elc-check-dir doom-user-dir))))
                (if doom-modules
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'start "Checking your enabled modules..."))
                       :format nil)
                      (advice-add #'require :around #'doom-shut-up-a)
                      (maphash
                       #'(lambda
                           (key plist)
                           (let
                               (doom-local-errors doom-local-warnings)
                             (let
                                 (doom-doctor--errors doom-doctor--warnings)
                               (condition-case ex
                                   (let
                                       ((doctor-file
                                         (doom-module-path
                                          (car key)
                                          (cdr key)
                                          "doctor.el"))
                                        (packages-file
                                         (doom-module-path
                                          (car key)
                                          (cdr key)
                                          "packages.el")))
                                     (let*
                                         ((doom-output-indent 6)
                                          (--cl-var--
                                           (let
                                               (doom-packages doom-disabled-packages)
                                             (load packages-file 'noerror 'nomessage)
                                             (mapcar #'car doom-packages)))
                                          (name nil))
                                       (while
                                           (consp --cl-var--)
                                         (setq name
                                               (car --cl-var--))
                                         (if
                                             (or
                                              (doom-package-get name :disable)
                                              (eval
                                               (doom-package-get name :ignore))
                                              (plist-member
                                               (doom-package-get name :recipe)
                                               :local-repo)
                                              (locate-library
                                               (symbol-name name))
                                              (doom-package-built-in-p name)
                                              (doom-package-installed-p name))
                                             (progn)
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Missing emacs package: %S")
                                             name)
                                            :format nil))
                                         (setq --cl-var--
                                               (cdr --cl-var--)))
                                       nil)
                                     (let
                                         ((inhibit-message t))
                                       (load doctor-file 'noerror 'nomessage)))
                                 ((debug file-missing)
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "%s"
                                                           (error-message-string ex)))
                                       :format nil))
                                    (setq doom-doctor--errors
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'error "%s"
                                                               (error-message-string ex)))
                                           doom-doctor--errors))))
                                 ((debug error)
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "Syntax error: %s" ex))
                                       :format nil))
                                    (setq doom-doctor--errors
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'error "Syntax error: %s" ex))
                                           doom-doctor--errors)))))
                               (if
                                   (or doom-doctor--errors doom-doctor--warnings)
                                   (progn
                                     (let
                                         ((doom-print-indent
                                           (+
                                            (if t doom-print-indent-increment 0)
                                            doom-print-indent)))
                                       (doom-print
                                        (doom-print--format
                                         (doom-print--class 'start
                                                            (doom-print--style 'bold "%s %s"))
                                         (car key)
                                         (cdr key))
                                        :format nil)
                                       (doom-print
                                        (doom-print--format "%s"
                                                            (string-join
                                                             (append doom-doctor--errors doom-doctor--warnings)
                                                             "\n"))
                                        :format nil))
                                     (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                             (setq doom-doctor--errors
                                   (append doom-doctor--errors doom-local-errors))
                             (setq doom-doctor--warnings
                                   (append doom-doctor--warnings doom-local-warnings))))
                       doom-modules))))
            ((debug error)
             (progn
               (if inhibit-message nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                      (or
                                       (cdr-safe ex)
                                       (car ex))))
                  :format nil))
               (setq doom-doctor--warnings
                     (cons
                      (doom-print--format
                       (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                          (or
                                           (cdr-safe ex)
                                           (car ex))))
                      doom-doctor--warnings)))
             (setq doom-modules nil)))
          (terpri)
          (let
              ((--dolist-tail--
                (list
                 (list doom-doctor--warnings "warning" 'yellow)
                 (list doom-doctor--errors "error" 'red))))
            (while --dolist-tail--
              (let
                  ((msg
                    (car --dolist-tail--)))
                (if
                    (car msg)
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'color
                                           (nth 2 msg)
                                           (if
                                               (cdr msg)
                                               "There are %d %ss!" "There is %d %s!")
                                           (length
                                            (car msg))
                                           (nth 1 msg)))
                       :format nil)))
                (setq --dolist-tail--
                      (cdr --dolist-tail--)))))
          (if
              (or doom-doctor--errors doom-doctor--warnings)
              nil
            (doom-print
             (doom-print--format
              (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
             :format nil))
          (exit! :pager\? "+G"))))))
  (--dolist-tail--
   (#s(doom-cli
       ("doom" "doctor")
       nil
       (("SUMMARY" . "Diagnoses common issues on your system.")
        ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
       nil nil nil nil
       (:benchmark nil :prefix
                   (doom)
                   :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
       (closure
        (t)
        (cli alist)
        (let nil
          (doom-print
           (doom-print--format "The doctor will see you now...\n")
           :format nil)
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking your Emacs version..."))
           :format nil)
          (let
              ((doom-print-indent
                (+
                 (if t doom-print-indent-increment 0)
                 doom-print-indent)))
            (cond
             ((string= ".50"
                       (substring emacs-version -3))
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                       doom-doctor--errors)))
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'fill
                                     (string-join
                                      (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                      "\n")))
                 :format nil)))
             ((> emacs-major-version 28)
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Emacs %s detected" emacs-version))
                   :format nil))
                (setq doom-doctor--warnings
                      (cons
                       (doom-print--format
                        (doom-print--class 'warn "Emacs %s detected" emacs-version))
                       doom-doctor--warnings)))
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'fill
                                     (string-join
                                      (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                      "\n")))
                 :format nil)))
             ((< emacs-major-version 27)
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                       doom-doctor--errors))))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for Doom's prerequisites..."))
           :format nil)
          (let
              ((doom-print-indent
                (+
                 (if t doom-print-indent-increment 0)
                 doom-print-indent)))
            (if
                (not
                 (executable-find "git"))
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                     :format nil))
                  (setq doom-doctor--errors
                        (cons
                         (doom-print--format
                          (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                         doom-doctor--errors)))
              (let
                  ((save-match-data-internal
                    (match-data)))
                (unwind-protect
                    (progn
                      (let*
                          ((version
                            (cdr
                             (doom-call-process "git" "version")))
                           (version
                            (and
                             (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                             (match-string 1 version))))
                        (if version
                            (if
                                (version< version "2.23")
                                (progn
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                       :format nil))
                                    (setq doom-doctor--errors
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                           doom-doctor--errors)))))
                          (progn
                            (if inhibit-message nil
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                               :format nil))
                            (setq doom-doctor--warnings
                                  (cons
                                   (doom-print--format
                                    (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                   doom-doctor--warnings))))))
                  (set-match-data save-match-data-internal 'evaporate))))
            (if
                (executable-find "rg")
                nil
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                       doom-doctor--errors)))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for Emacs config conflicts..."))
           :format nil)
          (if
              (file-exists-p "~/.emacs")
              (progn
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                     :format nil))
                  (setq doom-doctor--warnings
                        (cons
                         (doom-print--format
                          (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                         doom-doctor--warnings)))
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'fill
                                       (string-join
                                        (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                        "\n")))
                   :format nil))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for great Emacs features..."))
           :format nil)
          (if
              (functionp 'json-serialize)
              nil
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Emacs was not built with native JSON support"))
                 :format nil))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Emacs was not built with native JSON support"))
                     doom-doctor--warnings)))
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (doom-print
               (doom-print--format
                (doom-print--class 'fill
                                   (string-join
                                    (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                    "\n")))
               :format nil)))
          (if
              (featurep 'native-compile)
              nil
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Emacs was not built with native compilation support"))
                 :format nil))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Emacs was not built with native compilation support"))
                     doom-doctor--warnings)))
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (doom-print
               (doom-print--format
                (doom-print--class 'fill
                                   (string-join
                                    (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                    "\n")))
               :format nil)))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for private config conflicts..."))
           :format nil)
          (let*
              ((xdg-dir
                (concat
                 (or
                  (getenv "XDG_CONFIG_HOME")
                  "~/.config")
                 "/doom/"))
               (doom-dir
                (or
                 (getenv "DOOMDIR")
                 "~/.doom.d/"))
               (dir
                (if
                    (file-directory-p xdg-dir)
                    xdg-dir doom-dir)))
            (if
                (file-equal-p dir doom-emacs-dir)
                (progn
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                       (doom-print--class 'path dir)))
                   :format nil)
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'fill
                                         (string-join
                                          (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                          "\n")))
                     :format nil))))
            (if
                (and
                 (not
                  (file-equal-p xdg-dir doom-dir))
                 (file-directory-p xdg-dir)
                 (file-directory-p doom-dir))
                (progn
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Detected two private configs, in %s and %s")
                    (abbreviate-file-name xdg-dir)
                    doom-dir)
                   :format nil)
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'fill
                                         (string-join
                                          (list "The second directory will be ignored, as it has lower precedence.")
                                          "\n")))
                     :format nil)))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for stale elc files..."))
           :format nil)
          (elc-check-dir doom-emacs-dir)
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for problematic git global settings..."))
           :format nil)
          (if
              (executable-find "git")
              (if
                  (= 0
                     (car
                      (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                  (progn
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                         :format nil))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                             doom-doctor--warnings)))
                    (let
                        ((doom-print-indent
                          (+
                           (if t doom-print-indent-increment 0)
                           doom-print-indent)))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'fill
                                           (string-join
                                            (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                            "\n")))
                       :format nil))))
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                 :format nil))
              (setq doom-doctor--errors
                    (cons
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                     doom-doctor--errors))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking Doom Emacs..."))
           :format nil)
          (condition-case ex
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (let
                    ((noninteractive nil)
                     kill-emacs-query-functions kill-emacs-hook)
                  (defvar doom-reloading-p nil)
                  (if
                      (file-exists-p doom-autoloads-file)
                      nil
                    (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                  (require 'doom-start)
                  (doom-initialize-packages))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'success "Initialized Doom Emacs %s")
                  doom-version)
                 :format nil)
                (doom-print
                 (doom-print--format
                  (if
                      (hash-table-p doom-modules)
                      (doom-print--class 'success "Detected %d modules"
                                         (hash-table-count doom-modules))
                    (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                 :format nil)
                (doom-print
                 (doom-print--format
                  (doom-print--class 'success "Detected %d packages")
                  (length doom-packages))
                 :format nil)
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking Doom core for irregularities..."))
                 :format nil)
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (let
                      ((--dolist-tail--
                        (list "savehist" "projectile.cache")))
                    (while --dolist-tail--
                      (let
                          ((file
                            (car --dolist-tail--)))
                        (let*
                            ((size
                              (and t
                                   (condition-case nil
                                       (progn
                                         (doom-file-size file doom-cache-dir))
                                     (error nil)))))
                          (if size
                              (if
                                  (> size 1048576)
                                  (progn
                                    (progn
                                      (if inhibit-message nil
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                             (/ size 1024 1024.0)))
                                         :format nil))
                                      (setq doom-doctor--warnings
                                            (cons
                                             (doom-print--format
                                              (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                 (/ size 1024 1024.0)))
                                             doom-doctor--warnings)))
                                    (let
                                        ((doom-print-indent
                                          (+
                                           (if t doom-print-indent-increment 0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'fill
                                                           (string-join
                                                            (list "Consider deleting it from your system (manually)")
                                                            "\n")))
                                       :format nil))))
                            nil))
                        (setq --dolist-tail--
                              (cdr --dolist-tail--)))))
                  (if
                      (condition-case nil
                          (progn
                            (executable-find doom-projectile-fd-binary))
                        (error nil))
                      nil
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                         :format nil))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                             doom-doctor--warnings))))
                  (require 'projectile)
                  (if
                      (projectile-project-root "~")
                      (progn
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                             :format nil))
                          (setq doom-doctor--warnings
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                 doom-doctor--warnings)))
                        (let
                            ((doom-print-indent
                              (+
                               (if t doom-print-indent-increment 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'fill
                                               (string-join
                                                (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                "\n")))
                           :format nil))))
                  (if
                      (and
                       (file-equal-p doom-user-dir "~/.config/doom")
                       (file-directory-p "~/.doom.d"))
                      (progn
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                          (doom-print--class 'path doom-user-dir))
                         :format nil)
                        (let
                            ((doom-print-indent
                              (+
                               (if t doom-print-indent-increment 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'fill
                                               (string-join
                                                (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                "\n")))
                           :format nil))))
                  (if
                      (not
                       (executable-find "fc-list"))
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                           :format nil))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                               doom-doctor--warnings)))
                    (if
                        (and
                         (cond
                          ((eq system-type 'gnu/linux)
                           (let nil
                             (concat
                              (or
                               (getenv "XDG_DATA_HOME")
                               "~/.local/share")
                              "/fonts/")))
                          ((eq system-type 'darwin)
                           (let nil "~/Library/Fonts/")))
                         (require 'all-the-icons nil t))
                        (progn
                          (let
                              ((temp-buffer
                                (generate-new-buffer " *temp*" t)))
                            (save-current-buffer
                              (set-buffer temp-buffer)
                              (unwind-protect
                                  (progn
                                    (let
                                        ((errors 0))
                                      (let*
                                          ((output
                                            (doom-call-process "fc-list" "" "file"))
                                           (status
                                            (if output
                                                (car-safe
                                                 (prog1 output
                                                   (setq output
                                                         (cdr output))))
                                              (signal 'wrong-number-of-arguments
                                                      (list
                                                       '(status . output)
                                                       (length output))))))
                                        (if
                                            (not
                                             (= 0 status))
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                             :format nil)
                                          (insert
                                           (cdr
                                            (doom-call-process "fc-list" "" "file")))
                                          (let
                                              ((--dolist-tail-- all-the-icons-font-names))
                                            (while --dolist-tail--
                                              (let
                                                  ((font
                                                    (car --dolist-tail--)))
                                                (if
                                                    (save-excursion
                                                      (re-search-backward font nil t))
                                                    (doom-print
                                                     (doom-print--format
                                                      (doom-print--style 'green "Found font %s" font))
                                                     :format nil)
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'warn "Warning: couldn't find %S font")
                                                    font)
                                                   :format nil))
                                                (setq --dolist-tail--
                                                      (cdr --dolist-tail--)))))
                                          (if
                                              (> errors 0)
                                              (progn
                                                (let
                                                    ((doom-print-indent
                                                      (+
                                                       (if t doom-print-indent-increment 0)
                                                       doom-print-indent)))
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'fill
                                                                       (string-join
                                                                        (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                        "\n")))
                                                   :format nil))))))))
                                (and
                                 (buffer-name temp-buffer)
                                 (kill-buffer temp-buffer)))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                 :format nil)
                (if
                    (file-directory-p doom-user-dir)
                    (progn
                      (let
                          ((doom-print-indent
                            (+
                             (if t doom-print-indent-increment 0)
                             doom-print-indent)))
                        (elc-check-dir doom-user-dir))))
                (if doom-modules
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'start "Checking your enabled modules..."))
                       :format nil)
                      (advice-add #'require :around #'doom-shut-up-a)
                      (maphash
                       #'(lambda
                           (key plist)
                           (let
                               (doom-local-errors doom-local-warnings)
                             (let
                                 (doom-doctor--errors doom-doctor--warnings)
                               (condition-case ex
                                   (let
                                       ((doctor-file
                                         (doom-module-path
                                          (car key)
                                          (cdr key)
                                          "doctor.el"))
                                        (packages-file
                                         (doom-module-path
                                          (car key)
                                          (cdr key)
                                          "packages.el")))
                                     (let*
                                         ((doom-output-indent 6)
                                          (--cl-var--
                                           (let
                                               (doom-packages doom-disabled-packages)
                                             (load packages-file 'noerror 'nomessage)
                                             (mapcar #'car doom-packages)))
                                          (name nil))
                                       (while
                                           (consp --cl-var--)
                                         (setq name
                                               (car --cl-var--))
                                         (if
                                             (or
                                              (doom-package-get name :disable)
                                              (eval
                                               (doom-package-get name :ignore))
                                              (plist-member
                                               (doom-package-get name :recipe)
                                               :local-repo)
                                              (locate-library
                                               (symbol-name name))
                                              (doom-package-built-in-p name)
                                              (doom-package-installed-p name))
                                             (progn)
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Missing emacs package: %S")
                                             name)
                                            :format nil))
                                         (setq --cl-var--
                                               (cdr --cl-var--)))
                                       nil)
                                     (let
                                         ((inhibit-message t))
                                       (load doctor-file 'noerror 'nomessage)))
                                 ((debug file-missing)
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "%s"
                                                           (error-message-string ex)))
                                       :format nil))
                                    (setq doom-doctor--errors
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'error "%s"
                                                               (error-message-string ex)))
                                           doom-doctor--errors))))
                                 ((debug error)
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "Syntax error: %s" ex))
                                       :format nil))
                                    (setq doom-doctor--errors
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'error "Syntax error: %s" ex))
                                           doom-doctor--errors)))))
                               (if
                                   (or doom-doctor--errors doom-doctor--warnings)
                                   (progn
                                     (let
                                         ((doom-print-indent
                                           (+
                                            (if t doom-print-indent-increment 0)
                                            doom-print-indent)))
                                       (doom-print
                                        (doom-print--format
                                         (doom-print--class 'start
                                                            (doom-print--style 'bold "%s %s"))
                                         (car key)
                                         (cdr key))
                                        :format nil)
                                       (doom-print
                                        (doom-print--format "%s"
                                                            (string-join
                                                             (append doom-doctor--errors doom-doctor--warnings)
                                                             "\n"))
                                        :format nil))
                                     (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                             (setq doom-doctor--errors
                                   (append doom-doctor--errors doom-local-errors))
                             (setq doom-doctor--warnings
                                   (append doom-doctor--warnings doom-local-warnings))))
                       doom-modules))))
            ((debug error)
             (progn
               (if inhibit-message nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                      (or
                                       (cdr-safe ex)
                                       (car ex))))
                  :format nil))
               (setq doom-doctor--warnings
                     (cons
                      (doom-print--format
                       (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                          (or
                                           (cdr-safe ex)
                                           (car ex))))
                      doom-doctor--warnings)))
             (setq doom-modules nil)))
          (terpri)
          (let
              ((--dolist-tail--
                (list
                 (list doom-doctor--warnings "warning" 'yellow)
                 (list doom-doctor--errors "error" 'red))))
            (while --dolist-tail--
              (let
                  ((msg
                    (car --dolist-tail--)))
                (if
                    (car msg)
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'color
                                           (nth 2 msg)
                                           (if
                                               (cdr msg)
                                               "There are %d %ss!" "There is %d %s!")
                                           (length
                                            (car msg))
                                           (nth 1 msg)))
                       :format nil)))
                (setq --dolist-tail--
                      (cdr --dolist-tail--)))))
          (if
              (or doom-doctor--errors doom-doctor--warnings)
              nil
            (doom-print
             (doom-print--format
              (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
             :format nil))
          (exit! :pager\? "+G"))))))))

;;;; 27
((let
     ((seen
       '(t))
      runners)
   (let
       ((--dolist-tail--
         (doom-cli-find command
                        (progn
                          (or
                           (progn
                             (and
                              (memq
                               (type-of cli)
                               cl-struct-doom-cli-tags)
                              t))
                           (signal 'wrong-type-argument
                                   (list 'doom-cli cli)))
                          (aref cli 2)))))
     (while --dolist-tail--
       (let
           ((cli
             (car --dolist-tail--)))
         (setq runners
               (cons
                (cons
                 (doom-cli-get cli)
                 (doom-cli--bindings cli context seen))
                runners))
         (setq --dolist-tail--
               (cdr --dolist-tail--)))))
   (let
       ((--dolist-tail--
         (nreverse runners)))
     (while --dolist-tail--
       (let
           ((x2
             (car --dolist-tail--)))
         (progn
           (ignore
            (consp x2))
           (let*
               ((x3
                 (car-safe x2))
                (x4
                 (cdr-safe x2)))
             (let
                 ((cli x3)
                  (bindings x4))
               (doom-cli-execute cli bindings))))
         (setq --dolist-tail--
               (cdr --dolist-tail--)))))
   context)
 ((context . #s(doom-cli-context
                (25359 42750 192253 0)
                13992 -1 nil nil nil "doom" nil nil
                ("doom" "doctor")
                nil
                ("doctor")
                (("--eval")
                 ("-E")
                 ("--strict-load")
                 ("--load")
                 ("-L")
                 ("--color")
                 ("--profile")
                 ("--pager")
                 ("--emacsdir")
                 ("--doomdir")
                 ("--debug")
                 ("-D")
                 ("--force")
                 ("-!"))
                ((t)
                 (("doom" "doctor"))
                 (("doom")
                  "doctor"))
                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (command "doom" "doctor")
  (cli . #s(doom-cli
            ("doom" "doctor")
            nil
            (("SUMMARY" . "Diagnoses common issues on your system.")
             ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
            nil nil nil nil
            (:benchmark nil :prefix
                        (doom)
                        :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
            (closure
             (t)
             (cli alist)
             (let nil
               (doom-print
                (doom-print--format "The doctor will see you now...\n")
                :format nil)
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking your Emacs version..."))
                :format nil)
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (cond
                  ((string= ".50"
                            (substring emacs-version -3))
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                            doom-doctor--errors)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                           "\n")))
                      :format nil)))
                  ((> emacs-major-version 28)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Emacs %s detected" emacs-version))
                        :format nil))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Emacs %s detected" emacs-version))
                            doom-doctor--warnings)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                           "\n")))
                      :format nil)))
                  ((< emacs-major-version 27)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                            doom-doctor--errors))))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for Doom's prerequisites..."))
                :format nil)
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (if
                     (not
                      (executable-find "git"))
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                          :format nil))
                       (setq doom-doctor--errors
                             (cons
                              (doom-print--format
                               (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                              doom-doctor--errors)))
                   (let
                       ((save-match-data-internal
                         (match-data)))
                     (unwind-protect
                         (progn
                           (let*
                               ((version
                                 (cdr
                                  (doom-call-process "git" "version")))
                                (version
                                 (and
                                  (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                  (match-string 1 version))))
                             (if version
                                 (if
                                     (version< version "2.23")
                                     (progn
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                doom-doctor--errors)))))
                               (progn
                                 (if inhibit-message nil
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                    :format nil))
                                 (setq doom-doctor--warnings
                                       (cons
                                        (doom-print--format
                                         (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                        doom-doctor--warnings))))))
                       (set-match-data save-match-data-internal 'evaporate))))
                 (if
                     (executable-find "rg")
                     nil
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                            doom-doctor--errors)))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for Emacs config conflicts..."))
                :format nil)
               (if
                   (file-exists-p "~/.emacs")
                   (progn
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                          :format nil))
                       (setq doom-doctor--warnings
                             (cons
                              (doom-print--format
                               (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                              doom-doctor--warnings)))
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'fill
                                            (string-join
                                             (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                             "\n")))
                        :format nil))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for great Emacs features..."))
                :format nil)
               (if
                   (functionp 'json-serialize)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native JSON support"))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native JSON support"))
                          doom-doctor--warnings)))
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'fill
                                        (string-join
                                         (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                         "\n")))
                    :format nil)))
               (if
                   (featurep 'native-compile)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native compilation support"))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native compilation support"))
                          doom-doctor--warnings)))
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'fill
                                        (string-join
                                         (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                         "\n")))
                    :format nil)))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for private config conflicts..."))
                :format nil)
               (let*
                   ((xdg-dir
                     (concat
                      (or
                       (getenv "XDG_CONFIG_HOME")
                       "~/.config")
                      "/doom/"))
                    (doom-dir
                     (or
                      (getenv "DOOMDIR")
                      "~/.doom.d/"))
                    (dir
                     (if
                         (file-directory-p xdg-dir)
                         xdg-dir doom-dir)))
                 (if
                     (file-equal-p dir doom-emacs-dir)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                            (doom-print--class 'path dir)))
                        :format nil)
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'fill
                                              (string-join
                                               (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                               "\n")))
                          :format nil))))
                 (if
                     (and
                      (not
                       (file-equal-p xdg-dir doom-dir))
                      (file-directory-p xdg-dir)
                      (file-directory-p doom-dir))
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Detected two private configs, in %s and %s")
                         (abbreviate-file-name xdg-dir)
                         doom-dir)
                        :format nil)
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'fill
                                              (string-join
                                               (list "The second directory will be ignored, as it has lower precedence.")
                                               "\n")))
                          :format nil)))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for stale elc files..."))
                :format nil)
               (elc-check-dir doom-emacs-dir)
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for problematic git global settings..."))
                :format nil)
               (if
                   (executable-find "git")
                   (if
                       (= 0
                          (car
                           (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                       (progn
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                              :format nil))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                  doom-doctor--warnings)))
                         (let
                             ((doom-print-indent
                               (+
                                (if t doom-print-indent-increment 0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'fill
                                                (string-join
                                                 (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                                 "\n")))
                            :format nil))))
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                      :format nil))
                   (setq doom-doctor--errors
                         (cons
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                          doom-doctor--errors))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking Doom Emacs..."))
                :format nil)
               (condition-case ex
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (let
                         ((noninteractive nil)
                          kill-emacs-query-functions kill-emacs-hook)
                       (defvar doom-reloading-p nil)
                       (if
                           (file-exists-p doom-autoloads-file)
                           nil
                         (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                       (require 'doom-start)
                       (doom-initialize-packages))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'success "Initialized Doom Emacs %s")
                       doom-version)
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (if
                           (hash-table-p doom-modules)
                           (doom-print--class 'success "Detected %d modules"
                                              (hash-table-count doom-modules))
                         (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'success "Detected %d packages")
                       (length doom-packages))
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'start "Checking Doom core for irregularities..."))
                      :format nil)
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (let
                           ((--dolist-tail--
                             (list "savehist" "projectile.cache")))
                         (while --dolist-tail--
                           (let
                               ((file
                                 (car --dolist-tail--)))
                             (let*
                                 ((size
                                   (and t
                                        (condition-case nil
                                            (progn
                                              (doom-file-size file doom-cache-dir))
                                          (error nil)))))
                               (if size
                                   (if
                                       (> size 1048576)
                                       (progn
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                  (/ size 1024 1024.0)))
                                              :format nil))
                                           (setq doom-doctor--warnings
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                      (/ size 1024 1024.0)))
                                                  doom-doctor--warnings)))
                                         (let
                                             ((doom-print-indent
                                               (+
                                                (if t doom-print-indent-increment 0)
                                                doom-print-indent)))
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'fill
                                                                (string-join
                                                                 (list "Consider deleting it from your system (manually)")
                                                                 "\n")))
                                            :format nil))))
                                 nil))
                             (setq --dolist-tail--
                                   (cdr --dolist-tail--)))))
                       (if
                           (condition-case nil
                               (progn
                                 (executable-find doom-projectile-fd-binary))
                             (error nil))
                           nil
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                              :format nil))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                  doom-doctor--warnings))))
                       (require 'projectile)
                       (if
                           (projectile-project-root "~")
                           (progn
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                  :format nil))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                      doom-doctor--warnings)))
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'fill
                                                    (string-join
                                                     (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                     "\n")))
                                :format nil))))
                       (if
                           (and
                            (file-equal-p doom-user-dir "~/.config/doom")
                            (file-directory-p "~/.doom.d"))
                           (progn
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                               (doom-print--class 'path doom-user-dir))
                              :format nil)
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'fill
                                                    (string-join
                                                     (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                     "\n")))
                                :format nil))))
                       (if
                           (not
                            (executable-find "fc-list"))
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                :format nil))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                    doom-doctor--warnings)))
                         (if
                             (and
                              (cond
                               ((eq system-type 'gnu/linux)
                                (let nil
                                  (concat
                                   (or
                                    (getenv "XDG_DATA_HOME")
                                    "~/.local/share")
                                   "/fonts/")))
                               ((eq system-type 'darwin)
                                (let nil "~/Library/Fonts/")))
                              (require 'all-the-icons nil t))
                             (progn
                               (let
                                   ((temp-buffer
                                     (generate-new-buffer " *temp*" t)))
                                 (save-current-buffer
                                   (set-buffer temp-buffer)
                                   (unwind-protect
                                       (progn
                                         (let
                                             ((errors 0))
                                           (let*
                                               ((output
                                                 (doom-call-process "fc-list" "" "file"))
                                                (status
                                                 (if output
                                                     (car-safe
                                                      (prog1 output
                                                        (setq output
                                                              (cdr output))))
                                                   (signal 'wrong-number-of-arguments
                                                           (list
                                                            '(status . output)
                                                            (length output))))))
                                             (if
                                                 (not
                                                  (= 0 status))
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                                  :format nil)
                                               (insert
                                                (cdr
                                                 (doom-call-process "fc-list" "" "file")))
                                               (let
                                                   ((--dolist-tail-- all-the-icons-font-names))
                                                 (while --dolist-tail--
                                                   (let
                                                       ((font
                                                         (car --dolist-tail--)))
                                                     (if
                                                         (save-excursion
                                                           (re-search-backward font nil t))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--style 'green "Found font %s" font))
                                                          :format nil)
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'warn "Warning: couldn't find %S font")
                                                         font)
                                                        :format nil))
                                                     (setq --dolist-tail--
                                                           (cdr --dolist-tail--)))))
                                               (if
                                                   (> errors 0)
                                                   (progn
                                                     (let
                                                         ((doom-print-indent
                                                           (+
                                                            (if t doom-print-indent-increment 0)
                                                            doom-print-indent)))
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'fill
                                                                            (string-join
                                                                             (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                             "\n")))
                                                        :format nil))))))))
                                     (and
                                      (buffer-name temp-buffer)
                                      (kill-buffer temp-buffer)))))))))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                      :format nil)
                     (if
                         (file-directory-p doom-user-dir)
                         (progn
                           (let
                               ((doom-print-indent
                                 (+
                                  (if t doom-print-indent-increment 0)
                                  doom-print-indent)))
                             (elc-check-dir doom-user-dir))))
                     (if doom-modules
                         (progn
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'start "Checking your enabled modules..."))
                            :format nil)
                           (advice-add #'require :around #'doom-shut-up-a)
                           (maphash
                            #'(lambda
                                (key plist)
                                (let
                                    (doom-local-errors doom-local-warnings)
                                  (let
                                      (doom-doctor--errors doom-doctor--warnings)
                                    (condition-case ex
                                        (let
                                            ((doctor-file
                                              (doom-module-path
                                               (car key)
                                               (cdr key)
                                               "doctor.el"))
                                             (packages-file
                                              (doom-module-path
                                               (car key)
                                               (cdr key)
                                               "packages.el")))
                                          (let*
                                              ((doom-output-indent 6)
                                               (--cl-var--
                                                (let
                                                    (doom-packages doom-disabled-packages)
                                                  (load packages-file 'noerror 'nomessage)
                                                  (mapcar #'car doom-packages)))
                                               (name nil))
                                            (while
                                                (consp --cl-var--)
                                              (setq name
                                                    (car --cl-var--))
                                              (if
                                                  (or
                                                   (doom-package-get name :disable)
                                                   (eval
                                                    (doom-package-get name :ignore))
                                                   (plist-member
                                                    (doom-package-get name :recipe)
                                                    :local-repo)
                                                   (locate-library
                                                    (symbol-name name))
                                                   (doom-package-built-in-p name)
                                                   (doom-package-installed-p name))
                                                  (progn)
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'error "Missing emacs package: %S")
                                                  name)
                                                 :format nil))
                                              (setq --cl-var--
                                                    (cdr --cl-var--)))
                                            nil)
                                          (let
                                              ((inhibit-message t))
                                            (load doctor-file 'noerror 'nomessage)))
                                      ((debug file-missing)
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "%s"
                                                                (error-message-string ex)))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "%s"
                                                                    (error-message-string ex)))
                                                doom-doctor--errors))))
                                      ((debug error)
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Syntax error: %s" ex))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "Syntax error: %s" ex))
                                                doom-doctor--errors)))))
                                    (if
                                        (or doom-doctor--errors doom-doctor--warnings)
                                        (progn
                                          (let
                                              ((doom-print-indent
                                                (+
                                                 (if t doom-print-indent-increment 0)
                                                 doom-print-indent)))
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'start
                                                                 (doom-print--style 'bold "%s %s"))
                                              (car key)
                                              (cdr key))
                                             :format nil)
                                            (doom-print
                                             (doom-print--format "%s"
                                                                 (string-join
                                                                  (append doom-doctor--errors doom-doctor--warnings)
                                                                  "\n"))
                                             :format nil))
                                          (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                                  (setq doom-doctor--errors
                                        (append doom-doctor--errors doom-local-errors))
                                  (setq doom-doctor--warnings
                                        (append doom-doctor--warnings doom-local-warnings))))
                            doom-modules))))
                 ((debug error)
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                           (or
                                            (cdr-safe ex)
                                            (car ex))))
                       :format nil))
                    (setq doom-doctor--warnings
                          (cons
                           (doom-print--format
                            (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                               (or
                                                (cdr-safe ex)
                                                (car ex))))
                           doom-doctor--warnings)))
                  (setq doom-modules nil)))
               (terpri)
               (let
                   ((--dolist-tail--
                     (list
                      (list doom-doctor--warnings "warning" 'yellow)
                      (list doom-doctor--errors "error" 'red))))
                 (while --dolist-tail--
                   (let
                       ((msg
                         (car --dolist-tail--)))
                     (if
                         (car msg)
                         (progn
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'color
                                                (nth 2 msg)
                                                (if
                                                    (cdr msg)
                                                    "There are %d %ss!" "There is %d %s!")
                                                (length
                                                 (car msg))
                                                (nth 1 msg)))
                            :format nil)))
                     (setq --dolist-tail--
                           (cdr --dolist-tail--)))))
               (if
                   (or doom-doctor--errors doom-doctor--warnings)
                   nil
                 (doom-print
                  (doom-print--format
                   (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
                  :format nil))
               (exit! :pager\? "+G")))))
  (prefix . "doom")
  (seen t)
  (runners
   (#s(doom-cli
       ("doom" "doctor")
       nil
       (("SUMMARY" . "Diagnoses common issues on your system.")
        ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
       nil nil nil nil
       (:benchmark nil :prefix
                   (doom)
                   :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
       (closure
        (t)
        (cli alist)
        (let nil
          (doom-print
           (doom-print--format "The doctor will see you now...\n")
           :format nil)
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking your Emacs version..."))
           :format nil)
          (let
              ((doom-print-indent
                (+
                 (if t doom-print-indent-increment 0)
                 doom-print-indent)))
            (cond
             ((string= ".50"
                       (substring emacs-version -3))
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                       doom-doctor--errors)))
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'fill
                                     (string-join
                                      (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                      "\n")))
                 :format nil)))
             ((> emacs-major-version 28)
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Emacs %s detected" emacs-version))
                   :format nil))
                (setq doom-doctor--warnings
                      (cons
                       (doom-print--format
                        (doom-print--class 'warn "Emacs %s detected" emacs-version))
                       doom-doctor--warnings)))
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'fill
                                     (string-join
                                      (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                      "\n")))
                 :format nil)))
             ((< emacs-major-version 27)
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                       doom-doctor--errors))))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for Doom's prerequisites..."))
           :format nil)
          (let
              ((doom-print-indent
                (+
                 (if t doom-print-indent-increment 0)
                 doom-print-indent)))
            (if
                (not
                 (executable-find "git"))
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                     :format nil))
                  (setq doom-doctor--errors
                        (cons
                         (doom-print--format
                          (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                         doom-doctor--errors)))
              (let
                  ((save-match-data-internal
                    (match-data)))
                (unwind-protect
                    (progn
                      (let*
                          ((version
                            (cdr
                             (doom-call-process "git" "version")))
                           (version
                            (and
                             (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                             (match-string 1 version))))
                        (if version
                            (if
                                (version< version "2.23")
                                (progn
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                       :format nil))
                                    (setq doom-doctor--errors
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                           doom-doctor--errors)))))
                          (progn
                            (if inhibit-message nil
                              (doom-print
                               (doom-print--format
                                (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                               :format nil))
                            (setq doom-doctor--warnings
                                  (cons
                                   (doom-print--format
                                    (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                   doom-doctor--warnings))))))
                  (set-match-data save-match-data-internal 'evaporate))))
            (if
                (executable-find "rg")
                nil
              (progn
                (if inhibit-message nil
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                   :format nil))
                (setq doom-doctor--errors
                      (cons
                       (doom-print--format
                        (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                       doom-doctor--errors)))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for Emacs config conflicts..."))
           :format nil)
          (if
              (file-exists-p "~/.emacs")
              (progn
                (progn
                  (if inhibit-message nil
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                     :format nil))
                  (setq doom-doctor--warnings
                        (cons
                         (doom-print--format
                          (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                         doom-doctor--warnings)))
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'fill
                                       (string-join
                                        (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                        "\n")))
                   :format nil))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for great Emacs features..."))
           :format nil)
          (if
              (functionp 'json-serialize)
              nil
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Emacs was not built with native JSON support"))
                 :format nil))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Emacs was not built with native JSON support"))
                     doom-doctor--warnings)))
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (doom-print
               (doom-print--format
                (doom-print--class 'fill
                                   (string-join
                                    (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                    "\n")))
               :format nil)))
          (if
              (featurep 'native-compile)
              nil
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'warn "Emacs was not built with native compilation support"))
                 :format nil))
              (setq doom-doctor--warnings
                    (cons
                     (doom-print--format
                      (doom-print--class 'warn "Emacs was not built with native compilation support"))
                     doom-doctor--warnings)))
            (let
                ((doom-print-indent
                  (+
                   (if t doom-print-indent-increment 0)
                   doom-print-indent)))
              (doom-print
               (doom-print--format
                (doom-print--class 'fill
                                   (string-join
                                    (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                    "\n")))
               :format nil)))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for private config conflicts..."))
           :format nil)
          (let*
              ((xdg-dir
                (concat
                 (or
                  (getenv "XDG_CONFIG_HOME")
                  "~/.config")
                 "/doom/"))
               (doom-dir
                (or
                 (getenv "DOOMDIR")
                 "~/.doom.d/"))
               (dir
                (if
                    (file-directory-p xdg-dir)
                    xdg-dir doom-dir)))
            (if
                (file-equal-p dir doom-emacs-dir)
                (progn
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                       (doom-print--class 'path dir)))
                   :format nil)
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'fill
                                         (string-join
                                          (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                          "\n")))
                     :format nil))))
            (if
                (and
                 (not
                  (file-equal-p xdg-dir doom-dir))
                 (file-directory-p xdg-dir)
                 (file-directory-p doom-dir))
                (progn
                  (doom-print
                   (doom-print--format
                    (doom-print--class 'warn "Detected two private configs, in %s and %s")
                    (abbreviate-file-name xdg-dir)
                    doom-dir)
                   :format nil)
                  (let
                      ((doom-print-indent
                        (+
                         (if t doom-print-indent-increment 0)
                         doom-print-indent)))
                    (doom-print
                     (doom-print--format
                      (doom-print--class 'fill
                                         (string-join
                                          (list "The second directory will be ignored, as it has lower precedence.")
                                          "\n")))
                     :format nil)))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for stale elc files..."))
           :format nil)
          (elc-check-dir doom-emacs-dir)
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking for problematic git global settings..."))
           :format nil)
          (if
              (executable-find "git")
              (if
                  (= 0
                     (car
                      (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                  (progn
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                         :format nil))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                             doom-doctor--warnings)))
                    (let
                        ((doom-print-indent
                          (+
                           (if t doom-print-indent-increment 0)
                           doom-print-indent)))
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'fill
                                           (string-join
                                            (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                            "\n")))
                       :format nil))))
            (progn
              (if inhibit-message nil
                (doom-print
                 (doom-print--format
                  (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                 :format nil))
              (setq doom-doctor--errors
                    (cons
                     (doom-print--format
                      (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                     doom-doctor--errors))))
          (doom-print
           (doom-print--format
            (doom-print--class 'start "Checking Doom Emacs..."))
           :format nil)
          (condition-case ex
              (let
                  ((doom-print-indent
                    (+
                     (if t doom-print-indent-increment 0)
                     doom-print-indent)))
                (let
                    ((noninteractive nil)
                     kill-emacs-query-functions kill-emacs-hook)
                  (defvar doom-reloading-p nil)
                  (if
                      (file-exists-p doom-autoloads-file)
                      nil
                    (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                  (require 'doom-start)
                  (doom-initialize-packages))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'success "Initialized Doom Emacs %s")
                  doom-version)
                 :format nil)
                (doom-print
                 (doom-print--format
                  (if
                      (hash-table-p doom-modules)
                      (doom-print--class 'success "Detected %d modules"
                                         (hash-table-count doom-modules))
                    (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                 :format nil)
                (doom-print
                 (doom-print--format
                  (doom-print--class 'success "Detected %d packages")
                  (length doom-packages))
                 :format nil)
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking Doom core for irregularities..."))
                 :format nil)
                (let
                    ((doom-print-indent
                      (+
                       (if t doom-print-indent-increment 0)
                       doom-print-indent)))
                  (let
                      ((--dolist-tail--
                        (list "savehist" "projectile.cache")))
                    (while --dolist-tail--
                      (let
                          ((file
                            (car --dolist-tail--)))
                        (let*
                            ((size
                              (and t
                                   (condition-case nil
                                       (progn
                                         (doom-file-size file doom-cache-dir))
                                     (error nil)))))
                          (if size
                              (if
                                  (> size 1048576)
                                  (progn
                                    (progn
                                      (if inhibit-message nil
                                        (doom-print
                                         (doom-print--format
                                          (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                             (/ size 1024 1024.0)))
                                         :format nil))
                                      (setq doom-doctor--warnings
                                            (cons
                                             (doom-print--format
                                              (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                 (/ size 1024 1024.0)))
                                             doom-doctor--warnings)))
                                    (let
                                        ((doom-print-indent
                                          (+
                                           (if t doom-print-indent-increment 0)
                                           doom-print-indent)))
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'fill
                                                           (string-join
                                                            (list "Consider deleting it from your system (manually)")
                                                            "\n")))
                                       :format nil))))
                            nil))
                        (setq --dolist-tail--
                              (cdr --dolist-tail--)))))
                  (if
                      (condition-case nil
                          (progn
                            (executable-find doom-projectile-fd-binary))
                        (error nil))
                      nil
                    (progn
                      (if inhibit-message nil
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                         :format nil))
                      (setq doom-doctor--warnings
                            (cons
                             (doom-print--format
                              (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                             doom-doctor--warnings))))
                  (require 'projectile)
                  (if
                      (projectile-project-root "~")
                      (progn
                        (progn
                          (if inhibit-message nil
                            (doom-print
                             (doom-print--format
                              (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                             :format nil))
                          (setq doom-doctor--warnings
                                (cons
                                 (doom-print--format
                                  (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                 doom-doctor--warnings)))
                        (let
                            ((doom-print-indent
                              (+
                               (if t doom-print-indent-increment 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'fill
                                               (string-join
                                                (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                "\n")))
                           :format nil))))
                  (if
                      (and
                       (file-equal-p doom-user-dir "~/.config/doom")
                       (file-directory-p "~/.doom.d"))
                      (progn
                        (doom-print
                         (doom-print--format
                          (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                          (doom-print--class 'path doom-user-dir))
                         :format nil)
                        (let
                            ((doom-print-indent
                              (+
                               (if t doom-print-indent-increment 0)
                               doom-print-indent)))
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'fill
                                               (string-join
                                                (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                "\n")))
                           :format nil))))
                  (if
                      (not
                       (executable-find "fc-list"))
                      (progn
                        (if inhibit-message nil
                          (doom-print
                           (doom-print--format
                            (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                           :format nil))
                        (setq doom-doctor--warnings
                              (cons
                               (doom-print--format
                                (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                               doom-doctor--warnings)))
                    (if
                        (and
                         (cond
                          ((eq system-type 'gnu/linux)
                           (let nil
                             (concat
                              (or
                               (getenv "XDG_DATA_HOME")
                               "~/.local/share")
                              "/fonts/")))
                          ((eq system-type 'darwin)
                           (let nil "~/Library/Fonts/")))
                         (require 'all-the-icons nil t))
                        (progn
                          (let
                              ((temp-buffer
                                (generate-new-buffer " *temp*" t)))
                            (save-current-buffer
                              (set-buffer temp-buffer)
                              (unwind-protect
                                  (progn
                                    (let
                                        ((errors 0))
                                      (let*
                                          ((output
                                            (doom-call-process "fc-list" "" "file"))
                                           (status
                                            (if output
                                                (car-safe
                                                 (prog1 output
                                                   (setq output
                                                         (cdr output))))
                                              (signal 'wrong-number-of-arguments
                                                      (list
                                                       '(status . output)
                                                       (length output))))))
                                        (if
                                            (not
                                             (= 0 status))
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                             :format nil)
                                          (insert
                                           (cdr
                                            (doom-call-process "fc-list" "" "file")))
                                          (let
                                              ((--dolist-tail-- all-the-icons-font-names))
                                            (while --dolist-tail--
                                              (let
                                                  ((font
                                                    (car --dolist-tail--)))
                                                (if
                                                    (save-excursion
                                                      (re-search-backward font nil t))
                                                    (doom-print
                                                     (doom-print--format
                                                      (doom-print--style 'green "Found font %s" font))
                                                     :format nil)
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'warn "Warning: couldn't find %S font")
                                                    font)
                                                   :format nil))
                                                (setq --dolist-tail--
                                                      (cdr --dolist-tail--)))))
                                          (if
                                              (> errors 0)
                                              (progn
                                                (let
                                                    ((doom-print-indent
                                                      (+
                                                       (if t doom-print-indent-increment 0)
                                                       doom-print-indent)))
                                                  (doom-print
                                                   (doom-print--format
                                                    (doom-print--class 'fill
                                                                       (string-join
                                                                        (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                        "\n")))
                                                   :format nil))))))))
                                (and
                                 (buffer-name temp-buffer)
                                 (kill-buffer temp-buffer)))))))))
                (doom-print
                 (doom-print--format
                  (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                 :format nil)
                (if
                    (file-directory-p doom-user-dir)
                    (progn
                      (let
                          ((doom-print-indent
                            (+
                             (if t doom-print-indent-increment 0)
                             doom-print-indent)))
                        (elc-check-dir doom-user-dir))))
                (if doom-modules
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'start "Checking your enabled modules..."))
                       :format nil)
                      (advice-add #'require :around #'doom-shut-up-a)
                      (maphash
                       #'(lambda
                           (key plist)
                           (let
                               (doom-local-errors doom-local-warnings)
                             (let
                                 (doom-doctor--errors doom-doctor--warnings)
                               (condition-case ex
                                   (let
                                       ((doctor-file
                                         (doom-module-path
                                          (car key)
                                          (cdr key)
                                          "doctor.el"))
                                        (packages-file
                                         (doom-module-path
                                          (car key)
                                          (cdr key)
                                          "packages.el")))
                                     (let*
                                         ((doom-output-indent 6)
                                          (--cl-var--
                                           (let
                                               (doom-packages doom-disabled-packages)
                                             (load packages-file 'noerror 'nomessage)
                                             (mapcar #'car doom-packages)))
                                          (name nil))
                                       (while
                                           (consp --cl-var--)
                                         (setq name
                                               (car --cl-var--))
                                         (if
                                             (or
                                              (doom-package-get name :disable)
                                              (eval
                                               (doom-package-get name :ignore))
                                              (plist-member
                                               (doom-package-get name :recipe)
                                               :local-repo)
                                              (locate-library
                                               (symbol-name name))
                                              (doom-package-built-in-p name)
                                              (doom-package-installed-p name))
                                             (progn)
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Missing emacs package: %S")
                                             name)
                                            :format nil))
                                         (setq --cl-var--
                                               (cdr --cl-var--)))
                                       nil)
                                     (let
                                         ((inhibit-message t))
                                       (load doctor-file 'noerror 'nomessage)))
                                 ((debug file-missing)
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "%s"
                                                           (error-message-string ex)))
                                       :format nil))
                                    (setq doom-doctor--errors
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'error "%s"
                                                               (error-message-string ex)))
                                           doom-doctor--errors))))
                                 ((debug error)
                                  (progn
                                    (if inhibit-message nil
                                      (doom-print
                                       (doom-print--format
                                        (doom-print--class 'error "Syntax error: %s" ex))
                                       :format nil))
                                    (setq doom-doctor--errors
                                          (cons
                                           (doom-print--format
                                            (doom-print--class 'error "Syntax error: %s" ex))
                                           doom-doctor--errors)))))
                               (if
                                   (or doom-doctor--errors doom-doctor--warnings)
                                   (progn
                                     (let
                                         ((doom-print-indent
                                           (+
                                            (if t doom-print-indent-increment 0)
                                            doom-print-indent)))
                                       (doom-print
                                        (doom-print--format
                                         (doom-print--class 'start
                                                            (doom-print--style 'bold "%s %s"))
                                         (car key)
                                         (cdr key))
                                        :format nil)
                                       (doom-print
                                        (doom-print--format "%s"
                                                            (string-join
                                                             (append doom-doctor--errors doom-doctor--warnings)
                                                             "\n"))
                                        :format nil))
                                     (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                             (setq doom-doctor--errors
                                   (append doom-doctor--errors doom-local-errors))
                             (setq doom-doctor--warnings
                                   (append doom-doctor--warnings doom-local-warnings))))
                       doom-modules))))
            ((debug error)
             (progn
               (if inhibit-message nil
                 (doom-print
                  (doom-print--format
                   (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                      (or
                                       (cdr-safe ex)
                                       (car ex))))
                  :format nil))
               (setq doom-doctor--warnings
                     (cons
                      (doom-print--format
                       (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                          (or
                                           (cdr-safe ex)
                                           (car ex))))
                      doom-doctor--warnings)))
             (setq doom-modules nil)))
          (terpri)
          (let
              ((--dolist-tail--
                (list
                 (list doom-doctor--warnings "warning" 'yellow)
                 (list doom-doctor--errors "error" 'red))))
            (while --dolist-tail--
              (let
                  ((msg
                    (car --dolist-tail--)))
                (if
                    (car msg)
                    (progn
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'color
                                           (nth 2 msg)
                                           (if
                                               (cdr msg)
                                               "There are %d %ss!" "There is %d %s!")
                                           (length
                                            (car msg))
                                           (nth 1 msg)))
                       :format nil)))
                (setq --dolist-tail--
                      (cdr --dolist-tail--)))))
          (if
              (or doom-doctor--errors doom-doctor--warnings)
              nil
            (doom-print
             (doom-print--format
              (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
             :format nil))
          (exit! :pager\? "+G"))))))))

;;;; 28
((cond
  ((null
    (or command
        (doom-cli-get
         (list prefix)
         t)))
   (signal 'doom-cli-invalid-prefix-error
           (list prefix)))
  ((progn
     (or
      (progn
        (and
         (memq
          (type-of context)
          cl-struct-doom-cli-context-tags)
         t))
      (signal 'wrong-type-argument
              (list 'doom-cli-context context)))
     (aref context 8))
   (let*
       ((val
         (progn
           (or
            (progn
              (and
               (memq
                (type-of context)
                cl-struct-doom-cli-context-tags)
               t))
            (signal 'wrong-type-argument
                    (list 'doom-cli-context context)))
           (aref context 8))))
     (cond
      ((equal val '"--version")
       (let nil
         (doom-cli-call
          (cons ':version
                (cdr command))
          context)
         t))
      ((member val
               '("--help" "-?"))
       (let nil
         (doom-cli-call
          (cons ':help
                (cdr command))
          context)
         t))
      (t
       (let nil
         (error "In meta mode with no destination!"))))))
  ((not
    (and cli
         (let
             ((cl-x
               (doom-cli-get cli)))
           (progn
             (or
              (progn
                (and
                 (memq
                  (type-of cl-x)
                  cl-struct-doom-cli-tags)
                 t))
              (signal 'wrong-type-argument
                      (list 'doom-cli cl-x)))
             (aref cl-x 9)))))
   (signal 'doom-cli-command-not-found-error
           (append command
                   (alist-get t
                              (progn
                                (or
                                 (progn
                                   (and
                                    (memq
                                     (type-of context)
                                     cl-struct-doom-cli-context-tags)
                                    t))
                                 (signal 'wrong-type-argument
                                         (list 'doom-cli-context context)))
                                (aref context 14))))))
  ((let
       ((seen
         '(t))
        runners)
     (let
         ((--dolist-tail--
           (doom-cli-find command
                          (progn
                            (or
                             (progn
                               (and
                                (memq
                                 (type-of cli)
                                 cl-struct-doom-cli-tags)
                                t))
                             (signal 'wrong-type-argument
                                     (list 'doom-cli cli)))
                            (aref cli 2)))))
       (while --dolist-tail--
         (let
             ((cli
               (car --dolist-tail--)))
           (setq runners
                 (cons
                  (cons
                   (doom-cli-get cli)
                   (doom-cli--bindings cli context seen))
                  runners))
           (setq --dolist-tail--
                 (cdr --dolist-tail--)))))
     (let
         ((--dolist-tail--
           (nreverse runners)))
       (while --dolist-tail--
         (let
             ((x2
               (car --dolist-tail--)))
           (progn
             (ignore
              (consp x2))
             (let*
                 ((x3
                   (car-safe x2))
                  (x4
                   (cdr-safe x2)))
               (let
                   ((cli x3)
                    (bindings x4))
                 (doom-cli-execute cli bindings))))
           (setq --dolist-tail--
                 (cdr --dolist-tail--)))))
     context)))
 nil)

;;;; 29
((let*
     ((command
       (progn
         (or
          (progn
            (and
             (memq
              (type-of context)
              cl-struct-doom-cli-context-tags)
             t))
          (signal 'wrong-type-argument
                  (list 'doom-cli-context context)))
         (aref context 10)))
      (cli
       (doom-cli-get command t))
      (prefix
       (progn
         (or
          (progn
            (and
             (memq
              (type-of context)
              cl-struct-doom-cli-context-tags)
             t))
          (signal 'wrong-type-argument
                  (list 'doom-cli-context context)))
         (aref context 7))))
   (if
       (or init-file-debug noninteractive)
       (progn
         (let
             ((inhibit-message t))
           (message "%s"
                    (propertize
                     (doom-print--format
                      (format "* [%s] %s"
                              (format "%.06f"
                                      (float-time
                                       (time-subtract
                                        (current-time)
                                        before-init-time)))
                              "doom-cli-context-execute: %s")
                      (mapconcat #'doom-cli-command-string
                                 (delq nil
                                       (list
                                        (car
                                         (progn
                                           (or
                                            (progn
                                              (and
                                               (memq
                                                (type-of context)
                                                cl-struct-doom-cli-context-tags)
                                               t))
                                            (signal 'wrong-type-argument
                                                    (list 'doom-cli-context context)))
                                           (aref context 11)))
                                        command))
                                 " -> "))
                     'face 'font-lock-doc-face)))))
   (cond
    ((null
      (or command
          (doom-cli-get
           (list prefix)
           t)))
     (signal 'doom-cli-invalid-prefix-error
             (list prefix)))
    ((progn
       (or
        (progn
          (and
           (memq
            (type-of context)
            cl-struct-doom-cli-context-tags)
           t))
        (signal 'wrong-type-argument
                (list 'doom-cli-context context)))
       (aref context 8))
     (let*
         ((val
           (progn
             (or
              (progn
                (and
                 (memq
                  (type-of context)
                  cl-struct-doom-cli-context-tags)
                 t))
              (signal 'wrong-type-argument
                      (list 'doom-cli-context context)))
             (aref context 8))))
       (cond
        ((equal val '"--version")
         (let nil
           (doom-cli-call
            (cons ':version
                  (cdr command))
            context)
           t))
        ((member val
                 '("--help" "-?"))
         (let nil
           (doom-cli-call
            (cons ':help
                  (cdr command))
            context)
           t))
        (t
         (let nil
           (error "In meta mode with no destination!"))))))
    ((not
      (and cli
           (let
               ((cl-x
                 (doom-cli-get cli)))
             (progn
               (or
                (progn
                  (and
                   (memq
                    (type-of cl-x)
                    cl-struct-doom-cli-tags)
                   t))
                (signal 'wrong-type-argument
                        (list 'doom-cli cl-x)))
               (aref cl-x 9)))))
     (signal 'doom-cli-command-not-found-error
             (append command
                     (alist-get t
                                (progn
                                  (or
                                   (progn
                                     (and
                                      (memq
                                       (type-of context)
                                       cl-struct-doom-cli-context-tags)
                                      t))
                                   (signal 'wrong-type-argument
                                           (list 'doom-cli-context context)))
                                  (aref context 14))))))
    ((let
         ((seen
           '(t))
          runners)
       (let
           ((--dolist-tail--
             (doom-cli-find command
                            (progn
                              (or
                               (progn
                                 (and
                                  (memq
                                   (type-of cli)
                                   cl-struct-doom-cli-tags)
                                  t))
                               (signal 'wrong-type-argument
                                       (list 'doom-cli cli)))
                              (aref cli 2)))))
         (while --dolist-tail--
           (let
               ((cli
                 (car --dolist-tail--)))
             (setq runners
                   (cons
                    (cons
                     (doom-cli-get cli)
                     (doom-cli--bindings cli context seen))
                    runners))
             (setq --dolist-tail--
                   (cdr --dolist-tail--)))))
       (let
           ((--dolist-tail--
             (nreverse runners)))
         (while --dolist-tail--
           (let
               ((x2
                 (car --dolist-tail--)))
             (progn
               (ignore
                (consp x2))
               (let*
                   ((x3
                     (car-safe x2))
                    (x4
                     (cdr-safe x2)))
                 (let
                     ((cli x3)
                      (bindings x4))
                   (doom-cli-execute cli bindings))))
             (setq --dolist-tail--
                   (cdr --dolist-tail--)))))
       context))))
 ((context . #s(doom-cli-context
                (25359 42750 192253 0)
                13992 -1 nil nil nil "doom" nil nil
                ("doom" "doctor")
                nil
                ("doctor")
                (("--eval")
                 ("-E")
                 ("--strict-load")
                 ("--load")
                 ("-L")
                 ("--color")
                 ("--profile")
                 ("--pager")
                 ("--emacsdir")
                 ("--doomdir")
                 ("--debug")
                 ("-D")
                 ("--force")
                 ("-!"))
                ((t)
                 (("doom" "doctor"))
                 (("doom")
                  "doctor"))
                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (command "doom" "doctor")
  (cli . #s(doom-cli
            ("doom" "doctor")
            nil
            (("SUMMARY" . "Diagnoses common issues on your system.")
             ("MAIN" . "The Doom doctor is essentially one big, self-contained elisp shell script that\nuses a series of simple heuristics to diagnose common issues on your system.\nIssues that could intefere with Doom Emacs.\n\nDoom modules may optionally have a doctor.el file to run their own heuristics\nin."))
            nil nil nil nil
            (:benchmark nil :prefix
                        (doom)
                        :group "Diagnostics" :docs "Commands for troubleshooting and debugging Doom." :hide nil)
            (closure
             (t)
             (cli alist)
             (let nil
               (doom-print
                (doom-print--format "The doctor will see you now...\n")
                :format nil)
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking your Emacs version..."))
                :format nil)
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (cond
                  ((string= ".50"
                            (substring emacs-version -3))
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Emacs development version detected (%s)" emacs-version))
                            doom-doctor--errors)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Doom supports this version, but you are using a development version of Emacs! " "Be prepared for possibly weekly breakages that\n" "\11- you will have to investigate yourself." "\11- might appear, or be solved, on any Emacs update." "\11- might depend subtly on upstream packages updates.\n" "You might need to unpin packages to get a fix for a specific commit of Emacs, " "and you should be ready to downgrade Emacs if something is just not fixable.")
                                           "\n")))
                      :format nil)))
                  ((> emacs-major-version 28)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Emacs %s detected" emacs-version))
                        :format nil))
                     (setq doom-doctor--warnings
                           (cons
                            (doom-print--format
                             (doom-print--class 'warn "Emacs %s detected" emacs-version))
                            doom-doctor--warnings)))
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'fill
                                          (string-join
                                           (list "Doom supports this version, but you are living on the edge! " "Be prepared for breakages in future versions of Emacs.")
                                           "\n")))
                      :format nil)))
                  ((< emacs-major-version 27)
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Emacs %s detected, Doom only supports 27.1 and newer" emacs-version))
                            doom-doctor--errors))))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for Doom's prerequisites..."))
                :format nil)
               (let
                   ((doom-print-indent
                     (+
                      (if t doom-print-indent-increment 0)
                      doom-print-indent)))
                 (if
                     (not
                      (executable-find "git"))
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                          :format nil))
                       (setq doom-doctor--errors
                             (cons
                              (doom-print--format
                               (doom-print--class 'error "Couldn't find git on your machine! Doom's package manager won't work."))
                              doom-doctor--errors)))
                   (let
                       ((save-match-data-internal
                         (match-data)))
                     (unwind-protect
                         (progn
                           (let*
                               ((version
                                 (cdr
                                  (doom-call-process "git" "version")))
                                (version
                                 (and
                                  (string-match "git version \\([0-9]+\\(?:\\.[0-9]+\\)\\{2\\}\\)" version)
                                  (match-string 1 version))))
                             (if version
                                 (if
                                     (version< version "2.23")
                                     (progn
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "Git %s detected! Doom requires git 2.23 or newer!" version))
                                                doom-doctor--errors)))))
                               (progn
                                 (if inhibit-message nil
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                    :format nil))
                                 (setq doom-doctor--warnings
                                       (cons
                                        (doom-print--format
                                         (doom-print--class 'warn "Cannot determine Git version. Doom requires git 2.23 or newer!"))
                                        doom-doctor--warnings))))))
                       (set-match-data save-match-data-internal 'evaporate))))
                 (if
                     (executable-find "rg")
                     nil
                   (progn
                     (if inhibit-message nil
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                        :format nil))
                     (setq doom-doctor--errors
                           (cons
                            (doom-print--format
                             (doom-print--class 'error "Couldn't find the `rg' binary; this a hard dependecy for Doom, file searches may not work at all"))
                            doom-doctor--errors)))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for Emacs config conflicts..."))
                :format nil)
               (if
                   (file-exists-p "~/.emacs")
                   (progn
                     (progn
                       (if inhibit-message nil
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                          :format nil))
                       (setq doom-doctor--warnings
                             (cons
                              (doom-print--format
                               (doom-print--class 'warn "Detected an ~/.emacs file, which may prevent Doom from loading"))
                              doom-doctor--warnings)))
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'fill
                                            (string-join
                                             (list "If Emacs finds an ~/.emacs file, it will ignore ~/.emacs.d, where Doom is " "typically installed. If you're seeing a vanilla Emacs splash screen, this " "may explain why. If you use Chemacs, you may ignore this warning.")
                                             "\n")))
                        :format nil))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for great Emacs features..."))
                :format nil)
               (if
                   (functionp 'json-serialize)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native JSON support"))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native JSON support"))
                          doom-doctor--warnings)))
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'fill
                                        (string-join
                                         (list "Users will see a substantial performance gain by building Emacs with " "jansson support (i.e. a native JSON library), particularly LSP users. " "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-json option.")
                                         "\n")))
                    :format nil)))
               (if
                   (featurep 'native-compile)
                   nil
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'warn "Emacs was not built with native compilation support"))
                      :format nil))
                   (setq doom-doctor--warnings
                         (cons
                          (doom-print--format
                           (doom-print--class 'warn "Emacs was not built with native compilation support"))
                          doom-doctor--warnings)))
                 (let
                     ((doom-print-indent
                       (+
                        (if t doom-print-indent-increment 0)
                        doom-print-indent)))
                   (doom-print
                    (doom-print--format
                     (doom-print--class 'fill
                                        (string-join
                                         (list "Users will see a substantial performance gain by building Emacs with " "native compilation support, availible in emacs 28+." "You must install a prebuilt Emacs binary with this included, or compile " "Emacs with the --with-native-compilation option.")
                                         "\n")))
                    :format nil)))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for private config conflicts..."))
                :format nil)
               (let*
                   ((xdg-dir
                     (concat
                      (or
                       (getenv "XDG_CONFIG_HOME")
                       "~/.config")
                      "/doom/"))
                    (doom-dir
                     (or
                      (getenv "DOOMDIR")
                      "~/.doom.d/"))
                    (dir
                     (if
                         (file-directory-p xdg-dir)
                         xdg-dir doom-dir)))
                 (if
                     (file-equal-p dir doom-emacs-dir)
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'error "Doom was cloned to %S, not ~/.emacs.d or ~/.config/emacs"
                                            (doom-print--class 'path dir)))
                        :format nil)
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'fill
                                              (string-join
                                               (list "Doom's source and your private Doom config have to live in separate directories. " "Putting them in the same directory (without changing the DOOMDIR environment " "variable) will cause errors on startup.")
                                               "\n")))
                          :format nil))))
                 (if
                     (and
                      (not
                       (file-equal-p xdg-dir doom-dir))
                      (file-directory-p xdg-dir)
                      (file-directory-p doom-dir))
                     (progn
                       (doom-print
                        (doom-print--format
                         (doom-print--class 'warn "Detected two private configs, in %s and %s")
                         (abbreviate-file-name xdg-dir)
                         doom-dir)
                        :format nil)
                       (let
                           ((doom-print-indent
                             (+
                              (if t doom-print-indent-increment 0)
                              doom-print-indent)))
                         (doom-print
                          (doom-print--format
                           (doom-print--class 'fill
                                              (string-join
                                               (list "The second directory will be ignored, as it has lower precedence.")
                                               "\n")))
                          :format nil)))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for stale elc files..."))
                :format nil)
               (elc-check-dir doom-emacs-dir)
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking for problematic git global settings..."))
                :format nil)
               (if
                   (executable-find "git")
                   (if
                       (= 0
                          (car
                           (doom-call-process "git" "config" "--global" "--get-regexp" "^url\\.git://github\\.com")))
                       (progn
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                              :format nil))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Detected insteadOf rules in your global gitconfig."))
                                  doom-doctor--warnings)))
                         (let
                             ((doom-print-indent
                               (+
                                (if t doom-print-indent-increment 0)
                                doom-print-indent)))
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'fill
                                                (string-join
                                                 (list "Doom's package manager heavily relies on git. In particular, many of its packages " "are hosted on github. Rewrite rules like these will break it:\n\n" "  [url \"git://github.com\"]\n" "  insteadOf = https://github.com\n\n" "Please remove them from your gitconfig or use a conditional includeIf rule to " "only apply your rewrites to specific repositories. See " "'https://git-scm.com/docs/git-config#_includes' for more information.")
                                                 "\n")))
                            :format nil))))
                 (progn
                   (if inhibit-message nil
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                      :format nil))
                   (setq doom-doctor--errors
                         (cons
                          (doom-print--format
                           (doom-print--class 'error "Couldn't find the `git' binary; this a hard dependecy for Doom!"))
                          doom-doctor--errors))))
               (doom-print
                (doom-print--format
                 (doom-print--class 'start "Checking Doom Emacs..."))
                :format nil)
               (condition-case ex
                   (let
                       ((doom-print-indent
                         (+
                          (if t doom-print-indent-increment 0)
                          doom-print-indent)))
                     (let
                         ((noninteractive nil)
                          kill-emacs-query-functions kill-emacs-hook)
                       (defvar doom-reloading-p nil)
                       (if
                           (file-exists-p doom-autoloads-file)
                           nil
                         (user-error "Autoloads file not generated. Did you remember to run 'doom sync'?"))
                       (require 'doom-start)
                       (doom-initialize-packages))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'success "Initialized Doom Emacs %s")
                       doom-version)
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (if
                           (hash-table-p doom-modules)
                           (doom-print--class 'success "Detected %d modules"
                                              (hash-table-count doom-modules))
                         (doom-print--class 'warn "Failed to load any modules. Do you have an private init.el?")))
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'success "Detected %d packages")
                       (length doom-packages))
                      :format nil)
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'start "Checking Doom core for irregularities..."))
                      :format nil)
                     (let
                         ((doom-print-indent
                           (+
                            (if t doom-print-indent-increment 0)
                            doom-print-indent)))
                       (let
                           ((--dolist-tail--
                             (list "savehist" "projectile.cache")))
                         (while --dolist-tail--
                           (let
                               ((file
                                 (car --dolist-tail--)))
                             (let*
                                 ((size
                                   (and t
                                        (condition-case nil
                                            (progn
                                              (doom-file-size file doom-cache-dir))
                                          (error nil)))))
                               (if size
                                   (if
                                       (> size 1048576)
                                       (progn
                                         (progn
                                           (if inhibit-message nil
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                  (/ size 1024 1024.0)))
                                              :format nil))
                                           (setq doom-doctor--warnings
                                                 (cons
                                                  (doom-print--format
                                                   (doom-print--class 'warn "%s is too large (%.02fmb). This may cause freezes or odd startup delays" file
                                                                      (/ size 1024 1024.0)))
                                                  doom-doctor--warnings)))
                                         (let
                                             ((doom-print-indent
                                               (+
                                                (if t doom-print-indent-increment 0)
                                                doom-print-indent)))
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'fill
                                                                (string-join
                                                                 (list "Consider deleting it from your system (manually)")
                                                                 "\n")))
                                            :format nil))))
                                 nil))
                             (setq --dolist-tail--
                                   (cdr --dolist-tail--)))))
                       (if
                           (condition-case nil
                               (progn
                                 (executable-find doom-projectile-fd-binary))
                             (error nil))
                           nil
                         (progn
                           (if inhibit-message nil
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                              :format nil))
                           (setq doom-doctor--warnings
                                 (cons
                                  (doom-print--format
                                   (doom-print--class 'warn "Couldn't find the `fd' binary; project file searches will be slightly slower"))
                                  doom-doctor--warnings))))
                       (require 'projectile)
                       (if
                           (projectile-project-root "~")
                           (progn
                             (progn
                               (if inhibit-message nil
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                  :format nil))
                               (setq doom-doctor--warnings
                                     (cons
                                      (doom-print--format
                                       (doom-print--class 'warn "Your $HOME is recognized as a project root"))
                                      doom-doctor--warnings)))
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'fill
                                                    (string-join
                                                     (list "Emacs will assume $HOME is the root of any project living under $HOME. If this isn't\n" "desired, you will need to remove \".git\" from `projectile-project-root-files-bottom-up'\n" "(a variable), e.g.\n\n" "  (after! projectile\n" "    (setq projectile-project-root-files-bottom-up\n" "          (remove \".git\" projectile-project-root-files-bottom-up)))")
                                                     "\n")))
                                :format nil))))
                       (if
                           (and
                            (file-equal-p doom-user-dir "~/.config/doom")
                            (file-directory-p "~/.doom.d"))
                           (progn
                             (doom-print
                              (doom-print--format
                               (doom-print--class 'warn "Both %S and '~/.doom.d' exist on your system")
                               (doom-print--class 'path doom-user-dir))
                              :format nil)
                             (let
                                 ((doom-print-indent
                                   (+
                                    (if t doom-print-indent-increment 0)
                                    doom-print-indent)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'fill
                                                    (string-join
                                                     (list "Doom will only load one of these (~/.config/doom takes precedence). Possessing\n" "both is rarely intentional; you should one or the other.")
                                                     "\n")))
                                :format nil))))
                       (if
                           (not
                            (executable-find "fc-list"))
                           (progn
                             (if inhibit-message nil
                               (doom-print
                                (doom-print--format
                                 (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                :format nil))
                             (setq doom-doctor--warnings
                                   (cons
                                    (doom-print--format
                                     (doom-print--class 'warn "Warning: unable to detect fonts because fontconfig isn't installed"))
                                    doom-doctor--warnings)))
                         (if
                             (and
                              (cond
                               ((eq system-type 'gnu/linux)
                                (let nil
                                  (concat
                                   (or
                                    (getenv "XDG_DATA_HOME")
                                    "~/.local/share")
                                   "/fonts/")))
                               ((eq system-type 'darwin)
                                (let nil "~/Library/Fonts/")))
                              (require 'all-the-icons nil t))
                             (progn
                               (let
                                   ((temp-buffer
                                     (generate-new-buffer " *temp*" t)))
                                 (save-current-buffer
                                   (set-buffer temp-buffer)
                                   (unwind-protect
                                       (progn
                                         (let
                                             ((errors 0))
                                           (let*
                                               ((output
                                                 (doom-call-process "fc-list" "" "file"))
                                                (status
                                                 (if output
                                                     (car-safe
                                                      (prog1 output
                                                        (setq output
                                                              (cdr output))))
                                                   (signal 'wrong-number-of-arguments
                                                           (list
                                                            '(status . output)
                                                            (length output))))))
                                             (if
                                                 (not
                                                  (= 0 status))
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--class 'error "There was an error running `fc-list'. Is fontconfig installed correctly?"))
                                                  :format nil)
                                               (insert
                                                (cdr
                                                 (doom-call-process "fc-list" "" "file")))
                                               (let
                                                   ((--dolist-tail-- all-the-icons-font-names))
                                                 (while --dolist-tail--
                                                   (let
                                                       ((font
                                                         (car --dolist-tail--)))
                                                     (if
                                                         (save-excursion
                                                           (re-search-backward font nil t))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--style 'green "Found font %s" font))
                                                          :format nil)
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'warn "Warning: couldn't find %S font")
                                                         font)
                                                        :format nil))
                                                     (setq --dolist-tail--
                                                           (cdr --dolist-tail--)))))
                                               (if
                                                   (> errors 0)
                                                   (progn
                                                     (let
                                                         ((doom-print-indent
                                                           (+
                                                            (if t doom-print-indent-increment 0)
                                                            doom-print-indent)))
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'fill
                                                                            (string-join
                                                                             (list "Some all-the-icons fonts were missing.\n\n" "You can install them by running `M-x all-the-icons-install-fonts' within Emacs.\n" "This could also mean you've installed them in non-standard locations, in which " "case feel free to ignore this warning.")
                                                                             "\n")))
                                                        :format nil))))))))
                                     (and
                                      (buffer-name temp-buffer)
                                      (kill-buffer temp-buffer)))))))))
                     (doom-print
                      (doom-print--format
                       (doom-print--class 'start "Checking for stale elc files in your DOOMDIR..."))
                      :format nil)
                     (if
                         (file-directory-p doom-user-dir)
                         (progn
                           (let
                               ((doom-print-indent
                                 (+
                                  (if t doom-print-indent-increment 0)
                                  doom-print-indent)))
                             (elc-check-dir doom-user-dir))))
                     (if doom-modules
                         (progn
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'start "Checking your enabled modules..."))
                            :format nil)
                           (advice-add #'require :around #'doom-shut-up-a)
                           (maphash
                            #'(lambda
                                (key plist)
                                (let
                                    (doom-local-errors doom-local-warnings)
                                  (let
                                      (doom-doctor--errors doom-doctor--warnings)
                                    (condition-case ex
                                        (let
                                            ((doctor-file
                                              (doom-module-path
                                               (car key)
                                               (cdr key)
                                               "doctor.el"))
                                             (packages-file
                                              (doom-module-path
                                               (car key)
                                               (cdr key)
                                               "packages.el")))
                                          (let*
                                              ((doom-output-indent 6)
                                               (--cl-var--
                                                (let
                                                    (doom-packages doom-disabled-packages)
                                                  (load packages-file 'noerror 'nomessage)
                                                  (mapcar #'car doom-packages)))
                                               (name nil))
                                            (while
                                                (consp --cl-var--)
                                              (setq name
                                                    (car --cl-var--))
                                              (if
                                                  (or
                                                   (doom-package-get name :disable)
                                                   (eval
                                                    (doom-package-get name :ignore))
                                                   (plist-member
                                                    (doom-package-get name :recipe)
                                                    :local-repo)
                                                   (locate-library
                                                    (symbol-name name))
                                                   (doom-package-built-in-p name)
                                                   (doom-package-installed-p name))
                                                  (progn)
                                                (doom-print
                                                 (doom-print--format
                                                  (doom-print--class 'error "Missing emacs package: %S")
                                                  name)
                                                 :format nil))
                                              (setq --cl-var--
                                                    (cdr --cl-var--)))
                                            nil)
                                          (let
                                              ((inhibit-message t))
                                            (load doctor-file 'noerror 'nomessage)))
                                      ((debug file-missing)
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "%s"
                                                                (error-message-string ex)))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "%s"
                                                                    (error-message-string ex)))
                                                doom-doctor--errors))))
                                      ((debug error)
                                       (progn
                                         (if inhibit-message nil
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'error "Syntax error: %s" ex))
                                            :format nil))
                                         (setq doom-doctor--errors
                                               (cons
                                                (doom-print--format
                                                 (doom-print--class 'error "Syntax error: %s" ex))
                                                doom-doctor--errors)))))
                                    (if
                                        (or doom-doctor--errors doom-doctor--warnings)
                                        (progn
                                          (let
                                              ((doom-print-indent
                                                (+
                                                 (if t doom-print-indent-increment 0)
                                                 doom-print-indent)))
                                            (doom-print
                                             (doom-print--format
                                              (doom-print--class 'start
                                                                 (doom-print--style 'bold "%s %s"))
                                              (car key)
                                              (cdr key))
                                             :format nil)
                                            (doom-print
                                             (doom-print--format "%s"
                                                                 (string-join
                                                                  (append doom-doctor--errors doom-doctor--warnings)
                                                                  "\n"))
                                             :format nil))
                                          (setq doom-local-errors doom-doctor--errors doom-local-warnings doom-doctor--warnings))))
                                  (setq doom-doctor--errors
                                        (append doom-doctor--errors doom-local-errors))
                                  (setq doom-doctor--warnings
                                        (append doom-doctor--warnings doom-local-warnings))))
                            doom-modules))))
                 ((debug error)
                  (progn
                    (if inhibit-message nil
                      (doom-print
                       (doom-print--format
                        (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                           (or
                                            (cdr-safe ex)
                                            (car ex))))
                       :format nil))
                    (setq doom-doctor--warnings
                          (cons
                           (doom-print--format
                            (doom-print--class 'warn "Attempt to load DOOM failed\n  %s\n"
                                               (or
                                                (cdr-safe ex)
                                                (car ex))))
                           doom-doctor--warnings)))
                  (setq doom-modules nil)))
               (terpri)
               (let
                   ((--dolist-tail--
                     (list
                      (list doom-doctor--warnings "warning" 'yellow)
                      (list doom-doctor--errors "error" 'red))))
                 (while --dolist-tail--
                   (let
                       ((msg
                         (car --dolist-tail--)))
                     (if
                         (car msg)
                         (progn
                           (doom-print
                            (doom-print--format
                             (doom-print--class 'color
                                                (nth 2 msg)
                                                (if
                                                    (cdr msg)
                                                    "There are %d %ss!" "There is %d %s!")
                                                (length
                                                 (car msg))
                                                (nth 1 msg)))
                            :format nil)))
                     (setq --dolist-tail--
                           (cdr --dolist-tail--)))))
               (if
                   (or doom-doctor--errors doom-doctor--warnings)
                   nil
                 (doom-print
                  (doom-print--format
                   (doom-print--style 'green "Everything seems fine, happy Emacs'ing!"))
                  :format nil))
               (exit! :pager\? "+G")))))
  (prefix . "doom")))

;;;; 30
((doom-cli-context-execute #s(doom-cli-context
                              (25359 42750 192253 0)
                              13992 -1 nil nil nil "doom" nil nil
                              ("doom" "doctor")
                              nil
                              ("doctor")
                              (("--eval")
                               ("-E")
                               ("--strict-load")
                               ("--load")
                               ("-L")
                               ("--color")
                               ("--profile")
                               ("--pager")
                               ("--emacsdir")
                               ("--doomdir")
                               ("--debug")
                               ("-D")
                               ("--force")
                               ("-!"))
                              ((t)
                               (("doom" "doctor"))
                               (("doom")
                                "doctor"))
                              #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
 ((context . #s(doom-cli-context
                (25359 42750 192253 0)
                13992 -1 nil nil nil "doom" nil nil
                ("doom" "doctor")
                nil
                ("doctor")
                (("--eval")
                 ("-E")
                 ("--strict-load")
                 ("--load")
                 ("-L")
                 ("--color")
                 ("--profile")
                 ("--pager")
                 ("--emacsdir")
                 ("--doomdir")
                 ("--debug")
                 ("-D")
                 ("--force")
                 ("-!"))
                ((t)
                 (("doom" "doctor"))
                 (("doom")
                  "doctor"))
                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))))

;;;; 31
((let
     ((result
       (doom-cli-context-execute context)))
   (run-hook-with-args 'doom-cli-after-run-functions context result))
 nil)

;;;; 32
((let*
     ((args
       (cons
        (if
            (getenv "__DOOMDUMP")
            :dump prefix)
        args))
      (context
       (doom-cli-context-restore
        (getenv "__DOOMCONTEXT")
        context))
      (context
       (doom-cli-context-parse args context)))
   (run-hook-with-args 'doom-cli-before-run-functions context)
   (let
       ((result
         (doom-cli-context-execute context)))
     (run-hook-with-args 'doom-cli-after-run-functions context result))
   0)
 ((prefix . "doom")
  (args
   ("doctor"))
  (args "doctor")
  (context . #s(doom-cli-context
                (25359 42750 192253 0)
                13992 -1 nil nil nil "doom" nil nil
                ("doom" "doctor")
                nil
                ("doctor")
                (("--eval")
                 ("-E")
                 ("--strict-load")
                 ("--load")
                 ("-L")
                 ("--color")
                 ("--profile")
                 ("--pager")
                 ("--emacsdir")
                 ("--doomdir")
                 ("--debug")
                 ("-D")
                 ("--force")
                 ("-!"))
                ((t)
                 (("doom" "doctor"))
                 (("doom")
                  "doctor"))
                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (write-logs-fn .
                 #[128 "\302\300\303\301\4\"\"\207"
                       [doom-cli--output-write-logs-h
                        (#s(doom-cli-context
                            (25359 42750 192253 0)
                            13992 -1 nil nil nil "doom" nil nil
                            ("doom" "doctor")
                            nil
                            ("doctor")
                            (("--eval")
                             ("-E")
                             ("--strict-load")
                             ("--load")
                             ("-L")
                             ("--color")
                             ("--profile")
                             ("--pager")
                             ("--emacsdir")
                             ("--doomdir")
                             ("--debug")
                             ("-D")
                             ("--force")
                             ("-!"))
                            ((t)
                             (("doom" "doctor"))
                             (("doom")
                              "doctor"))
                            #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
                        apply append]
                       6 "\n\n(fn &rest ARGS2)"])
  (show-benchmark-fn .
                     #[128 "\302\300\303\301\4\"\"\207"
                           [doom-cli--output-benchmark-h
                            (#s(doom-cli-context
                                (25359 42750 192253 0)
                                13992 -1 nil nil nil "doom" nil nil
                                ("doom" "doctor")
                                nil
                                ("doctor")
                                (("--eval")
                                 ("-E")
                                 ("--strict-load")
                                 ("--load")
                                 ("-L")
                                 ("--color")
                                 ("--profile")
                                 ("--pager")
                                 ("--emacsdir")
                                 ("--doomdir")
                                 ("--debug")
                                 ("-D")
                                 ("--force")
                                 ("-!"))
                                ((t)
                                 (("doom" "doctor"))
                                 (("doom")
                                  "doctor"))
                                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
                            apply append]
                           6 "\n\n(fn &rest ARGS2)"])
  (vnew .
        #[128 "\302\300\303\301\4\"\"\207"
              [doom-cli--redirect-output-a
               (#s(doom-cli-context
                   (25359 42750 192253 0)
                   13992 -1 nil nil nil "doom" nil nil
                   ("doom" "doctor")
                   nil
                   ("doctor")
                   (("--eval")
                    ("-E")
                    ("--strict-load")
                    ("--load")
                    ("-L")
                    ("--color")
                    ("--profile")
                    ("--pager")
                    ("--emacsdir")
                    ("--doomdir")
                    ("--debug")
                    ("-D")
                    ("--force")
                    ("-!"))
                   ((t)
                    (("doom" "doctor"))
                    (("doom")
                     "doctor"))
                   #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
               apply append]
              6 "\n\n(fn &rest ARGS2)"])
  (old . #<subr message>)
  (args "doom" "doctor")
  (context . #s(doom-cli-context
                (25359 42750 192253 0)
                13992 -1 nil nil nil "doom" nil nil
                ("doom" "doctor")
                nil
                ("doctor")
                (("--eval")
                 ("-E")
                 ("--strict-load")
                 ("--load")
                 ("-L")
                 ("--color")
                 ("--profile")
                 ("--pager")
                 ("--emacsdir")
                 ("--doomdir")
                 ("--debug")
                 ("-D")
                 ("--force")
                 ("-!"))
                ((t)
                 (("doom" "doctor"))
                 (("doom")
                  "doctor"))
                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (context . #s(doom-cli-context
                (25359 42750 192253 0)
                13992 -1 nil nil nil "doom" nil nil
                ("doom" "doctor")
                nil
                ("doctor")
                (("--eval")
                 ("-E")
                 ("--strict-load")
                 ("--load")
                 ("-L")
                 ("--color")
                 ("--profile")
                 ("--pager")
                 ("--emacsdir")
                 ("--doomdir")
                 ("--debug")
                 ("-D")
                 ("--force")
                 ("-!"))
                ((t)
                 (("doom" "doctor"))
                 (("doom")
                  "doctor"))
                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))))

;;;; 33
((condition-case e
     (let*
         ((args
           (cons
            (if
                (getenv "__DOOMDUMP")
                :dump prefix)
            args))
          (context
           (doom-cli-context-restore
            (getenv "__DOOMCONTEXT")
            context))
          (context
           (doom-cli-context-parse args context)))
       (run-hook-with-args 'doom-cli-before-run-functions context)
       (let
           ((result
             (doom-cli-context-execute context)))
         (run-hook-with-args 'doom-cli-after-run-functions context result))
       0)
   (doom-cli-wrong-number-of-arguments-error
    (let*
        ((val
          (cdr e)))
      (progn
        (ignore
         (consp val))
        (let*
            ((x13
              (car-safe val))
             (x14
              (cdr-safe val)))
          (progn
            (ignore
             (consp x14))
            (let*
                ((x15
                  (car-safe x14))
                 (x16
                  (cdr-safe x14)))
              (progn
                (ignore
                 (consp x16))
                (let*
                    ((x17
                      (car-safe x16))
                     (x18
                      (cdr-safe x16)))
                  (progn
                    (ignore
                     (consp x18))
                    (let*
                        ((x19
                          (car-safe x18))
                         (x20
                          (cdr-safe x18)))
                      (progn
                        (ignore
                         (consp x20))
                        (let*
                            ((x21
                              (car-safe x20))
                             (x22
                              (cdr-safe x20)))
                          (progn
                            (ignore
                             (null x22))
                            (let
                                ((command x13)
                                 (flag x15)
                                 (args x17)
                                 (min x19)
                                 (max x21))
                              (progn
                                (doom-print
                                 (doom-print--format
                                  (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
                                  (or flag
                                      (doom-cli-command-string
                                       (if
                                           (keywordp
                                            (car command))
                                           command
                                         (cdr command))))
                                  (if
                                      (or
                                       (= min max)
                                       (= max most-positive-fixnum))
                                      min
                                    (format "%d-%d" min max))
                                  (if
                                      (or
                                       (= min 0)
                                       (> min 1))
                                      "s" "")
                                  (length args))
                                 :format nil)
                                (doom-cli-call
                                 (cons ':help
                                       (cons "--synopsis"
                                             (cons "--postamble"
                                                   (cdr
                                                    (doom-cli--command context)))))
                                 context e)))))))))))))))
    5)
   (doom-cli-unrecognized-option-error
    (doom-print
     (doom-print--format
      (doom-print--style 'red "Error: unknown option %s")
      (car
       (cdr e)))
     :format nil)
    (doom-cli-call
     (cons ':help
           (cons "--synopsis"
                 (cons "--postamble"
                       (cdr
                        (doom-cli--command context)))))
     context e)
    5)
   (doom-cli-invalid-option-error
    (let*
        ((val
          (cdr e)))
      (progn
        (ignore
         (consp val))
        (let*
            ((x23
              (car-safe val))
             (x24
              (cdr-safe val)))
          (progn
            (ignore
             (consp x24))
            (let*
                ((x25
                  (car-safe x24))
                 (x26
                  (cdr-safe x24)))
              (progn
                (ignore
                 (consp x26))
                (let*
                    ((x27
                      (car-safe x26))
                     (x28
                      (cdr-safe x26)))
                  (progn
                    (ignore
                     (consp x28))
                    (let*
                        ((x29
                          (car-safe x28))
                         (x30
                          (cdr-safe x28)))
                      (progn
                        (ignore
                         (null x30))
                        (let
                            ((types x23)
                             (option x25)
                             (value x27)
                             (errors x29))
                          (progn
                            (doom-print
                             (doom-print--format
                              (doom-print--style 'red "Error: %s received invalid value %S")
                              (string-join
                               (progn
                                 (or
                                  (progn
                                    (and
                                     (memq
                                      (type-of option)
                                      cl-struct-doom-cli-option-tags)
                                     t))
                                  (signal 'wrong-type-argument
                                          (list 'doom-cli-option option)))
                                 (aref option 5))
                               "/")
                              value)
                             :format nil)
                            (doom-print
                             (doom-print--format
                              (doom-print--style 'bold "\nValidation errors:"))
                             :format nil)
                            (let
                                ((--dolist-tail-- errors))
                              (while --dolist-tail--
                                (let
                                    ((err
                                      (car --dolist-tail--)))
                                  (doom-print
                                   (doom-print--format
                                    (doom-print--class 'item "%s."
                                                       (doom-print--class 'fill err)))
                                   :format nil)
                                  (setq --dolist-tail--
                                        (cdr --dolist-tail--)))))))))))))))))
    (doom-cli-call
     (cons ':help
           (cons "--postamble"
                 (cdr
                  (doom-cli--command context))))
     context e)
    5)
   (doom-cli-command-not-found-error
    (let*
        ((command
          (cdr e))
         (cli
          (doom-cli-get command)))
      (cond
       ((null cli)
        (doom-print
         (doom-print--format
          (doom-print--style 'red "Error: unrecognized command '%s'")
          (doom-cli-command-string
           (or
            (cdr command)
            command)))
         :format nil)
        (doom-cli-call
         (cons ':help
               (cons "--similar"
                     (cons "--postamble"
                           (cdr command))))
         context e))
       ((null
         (progn
           (or
            (progn
              (and
               (memq
                (type-of cli)
                cl-struct-doom-cli-tags)
               t))
            (signal 'wrong-type-argument
                    (list 'doom-cli cli)))
           (aref cli 9)))
        (doom-print
         (doom-print--format
          (doom-print--style 'red "Error: a subcommand is required"))
         :format nil)
        (doom-cli-call
         (cons ':help
               (cons "--subcommands"
                     (cons "--postamble"
                           (cdr command))))
         context e))))
    4)
   (doom-cli-invalid-prefix-error
    (let
        ((prefix
          (car
           (cdr e))))
      (doom-print
       (doom-print--format
        (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
        prefix)
       :format nil)
      (let*
          ((suggested
            (and t
                 (let*
                     ((--cl-var-- t)
                      --cl-var--)
                   (catch '--cl-block---cl-finish----
                     (maphash
                      #'(lambda
                          (--cl-var-- cli)
                          (or
                           (if
                               (progn
                                 (or
                                  (progn
                                    (and
                                     (memq
                                      (type-of cli)
                                      cl-struct-doom-cli-tags)
                                     t))
                                  (signal 'wrong-type-argument
                                          (list 'doom-cli cli)))
                                 (aref cli 2))
                               t
                             (setq --cl-var--
                                   (car
                                    (progn
                                      (or
                                       (progn
                                         (and
                                          (memq
                                           (type-of cli)
                                           cl-struct-doom-cli-tags)
                                          t))
                                       (signal 'wrong-type-argument
                                               (list 'doom-cli cli)))
                                      (aref cli 1)))
                                   --cl-var-- nil))
                           (throw '--cl-block---cl-finish---- nil)))
                      doom-cli--table))
                   --cl-var--))))
        (if suggested
            (doom-print
             (doom-print--format "Did you mean %S?" suggested)
             :format nil)
          (doom-print
           (doom-print--format "There are no commands defined under %S." prefix)
           :format nil))))
    4)
   (user-error
    (doom-print
     (doom-print--format
      (doom-print--style 'red "Error: %s")
      (car
       (cdr e)))
     :format nil)
    (doom-print
     (doom-print--format "\nAborting...")
     :format nil)
    3))
 nil)

;;;; 34
((doom-cli--exit
  (condition-case e
      (let*
          ((args
            (cons
             (if
                 (getenv "__DOOMDUMP")
                 :dump prefix)
             args))
           (context
            (doom-cli-context-restore
             (getenv "__DOOMCONTEXT")
             context))
           (context
            (doom-cli-context-parse args context)))
        (run-hook-with-args 'doom-cli-before-run-functions context)
        (let
            ((result
              (doom-cli-context-execute context)))
          (run-hook-with-args 'doom-cli-after-run-functions context result))
        0)
    (doom-cli-wrong-number-of-arguments-error
     (let*
         ((val
           (cdr e)))
       (progn
         (ignore
          (consp val))
         (let*
             ((x13
               (car-safe val))
              (x14
               (cdr-safe val)))
           (progn
             (ignore
              (consp x14))
             (let*
                 ((x15
                   (car-safe x14))
                  (x16
                   (cdr-safe x14)))
               (progn
                 (ignore
                  (consp x16))
                 (let*
                     ((x17
                       (car-safe x16))
                      (x18
                       (cdr-safe x16)))
                   (progn
                     (ignore
                      (consp x18))
                     (let*
                         ((x19
                           (car-safe x18))
                          (x20
                           (cdr-safe x18)))
                       (progn
                         (ignore
                          (consp x20))
                         (let*
                             ((x21
                               (car-safe x20))
                              (x22
                               (cdr-safe x20)))
                           (progn
                             (ignore
                              (null x22))
                             (let
                                 ((command x13)
                                  (flag x15)
                                  (args x17)
                                  (min x19)
                                  (max x21))
                               (progn
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
                                   (or flag
                                       (doom-cli-command-string
                                        (if
                                            (keywordp
                                             (car command))
                                            command
                                          (cdr command))))
                                   (if
                                       (or
                                        (= min max)
                                        (= max most-positive-fixnum))
                                       min
                                     (format "%d-%d" min max))
                                   (if
                                       (or
                                        (= min 0)
                                        (> min 1))
                                       "s" "")
                                   (length args))
                                  :format nil)
                                 (doom-cli-call
                                  (cons ':help
                                        (cons "--synopsis"
                                              (cons "--postamble"
                                                    (cdr
                                                     (doom-cli--command context)))))
                                  context e)))))))))))))))
     5)
    (doom-cli-unrecognized-option-error
     (doom-print
      (doom-print--format
       (doom-print--style 'red "Error: unknown option %s")
       (car
        (cdr e)))
      :format nil)
     (doom-cli-call
      (cons ':help
            (cons "--synopsis"
                  (cons "--postamble"
                        (cdr
                         (doom-cli--command context)))))
      context e)
     5)
    (doom-cli-invalid-option-error
     (let*
         ((val
           (cdr e)))
       (progn
         (ignore
          (consp val))
         (let*
             ((x23
               (car-safe val))
              (x24
               (cdr-safe val)))
           (progn
             (ignore
              (consp x24))
             (let*
                 ((x25
                   (car-safe x24))
                  (x26
                   (cdr-safe x24)))
               (progn
                 (ignore
                  (consp x26))
                 (let*
                     ((x27
                       (car-safe x26))
                      (x28
                       (cdr-safe x26)))
                   (progn
                     (ignore
                      (consp x28))
                     (let*
                         ((x29
                           (car-safe x28))
                          (x30
                           (cdr-safe x28)))
                       (progn
                         (ignore
                          (null x30))
                         (let
                             ((types x23)
                              (option x25)
                              (value x27)
                              (errors x29))
                           (progn
                             (doom-print
                              (doom-print--format
                               (doom-print--style 'red "Error: %s received invalid value %S")
                               (string-join
                                (progn
                                  (or
                                   (progn
                                     (and
                                      (memq
                                       (type-of option)
                                       cl-struct-doom-cli-option-tags)
                                      t))
                                   (signal 'wrong-type-argument
                                           (list 'doom-cli-option option)))
                                  (aref option 5))
                                "/")
                               value)
                              :format nil)
                             (doom-print
                              (doom-print--format
                               (doom-print--style 'bold "\nValidation errors:"))
                              :format nil)
                             (let
                                 ((--dolist-tail-- errors))
                               (while --dolist-tail--
                                 (let
                                     ((err
                                       (car --dolist-tail--)))
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--class 'item "%s."
                                                        (doom-print--class 'fill err)))
                                    :format nil)
                                   (setq --dolist-tail--
                                         (cdr --dolist-tail--)))))))))))))))))
     (doom-cli-call
      (cons ':help
            (cons "--postamble"
                  (cdr
                   (doom-cli--command context))))
      context e)
     5)
    (doom-cli-command-not-found-error
     (let*
         ((command
           (cdr e))
          (cli
           (doom-cli-get command)))
       (cond
        ((null cli)
         (doom-print
          (doom-print--format
           (doom-print--style 'red "Error: unrecognized command '%s'")
           (doom-cli-command-string
            (or
             (cdr command)
             command)))
          :format nil)
         (doom-cli-call
          (cons ':help
                (cons "--similar"
                      (cons "--postamble"
                            (cdr command))))
          context e))
        ((null
          (progn
            (or
             (progn
               (and
                (memq
                 (type-of cli)
                 cl-struct-doom-cli-tags)
                t))
             (signal 'wrong-type-argument
                     (list 'doom-cli cli)))
            (aref cli 9)))
         (doom-print
          (doom-print--format
           (doom-print--style 'red "Error: a subcommand is required"))
          :format nil)
         (doom-cli-call
          (cons ':help
                (cons "--subcommands"
                      (cons "--postamble"
                            (cdr command))))
          context e))))
     4)
    (doom-cli-invalid-prefix-error
     (let
         ((prefix
           (car
            (cdr e))))
       (doom-print
        (doom-print--format
         (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
         prefix)
        :format nil)
       (let*
           ((suggested
             (and t
                  (let*
                      ((--cl-var-- t)
                       --cl-var--)
                    (catch '--cl-block---cl-finish----
                      (maphash
                       #'(lambda
                           (--cl-var-- cli)
                           (or
                            (if
                                (progn
                                  (or
                                   (progn
                                     (and
                                      (memq
                                       (type-of cli)
                                       cl-struct-doom-cli-tags)
                                      t))
                                   (signal 'wrong-type-argument
                                           (list 'doom-cli cli)))
                                  (aref cli 2))
                                t
                              (setq --cl-var--
                                    (car
                                     (progn
                                       (or
                                        (progn
                                          (and
                                           (memq
                                            (type-of cli)
                                            cl-struct-doom-cli-tags)
                                           t))
                                        (signal 'wrong-type-argument
                                                (list 'doom-cli cli)))
                                       (aref cli 1)))
                                    --cl-var-- nil))
                            (throw '--cl-block---cl-finish---- nil)))
                       doom-cli--table))
                    --cl-var--))))
         (if suggested
             (doom-print
              (doom-print--format "Did you mean %S?" suggested)
              :format nil)
           (doom-print
            (doom-print--format "There are no commands defined under %S." prefix)
            :format nil))))
     4)
    (user-error
     (doom-print
      (doom-print--format
       (doom-print--style 'red "Error: %s")
       (car
        (cdr e)))
      :format nil)
     (doom-print
      (doom-print--format "\nAborting...")
      :format nil)
     3))
  context)
 nil)

;;;; 35
((progn
   (if
       (or init-file-debug noninteractive)
       (progn
         (let
             ((inhibit-message t))
           (message "%s"
                    (propertize
                     (doom-print--format
                      (format "* [%s] %s"
                              (format "%.06f"
                                      (float-time
                                       (time-subtract
                                        (current-time)
                                        before-init-time)))
                              "Starting!"))
                     'face 'font-lock-doc-face)))))
   (add-hook 'kill-emacs-hook show-benchmark-fn 94)
   (add-hook 'kill-emacs-hook write-logs-fn 95)
   (if
       (doom-cli-context-pipe-p context :out t)
       (progn
         (setq doom-print-backend nil)))
   (if
       (doom-cli-context-pipe-p context :in)
       (progn
         (save-current-buffer
           (set-buffer
            (progn
              (or
               (progn
                 (and
                  (memq
                   (type-of context)
                   cl-struct-doom-cli-context-tags)
                  t))
               (signal 'wrong-type-argument
                       (list 'doom-cli-context context)))
              (aref context 15)))
           (while
               (let*
                   ((in
                     (and t
                          (condition-case nil
                              (progn
                                (read-from-minibuffer ""))
                            (error nil)))))
                 (if in
                     (insert in "\n")
                   (condition-case nil
                       (progn
                         (delete-char -1))
                     (error nil))))))))
   (if
       (or init-file-debug noninteractive)
       (progn
         (let
             ((inhibit-message t))
           (message "%s"
                    (propertize
                     (doom-print--format
                      (format "* [%s] %s"
                              (format "%.06f"
                                      (float-time
                                       (time-subtract
                                        (current-time)
                                        before-init-time)))
                              "doom-cli-run: %s")
                      command-line-args)
                     'face 'font-lock-doc-face)))))
   (doom-cli--exit
    (condition-case e
        (let*
            ((args
              (cons
               (if
                   (getenv "__DOOMDUMP")
                   :dump prefix)
               args))
             (context
              (doom-cli-context-restore
               (getenv "__DOOMCONTEXT")
               context))
             (context
              (doom-cli-context-parse args context)))
          (run-hook-with-args 'doom-cli-before-run-functions context)
          (let
              ((result
                (doom-cli-context-execute context)))
            (run-hook-with-args 'doom-cli-after-run-functions context result))
          0)
      (doom-cli-wrong-number-of-arguments-error
       (let*
           ((val
             (cdr e)))
         (progn
           (ignore
            (consp val))
           (let*
               ((x13
                 (car-safe val))
                (x14
                 (cdr-safe val)))
             (progn
               (ignore
                (consp x14))
               (let*
                   ((x15
                     (car-safe x14))
                    (x16
                     (cdr-safe x14)))
                 (progn
                   (ignore
                    (consp x16))
                   (let*
                       ((x17
                         (car-safe x16))
                        (x18
                         (cdr-safe x16)))
                     (progn
                       (ignore
                        (consp x18))
                       (let*
                           ((x19
                             (car-safe x18))
                            (x20
                             (cdr-safe x18)))
                         (progn
                           (ignore
                            (consp x20))
                           (let*
                               ((x21
                                 (car-safe x20))
                                (x22
                                 (cdr-safe x20)))
                             (progn
                               (ignore
                                (null x22))
                               (let
                                   ((command x13)
                                    (flag x15)
                                    (args x17)
                                    (min x19)
                                    (max x21))
                                 (progn
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
                                     (or flag
                                         (doom-cli-command-string
                                          (if
                                              (keywordp
                                               (car command))
                                              command
                                            (cdr command))))
                                     (if
                                         (or
                                          (= min max)
                                          (= max most-positive-fixnum))
                                         min
                                       (format "%d-%d" min max))
                                     (if
                                         (or
                                          (= min 0)
                                          (> min 1))
                                         "s" "")
                                     (length args))
                                    :format nil)
                                   (doom-cli-call
                                    (cons ':help
                                          (cons "--synopsis"
                                                (cons "--postamble"
                                                      (cdr
                                                       (doom-cli--command context)))))
                                    context e)))))))))))))))
       5)
      (doom-cli-unrecognized-option-error
       (doom-print
        (doom-print--format
         (doom-print--style 'red "Error: unknown option %s")
         (car
          (cdr e)))
        :format nil)
       (doom-cli-call
        (cons ':help
              (cons "--synopsis"
                    (cons "--postamble"
                          (cdr
                           (doom-cli--command context)))))
        context e)
       5)
      (doom-cli-invalid-option-error
       (let*
           ((val
             (cdr e)))
         (progn
           (ignore
            (consp val))
           (let*
               ((x23
                 (car-safe val))
                (x24
                 (cdr-safe val)))
             (progn
               (ignore
                (consp x24))
               (let*
                   ((x25
                     (car-safe x24))
                    (x26
                     (cdr-safe x24)))
                 (progn
                   (ignore
                    (consp x26))
                   (let*
                       ((x27
                         (car-safe x26))
                        (x28
                         (cdr-safe x26)))
                     (progn
                       (ignore
                        (consp x28))
                       (let*
                           ((x29
                             (car-safe x28))
                            (x30
                             (cdr-safe x28)))
                         (progn
                           (ignore
                            (null x30))
                           (let
                               ((types x23)
                                (option x25)
                                (value x27)
                                (errors x29))
                             (progn
                               (doom-print
                                (doom-print--format
                                 (doom-print--style 'red "Error: %s received invalid value %S")
                                 (string-join
                                  (progn
                                    (or
                                     (progn
                                       (and
                                        (memq
                                         (type-of option)
                                         cl-struct-doom-cli-option-tags)
                                        t))
                                     (signal 'wrong-type-argument
                                             (list 'doom-cli-option option)))
                                    (aref option 5))
                                  "/")
                                 value)
                                :format nil)
                               (doom-print
                                (doom-print--format
                                 (doom-print--style 'bold "\nValidation errors:"))
                                :format nil)
                               (let
                                   ((--dolist-tail-- errors))
                                 (while --dolist-tail--
                                   (let
                                       ((err
                                         (car --dolist-tail--)))
                                     (doom-print
                                      (doom-print--format
                                       (doom-print--class 'item "%s."
                                                          (doom-print--class 'fill err)))
                                      :format nil)
                                     (setq --dolist-tail--
                                           (cdr --dolist-tail--)))))))))))))))))
       (doom-cli-call
        (cons ':help
              (cons "--postamble"
                    (cdr
                     (doom-cli--command context))))
        context e)
       5)
      (doom-cli-command-not-found-error
       (let*
           ((command
             (cdr e))
            (cli
             (doom-cli-get command)))
         (cond
          ((null cli)
           (doom-print
            (doom-print--format
             (doom-print--style 'red "Error: unrecognized command '%s'")
             (doom-cli-command-string
              (or
               (cdr command)
               command)))
            :format nil)
           (doom-cli-call
            (cons ':help
                  (cons "--similar"
                        (cons "--postamble"
                              (cdr command))))
            context e))
          ((null
            (progn
              (or
               (progn
                 (and
                  (memq
                   (type-of cli)
                   cl-struct-doom-cli-tags)
                  t))
               (signal 'wrong-type-argument
                       (list 'doom-cli cli)))
              (aref cli 9)))
           (doom-print
            (doom-print--format
             (doom-print--style 'red "Error: a subcommand is required"))
            :format nil)
           (doom-cli-call
            (cons ':help
                  (cons "--subcommands"
                        (cons "--postamble"
                              (cdr command))))
            context e))))
       4)
      (doom-cli-invalid-prefix-error
       (let
           ((prefix
             (car
              (cdr e))))
         (doom-print
          (doom-print--format
           (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
           prefix)
          :format nil)
         (let*
             ((suggested
               (and t
                    (let*
                        ((--cl-var-- t)
                         --cl-var--)
                      (catch '--cl-block---cl-finish----
                        (maphash
                         #'(lambda
                             (--cl-var-- cli)
                             (or
                              (if
                                  (progn
                                    (or
                                     (progn
                                       (and
                                        (memq
                                         (type-of cli)
                                         cl-struct-doom-cli-tags)
                                        t))
                                     (signal 'wrong-type-argument
                                             (list 'doom-cli cli)))
                                    (aref cli 2))
                                  t
                                (setq --cl-var--
                                      (car
                                       (progn
                                         (or
                                          (progn
                                            (and
                                             (memq
                                              (type-of cli)
                                              cl-struct-doom-cli-tags)
                                             t))
                                          (signal 'wrong-type-argument
                                                  (list 'doom-cli cli)))
                                         (aref cli 1)))
                                      --cl-var-- nil))
                              (throw '--cl-block---cl-finish---- nil)))
                         doom-cli--table))
                      --cl-var--))))
           (if suggested
               (doom-print
                (doom-print--format "Did you mean %S?" suggested)
                :format nil)
             (doom-print
              (doom-print--format "There are no commands defined under %S." prefix)
              :format nil))))
       4)
      (user-error
       (doom-print
        (doom-print--format
         (doom-print--style 'red "Error: %s")
         (car
          (cdr e)))
        :format nil)
       (doom-print
        (doom-print--format "\nAborting...")
        :format nil)
       3))
    context))
 nil)

;;;; 36
((progn
   (fset #'message vnew)
   (progn
     (if
         (or init-file-debug noninteractive)
         (progn
           (let
               ((inhibit-message t))
             (message "%s"
                      (propertize
                       (doom-print--format
                        (format "* [%s] %s"
                                (format "%.06f"
                                        (float-time
                                         (time-subtract
                                          (current-time)
                                          before-init-time)))
                                "Starting!"))
                       'face 'font-lock-doc-face)))))
     (add-hook 'kill-emacs-hook show-benchmark-fn 94)
     (add-hook 'kill-emacs-hook write-logs-fn 95)
     (if
         (doom-cli-context-pipe-p context :out t)
         (progn
           (setq doom-print-backend nil)))
     (if
         (doom-cli-context-pipe-p context :in)
         (progn
           (save-current-buffer
             (set-buffer
              (progn
                (or
                 (progn
                   (and
                    (memq
                     (type-of context)
                     cl-struct-doom-cli-context-tags)
                    t))
                 (signal 'wrong-type-argument
                         (list 'doom-cli-context context)))
                (aref context 15)))
             (while
                 (let*
                     ((in
                       (and t
                            (condition-case nil
                                (progn
                                  (read-from-minibuffer ""))
                              (error nil)))))
                   (if in
                       (insert in "\n")
                     (condition-case nil
                         (progn
                           (delete-char -1))
                       (error nil))))))))
     (if
         (or init-file-debug noninteractive)
         (progn
           (let
               ((inhibit-message t))
             (message "%s"
                      (propertize
                       (doom-print--format
                        (format "* [%s] %s"
                                (format "%.06f"
                                        (float-time
                                         (time-subtract
                                          (current-time)
                                          before-init-time)))
                                "doom-cli-run: %s")
                        command-line-args)
                       'face 'font-lock-doc-face)))))
     (doom-cli--exit
      (condition-case e
          (let*
              ((args
                (cons
                 (if
                     (getenv "__DOOMDUMP")
                     :dump prefix)
                 args))
               (context
                (doom-cli-context-restore
                 (getenv "__DOOMCONTEXT")
                 context))
               (context
                (doom-cli-context-parse args context)))
            (run-hook-with-args 'doom-cli-before-run-functions context)
            (let
                ((result
                  (doom-cli-context-execute context)))
              (run-hook-with-args 'doom-cli-after-run-functions context result))
            0)
        (doom-cli-wrong-number-of-arguments-error
         (let*
             ((val
               (cdr e)))
           (progn
             (ignore
              (consp val))
             (let*
                 ((x13
                   (car-safe val))
                  (x14
                   (cdr-safe val)))
               (progn
                 (ignore
                  (consp x14))
                 (let*
                     ((x15
                       (car-safe x14))
                      (x16
                       (cdr-safe x14)))
                   (progn
                     (ignore
                      (consp x16))
                     (let*
                         ((x17
                           (car-safe x16))
                          (x18
                           (cdr-safe x16)))
                       (progn
                         (ignore
                          (consp x18))
                         (let*
                             ((x19
                               (car-safe x18))
                              (x20
                               (cdr-safe x18)))
                           (progn
                             (ignore
                              (consp x20))
                             (let*
                                 ((x21
                                   (car-safe x20))
                                  (x22
                                   (cdr-safe x20)))
                               (progn
                                 (ignore
                                  (null x22))
                                 (let
                                     ((command x13)
                                      (flag x15)
                                      (args x17)
                                      (min x19)
                                      (max x21))
                                   (progn
                                     (doom-print
                                      (doom-print--format
                                       (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
                                       (or flag
                                           (doom-cli-command-string
                                            (if
                                                (keywordp
                                                 (car command))
                                                command
                                              (cdr command))))
                                       (if
                                           (or
                                            (= min max)
                                            (= max most-positive-fixnum))
                                           min
                                         (format "%d-%d" min max))
                                       (if
                                           (or
                                            (= min 0)
                                            (> min 1))
                                           "s" "")
                                       (length args))
                                      :format nil)
                                     (doom-cli-call
                                      (cons ':help
                                            (cons "--synopsis"
                                                  (cons "--postamble"
                                                        (cdr
                                                         (doom-cli--command context)))))
                                      context e)))))))))))))))
         5)
        (doom-cli-unrecognized-option-error
         (doom-print
          (doom-print--format
           (doom-print--style 'red "Error: unknown option %s")
           (car
            (cdr e)))
          :format nil)
         (doom-cli-call
          (cons ':help
                (cons "--synopsis"
                      (cons "--postamble"
                            (cdr
                             (doom-cli--command context)))))
          context e)
         5)
        (doom-cli-invalid-option-error
         (let*
             ((val
               (cdr e)))
           (progn
             (ignore
              (consp val))
             (let*
                 ((x23
                   (car-safe val))
                  (x24
                   (cdr-safe val)))
               (progn
                 (ignore
                  (consp x24))
                 (let*
                     ((x25
                       (car-safe x24))
                      (x26
                       (cdr-safe x24)))
                   (progn
                     (ignore
                      (consp x26))
                     (let*
                         ((x27
                           (car-safe x26))
                          (x28
                           (cdr-safe x26)))
                       (progn
                         (ignore
                          (consp x28))
                         (let*
                             ((x29
                               (car-safe x28))
                              (x30
                               (cdr-safe x28)))
                           (progn
                             (ignore
                              (null x30))
                             (let
                                 ((types x23)
                                  (option x25)
                                  (value x27)
                                  (errors x29))
                               (progn
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--style 'red "Error: %s received invalid value %S")
                                   (string-join
                                    (progn
                                      (or
                                       (progn
                                         (and
                                          (memq
                                           (type-of option)
                                           cl-struct-doom-cli-option-tags)
                                          t))
                                       (signal 'wrong-type-argument
                                               (list 'doom-cli-option option)))
                                      (aref option 5))
                                    "/")
                                   value)
                                  :format nil)
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--style 'bold "\nValidation errors:"))
                                  :format nil)
                                 (let
                                     ((--dolist-tail-- errors))
                                   (while --dolist-tail--
                                     (let
                                         ((err
                                           (car --dolist-tail--)))
                                       (doom-print
                                        (doom-print--format
                                         (doom-print--class 'item "%s."
                                                            (doom-print--class 'fill err)))
                                        :format nil)
                                       (setq --dolist-tail--
                                             (cdr --dolist-tail--)))))))))))))))))
         (doom-cli-call
          (cons ':help
                (cons "--postamble"
                      (cdr
                       (doom-cli--command context))))
          context e)
         5)
        (doom-cli-command-not-found-error
         (let*
             ((command
               (cdr e))
              (cli
               (doom-cli-get command)))
           (cond
            ((null cli)
             (doom-print
              (doom-print--format
               (doom-print--style 'red "Error: unrecognized command '%s'")
               (doom-cli-command-string
                (or
                 (cdr command)
                 command)))
              :format nil)
             (doom-cli-call
              (cons ':help
                    (cons "--similar"
                          (cons "--postamble"
                                (cdr command))))
              context e))
            ((null
              (progn
                (or
                 (progn
                   (and
                    (memq
                     (type-of cli)
                     cl-struct-doom-cli-tags)
                    t))
                 (signal 'wrong-type-argument
                         (list 'doom-cli cli)))
                (aref cli 9)))
             (doom-print
              (doom-print--format
               (doom-print--style 'red "Error: a subcommand is required"))
              :format nil)
             (doom-cli-call
              (cons ':help
                    (cons "--subcommands"
                          (cons "--postamble"
                                (cdr command))))
              context e))))
         4)
        (doom-cli-invalid-prefix-error
         (let
             ((prefix
               (car
                (cdr e))))
           (doom-print
            (doom-print--format
             (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
             prefix)
            :format nil)
           (let*
               ((suggested
                 (and t
                      (let*
                          ((--cl-var-- t)
                           --cl-var--)
                        (catch '--cl-block---cl-finish----
                          (maphash
                           #'(lambda
                               (--cl-var-- cli)
                               (or
                                (if
                                    (progn
                                      (or
                                       (progn
                                         (and
                                          (memq
                                           (type-of cli)
                                           cl-struct-doom-cli-tags)
                                          t))
                                       (signal 'wrong-type-argument
                                               (list 'doom-cli cli)))
                                      (aref cli 2))
                                    t
                                  (setq --cl-var--
                                        (car
                                         (progn
                                           (or
                                            (progn
                                              (and
                                               (memq
                                                (type-of cli)
                                                cl-struct-doom-cli-tags)
                                               t))
                                            (signal 'wrong-type-argument
                                                    (list 'doom-cli cli)))
                                           (aref cli 1)))
                                        --cl-var-- nil))
                                (throw '--cl-block---cl-finish---- nil)))
                           doom-cli--table))
                        --cl-var--))))
             (if suggested
                 (doom-print
                  (doom-print--format "Did you mean %S?" suggested)
                  :format nil)
               (doom-print
                (doom-print--format "There are no commands defined under %S." prefix)
                :format nil))))
         4)
        (user-error
         (doom-print
          (doom-print--format
           (doom-print--style 'red "Error: %s")
           (car
            (cdr e)))
          :format nil)
         (doom-print
          (doom-print--format "\nAborting...")
          :format nil)
         3))
      context)))
 nil)

;;;; 37
((unwind-protect
     (progn
       (fset #'message vnew)
       (progn
         (if
             (or init-file-debug noninteractive)
             (progn
               (let
                   ((inhibit-message t))
                 (message "%s"
                          (propertize
                           (doom-print--format
                            (format "* [%s] %s"
                                    (format "%.06f"
                                            (float-time
                                             (time-subtract
                                              (current-time)
                                              before-init-time)))
                                    "Starting!"))
                           'face 'font-lock-doc-face)))))
         (add-hook 'kill-emacs-hook show-benchmark-fn 94)
         (add-hook 'kill-emacs-hook write-logs-fn 95)
         (if
             (doom-cli-context-pipe-p context :out t)
             (progn
               (setq doom-print-backend nil)))
         (if
             (doom-cli-context-pipe-p context :in)
             (progn
               (save-current-buffer
                 (set-buffer
                  (progn
                    (or
                     (progn
                       (and
                        (memq
                         (type-of context)
                         cl-struct-doom-cli-context-tags)
                        t))
                     (signal 'wrong-type-argument
                             (list 'doom-cli-context context)))
                    (aref context 15)))
                 (while
                     (let*
                         ((in
                           (and t
                                (condition-case nil
                                    (progn
                                      (read-from-minibuffer ""))
                                  (error nil)))))
                       (if in
                           (insert in "\n")
                         (condition-case nil
                             (progn
                               (delete-char -1))
                           (error nil))))))))
         (if
             (or init-file-debug noninteractive)
             (progn
               (let
                   ((inhibit-message t))
                 (message "%s"
                          (propertize
                           (doom-print--format
                            (format "* [%s] %s"
                                    (format "%.06f"
                                            (float-time
                                             (time-subtract
                                              (current-time)
                                              before-init-time)))
                                    "doom-cli-run: %s")
                            command-line-args)
                           'face 'font-lock-doc-face)))))
         (doom-cli--exit
          (condition-case e
              (let*
                  ((args
                    (cons
                     (if
                         (getenv "__DOOMDUMP")
                         :dump prefix)
                     args))
                   (context
                    (doom-cli-context-restore
                     (getenv "__DOOMCONTEXT")
                     context))
                   (context
                    (doom-cli-context-parse args context)))
                (run-hook-with-args 'doom-cli-before-run-functions context)
                (let
                    ((result
                      (doom-cli-context-execute context)))
                  (run-hook-with-args 'doom-cli-after-run-functions context result))
                0)
            (doom-cli-wrong-number-of-arguments-error
             (let*
                 ((val
                   (cdr e)))
               (progn
                 (ignore
                  (consp val))
                 (let*
                     ((x13
                       (car-safe val))
                      (x14
                       (cdr-safe val)))
                   (progn
                     (ignore
                      (consp x14))
                     (let*
                         ((x15
                           (car-safe x14))
                          (x16
                           (cdr-safe x14)))
                       (progn
                         (ignore
                          (consp x16))
                         (let*
                             ((x17
                               (car-safe x16))
                              (x18
                               (cdr-safe x16)))
                           (progn
                             (ignore
                              (consp x18))
                             (let*
                                 ((x19
                                   (car-safe x18))
                                  (x20
                                   (cdr-safe x18)))
                               (progn
                                 (ignore
                                  (consp x20))
                                 (let*
                                     ((x21
                                       (car-safe x20))
                                      (x22
                                       (cdr-safe x20)))
                                   (progn
                                     (ignore
                                      (null x22))
                                     (let
                                         ((command x13)
                                          (flag x15)
                                          (args x17)
                                          (min x19)
                                          (max x21))
                                       (progn
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
                                           (or flag
                                               (doom-cli-command-string
                                                (if
                                                    (keywordp
                                                     (car command))
                                                    command
                                                  (cdr command))))
                                           (if
                                               (or
                                                (= min max)
                                                (= max most-positive-fixnum))
                                               min
                                             (format "%d-%d" min max))
                                           (if
                                               (or
                                                (= min 0)
                                                (> min 1))
                                               "s" "")
                                           (length args))
                                          :format nil)
                                         (doom-cli-call
                                          (cons ':help
                                                (cons "--synopsis"
                                                      (cons "--postamble"
                                                            (cdr
                                                             (doom-cli--command context)))))
                                          context e)))))))))))))))
             5)
            (doom-cli-unrecognized-option-error
             (doom-print
              (doom-print--format
               (doom-print--style 'red "Error: unknown option %s")
               (car
                (cdr e)))
              :format nil)
             (doom-cli-call
              (cons ':help
                    (cons "--synopsis"
                          (cons "--postamble"
                                (cdr
                                 (doom-cli--command context)))))
              context e)
             5)
            (doom-cli-invalid-option-error
             (let*
                 ((val
                   (cdr e)))
               (progn
                 (ignore
                  (consp val))
                 (let*
                     ((x23
                       (car-safe val))
                      (x24
                       (cdr-safe val)))
                   (progn
                     (ignore
                      (consp x24))
                     (let*
                         ((x25
                           (car-safe x24))
                          (x26
                           (cdr-safe x24)))
                       (progn
                         (ignore
                          (consp x26))
                         (let*
                             ((x27
                               (car-safe x26))
                              (x28
                               (cdr-safe x26)))
                           (progn
                             (ignore
                              (consp x28))
                             (let*
                                 ((x29
                                   (car-safe x28))
                                  (x30
                                   (cdr-safe x28)))
                               (progn
                                 (ignore
                                  (null x30))
                                 (let
                                     ((types x23)
                                      (option x25)
                                      (value x27)
                                      (errors x29))
                                   (progn
                                     (doom-print
                                      (doom-print--format
                                       (doom-print--style 'red "Error: %s received invalid value %S")
                                       (string-join
                                        (progn
                                          (or
                                           (progn
                                             (and
                                              (memq
                                               (type-of option)
                                               cl-struct-doom-cli-option-tags)
                                              t))
                                           (signal 'wrong-type-argument
                                                   (list 'doom-cli-option option)))
                                          (aref option 5))
                                        "/")
                                       value)
                                      :format nil)
                                     (doom-print
                                      (doom-print--format
                                       (doom-print--style 'bold "\nValidation errors:"))
                                      :format nil)
                                     (let
                                         ((--dolist-tail-- errors))
                                       (while --dolist-tail--
                                         (let
                                             ((err
                                               (car --dolist-tail--)))
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--class 'item "%s."
                                                                (doom-print--class 'fill err)))
                                            :format nil)
                                           (setq --dolist-tail--
                                                 (cdr --dolist-tail--)))))))))))))))))
             (doom-cli-call
              (cons ':help
                    (cons "--postamble"
                          (cdr
                           (doom-cli--command context))))
              context e)
             5)
            (doom-cli-command-not-found-error
             (let*
                 ((command
                   (cdr e))
                  (cli
                   (doom-cli-get command)))
               (cond
                ((null cli)
                 (doom-print
                  (doom-print--format
                   (doom-print--style 'red "Error: unrecognized command '%s'")
                   (doom-cli-command-string
                    (or
                     (cdr command)
                     command)))
                  :format nil)
                 (doom-cli-call
                  (cons ':help
                        (cons "--similar"
                              (cons "--postamble"
                                    (cdr command))))
                  context e))
                ((null
                  (progn
                    (or
                     (progn
                       (and
                        (memq
                         (type-of cli)
                         cl-struct-doom-cli-tags)
                        t))
                     (signal 'wrong-type-argument
                             (list 'doom-cli cli)))
                    (aref cli 9)))
                 (doom-print
                  (doom-print--format
                   (doom-print--style 'red "Error: a subcommand is required"))
                  :format nil)
                 (doom-cli-call
                  (cons ':help
                        (cons "--subcommands"
                              (cons "--postamble"
                                    (cdr command))))
                  context e))))
             4)
            (doom-cli-invalid-prefix-error
             (let
                 ((prefix
                   (car
                    (cdr e))))
               (doom-print
                (doom-print--format
                 (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
                 prefix)
                :format nil)
               (let*
                   ((suggested
                     (and t
                          (let*
                              ((--cl-var-- t)
                               --cl-var--)
                            (catch '--cl-block---cl-finish----
                              (maphash
                               #'(lambda
                                   (--cl-var-- cli)
                                   (or
                                    (if
                                        (progn
                                          (or
                                           (progn
                                             (and
                                              (memq
                                               (type-of cli)
                                               cl-struct-doom-cli-tags)
                                              t))
                                           (signal 'wrong-type-argument
                                                   (list 'doom-cli cli)))
                                          (aref cli 2))
                                        t
                                      (setq --cl-var--
                                            (car
                                             (progn
                                               (or
                                                (progn
                                                  (and
                                                   (memq
                                                    (type-of cli)
                                                    cl-struct-doom-cli-tags)
                                                   t))
                                                (signal 'wrong-type-argument
                                                        (list 'doom-cli cli)))
                                               (aref cli 1)))
                                            --cl-var-- nil))
                                    (throw '--cl-block---cl-finish---- nil)))
                               doom-cli--table))
                            --cl-var--))))
                 (if suggested
                     (doom-print
                      (doom-print--format "Did you mean %S?" suggested)
                      :format nil)
                   (doom-print
                    (doom-print--format "There are no commands defined under %S." prefix)
                    :format nil))))
             4)
            (user-error
             (doom-print
              (doom-print--format
               (doom-print--style 'red "Error: %s")
               (car
                (cdr e)))
              :format nil)
             (doom-print
              (doom-print--format "\nAborting...")
              :format nil)
             3))
          context)))
   (fset #'message old))
 nil)

;;;; 38
((let*
     ((vnew
       (doom-partial #'doom-cli--redirect-output-a context))
      (old
       (symbol-function #'message)))
   (unwind-protect
       (progn
         (fset #'message vnew)
         (progn
           (if
               (or init-file-debug noninteractive)
               (progn
                 (let
                     ((inhibit-message t))
                   (message "%s"
                            (propertize
                             (doom-print--format
                              (format "* [%s] %s"
                                      (format "%.06f"
                                              (float-time
                                               (time-subtract
                                                (current-time)
                                                before-init-time)))
                                      "Starting!"))
                             'face 'font-lock-doc-face)))))
           (add-hook 'kill-emacs-hook show-benchmark-fn 94)
           (add-hook 'kill-emacs-hook write-logs-fn 95)
           (if
               (doom-cli-context-pipe-p context :out t)
               (progn
                 (setq doom-print-backend nil)))
           (if
               (doom-cli-context-pipe-p context :in)
               (progn
                 (save-current-buffer
                   (set-buffer
                    (progn
                      (or
                       (progn
                         (and
                          (memq
                           (type-of context)
                           cl-struct-doom-cli-context-tags)
                          t))
                       (signal 'wrong-type-argument
                               (list 'doom-cli-context context)))
                      (aref context 15)))
                   (while
                       (let*
                           ((in
                             (and t
                                  (condition-case nil
                                      (progn
                                        (read-from-minibuffer ""))
                                    (error nil)))))
                         (if in
                             (insert in "\n")
                           (condition-case nil
                               (progn
                                 (delete-char -1))
                             (error nil))))))))
           (if
               (or init-file-debug noninteractive)
               (progn
                 (let
                     ((inhibit-message t))
                   (message "%s"
                            (propertize
                             (doom-print--format
                              (format "* [%s] %s"
                                      (format "%.06f"
                                              (float-time
                                               (time-subtract
                                                (current-time)
                                                before-init-time)))
                                      "doom-cli-run: %s")
                              command-line-args)
                             'face 'font-lock-doc-face)))))
           (doom-cli--exit
            (condition-case e
                (let*
                    ((args
                      (cons
                       (if
                           (getenv "__DOOMDUMP")
                           :dump prefix)
                       args))
                     (context
                      (doom-cli-context-restore
                       (getenv "__DOOMCONTEXT")
                       context))
                     (context
                      (doom-cli-context-parse args context)))
                  (run-hook-with-args 'doom-cli-before-run-functions context)
                  (let
                      ((result
                        (doom-cli-context-execute context)))
                    (run-hook-with-args 'doom-cli-after-run-functions context result))
                  0)
              (doom-cli-wrong-number-of-arguments-error
               (let*
                   ((val
                     (cdr e)))
                 (progn
                   (ignore
                    (consp val))
                   (let*
                       ((x13
                         (car-safe val))
                        (x14
                         (cdr-safe val)))
                     (progn
                       (ignore
                        (consp x14))
                       (let*
                           ((x15
                             (car-safe x14))
                            (x16
                             (cdr-safe x14)))
                         (progn
                           (ignore
                            (consp x16))
                           (let*
                               ((x17
                                 (car-safe x16))
                                (x18
                                 (cdr-safe x16)))
                             (progn
                               (ignore
                                (consp x18))
                               (let*
                                   ((x19
                                     (car-safe x18))
                                    (x20
                                     (cdr-safe x18)))
                                 (progn
                                   (ignore
                                    (consp x20))
                                   (let*
                                       ((x21
                                         (car-safe x20))
                                        (x22
                                         (cdr-safe x20)))
                                     (progn
                                       (ignore
                                        (null x22))
                                       (let
                                           ((command x13)
                                            (flag x15)
                                            (args x17)
                                            (min x19)
                                            (max x21))
                                         (progn
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
                                             (or flag
                                                 (doom-cli-command-string
                                                  (if
                                                      (keywordp
                                                       (car command))
                                                      command
                                                    (cdr command))))
                                             (if
                                                 (or
                                                  (= min max)
                                                  (= max most-positive-fixnum))
                                                 min
                                               (format "%d-%d" min max))
                                             (if
                                                 (or
                                                  (= min 0)
                                                  (> min 1))
                                                 "s" "")
                                             (length args))
                                            :format nil)
                                           (doom-cli-call
                                            (cons ':help
                                                  (cons "--synopsis"
                                                        (cons "--postamble"
                                                              (cdr
                                                               (doom-cli--command context)))))
                                            context e)))))))))))))))
               5)
              (doom-cli-unrecognized-option-error
               (doom-print
                (doom-print--format
                 (doom-print--style 'red "Error: unknown option %s")
                 (car
                  (cdr e)))
                :format nil)
               (doom-cli-call
                (cons ':help
                      (cons "--synopsis"
                            (cons "--postamble"
                                  (cdr
                                   (doom-cli--command context)))))
                context e)
               5)
              (doom-cli-invalid-option-error
               (let*
                   ((val
                     (cdr e)))
                 (progn
                   (ignore
                    (consp val))
                   (let*
                       ((x23
                         (car-safe val))
                        (x24
                         (cdr-safe val)))
                     (progn
                       (ignore
                        (consp x24))
                       (let*
                           ((x25
                             (car-safe x24))
                            (x26
                             (cdr-safe x24)))
                         (progn
                           (ignore
                            (consp x26))
                           (let*
                               ((x27
                                 (car-safe x26))
                                (x28
                                 (cdr-safe x26)))
                             (progn
                               (ignore
                                (consp x28))
                               (let*
                                   ((x29
                                     (car-safe x28))
                                    (x30
                                     (cdr-safe x28)))
                                 (progn
                                   (ignore
                                    (null x30))
                                   (let
                                       ((types x23)
                                        (option x25)
                                        (value x27)
                                        (errors x29))
                                     (progn
                                       (doom-print
                                        (doom-print--format
                                         (doom-print--style 'red "Error: %s received invalid value %S")
                                         (string-join
                                          (progn
                                            (or
                                             (progn
                                               (and
                                                (memq
                                                 (type-of option)
                                                 cl-struct-doom-cli-option-tags)
                                                t))
                                             (signal 'wrong-type-argument
                                                     (list 'doom-cli-option option)))
                                            (aref option 5))
                                          "/")
                                         value)
                                        :format nil)
                                       (doom-print
                                        (doom-print--format
                                         (doom-print--style 'bold "\nValidation errors:"))
                                        :format nil)
                                       (let
                                           ((--dolist-tail-- errors))
                                         (while --dolist-tail--
                                           (let
                                               ((err
                                                 (car --dolist-tail--)))
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--class 'item "%s."
                                                                  (doom-print--class 'fill err)))
                                              :format nil)
                                             (setq --dolist-tail--
                                                   (cdr --dolist-tail--)))))))))))))))))
               (doom-cli-call
                (cons ':help
                      (cons "--postamble"
                            (cdr
                             (doom-cli--command context))))
                context e)
               5)
              (doom-cli-command-not-found-error
               (let*
                   ((command
                     (cdr e))
                    (cli
                     (doom-cli-get command)))
                 (cond
                  ((null cli)
                   (doom-print
                    (doom-print--format
                     (doom-print--style 'red "Error: unrecognized command '%s'")
                     (doom-cli-command-string
                      (or
                       (cdr command)
                       command)))
                    :format nil)
                   (doom-cli-call
                    (cons ':help
                          (cons "--similar"
                                (cons "--postamble"
                                      (cdr command))))
                    context e))
                  ((null
                    (progn
                      (or
                       (progn
                         (and
                          (memq
                           (type-of cli)
                           cl-struct-doom-cli-tags)
                          t))
                       (signal 'wrong-type-argument
                               (list 'doom-cli cli)))
                      (aref cli 9)))
                   (doom-print
                    (doom-print--format
                     (doom-print--style 'red "Error: a subcommand is required"))
                    :format nil)
                   (doom-cli-call
                    (cons ':help
                          (cons "--subcommands"
                                (cons "--postamble"
                                      (cdr command))))
                    context e))))
               4)
              (doom-cli-invalid-prefix-error
               (let
                   ((prefix
                     (car
                      (cdr e))))
                 (doom-print
                  (doom-print--format
                   (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
                   prefix)
                  :format nil)
                 (let*
                     ((suggested
                       (and t
                            (let*
                                ((--cl-var-- t)
                                 --cl-var--)
                              (catch '--cl-block---cl-finish----
                                (maphash
                                 #'(lambda
                                     (--cl-var-- cli)
                                     (or
                                      (if
                                          (progn
                                            (or
                                             (progn
                                               (and
                                                (memq
                                                 (type-of cli)
                                                 cl-struct-doom-cli-tags)
                                                t))
                                             (signal 'wrong-type-argument
                                                     (list 'doom-cli cli)))
                                            (aref cli 2))
                                          t
                                        (setq --cl-var--
                                              (car
                                               (progn
                                                 (or
                                                  (progn
                                                    (and
                                                     (memq
                                                      (type-of cli)
                                                      cl-struct-doom-cli-tags)
                                                     t))
                                                  (signal 'wrong-type-argument
                                                          (list 'doom-cli cli)))
                                                 (aref cli 1)))
                                              --cl-var-- nil))
                                      (throw '--cl-block---cl-finish---- nil)))
                                 doom-cli--table))
                              --cl-var--))))
                   (if suggested
                       (doom-print
                        (doom-print--format "Did you mean %S?" suggested)
                        :format nil)
                     (doom-print
                      (doom-print--format "There are no commands defined under %S." prefix)
                      :format nil))))
               4)
              (user-error
               (doom-print
                (doom-print--format
                 (doom-print--style 'red "Error: %s")
                 (car
                  (cdr e)))
                :format nil)
               (doom-print
                (doom-print--format "\nAborting...")
                :format nil)
               3))
            context)))
     (fset #'message old)))
 ((prefix . "doom")
  (args
   ("doctor"))
  (args "doctor")
  (context . #s(doom-cli-context
                (25359 42750 192253 0)
                13992 -1 nil nil nil "doom" nil nil
                ("doom" "doctor")
                nil
                ("doctor")
                (("--eval")
                 ("-E")
                 ("--strict-load")
                 ("--load")
                 ("-L")
                 ("--color")
                 ("--profile")
                 ("--pager")
                 ("--emacsdir")
                 ("--doomdir")
                 ("--debug")
                 ("-D")
                 ("--force")
                 ("-!"))
                ((t)
                 (("doom" "doctor"))
                 (("doom")
                  "doctor"))
                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (write-logs-fn .
                 #[128 "\302\300\303\301\4\"\"\207"
                       [doom-cli--output-write-logs-h
                        (#s(doom-cli-context
                            (25359 42750 192253 0)
                            13992 -1 nil nil nil "doom" nil nil
                            ("doom" "doctor")
                            nil
                            ("doctor")
                            (("--eval")
                             ("-E")
                             ("--strict-load")
                             ("--load")
                             ("-L")
                             ("--color")
                             ("--profile")
                             ("--pager")
                             ("--emacsdir")
                             ("--doomdir")
                             ("--debug")
                             ("-D")
                             ("--force")
                             ("-!"))
                            ((t)
                             (("doom" "doctor"))
                             (("doom")
                              "doctor"))
                            #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
                        apply append]
                       6 "\n\n(fn &rest ARGS2)"])
  (show-benchmark-fn .
                     #[128 "\302\300\303\301\4\"\"\207"
                           [doom-cli--output-benchmark-h
                            (#s(doom-cli-context
                                (25359 42750 192253 0)
                                13992 -1 nil nil nil "doom" nil nil
                                ("doom" "doctor")
                                nil
                                ("doctor")
                                (("--eval")
                                 ("-E")
                                 ("--strict-load")
                                 ("--load")
                                 ("-L")
                                 ("--color")
                                 ("--profile")
                                 ("--pager")
                                 ("--emacsdir")
                                 ("--doomdir")
                                 ("--debug")
                                 ("-D")
                                 ("--force")
                                 ("-!"))
                                ((t)
                                 (("doom" "doctor"))
                                 (("doom")
                                  "doctor"))
                                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
                            apply append]
                           6 "\n\n(fn &rest ARGS2)"])
  (vnew .
        #[128 "\302\300\303\301\4\"\"\207"
              [doom-cli--redirect-output-a
               (#s(doom-cli-context
                   (25359 42750 192253 0)
                   13992 -1 nil nil nil "doom" nil nil
                   ("doom" "doctor")
                   nil
                   ("doctor")
                   (("--eval")
                    ("-E")
                    ("--strict-load")
                    ("--load")
                    ("-L")
                    ("--color")
                    ("--profile")
                    ("--pager")
                    ("--emacsdir")
                    ("--doomdir")
                    ("--debug")
                    ("-D")
                    ("--force")
                    ("-!"))
                   ((t)
                    (("doom" "doctor"))
                    (("doom")
                     "doctor"))
                   #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
               apply append]
              6 "\n\n(fn &rest ARGS2)"])
  (old . #<subr message>)))

;;;; 39
((let
     ((standard-output
       (doom-rpartial #'doom-cli--output context)))
   (let*
       ((vnew
         (doom-partial #'doom-cli--redirect-output-a context))
        (old
         (symbol-function #'message)))
     (unwind-protect
         (progn
           (fset #'message vnew)
           (progn
             (if
                 (or init-file-debug noninteractive)
                 (progn
                   (let
                       ((inhibit-message t))
                     (message "%s"
                              (propertize
                               (doom-print--format
                                (format "* [%s] %s"
                                        (format "%.06f"
                                                (float-time
                                                 (time-subtract
                                                  (current-time)
                                                  before-init-time)))
                                        "Starting!"))
                               'face 'font-lock-doc-face)))))
             (add-hook 'kill-emacs-hook show-benchmark-fn 94)
             (add-hook 'kill-emacs-hook write-logs-fn 95)
             (if
                 (doom-cli-context-pipe-p context :out t)
                 (progn
                   (setq doom-print-backend nil)))
             (if
                 (doom-cli-context-pipe-p context :in)
                 (progn
                   (save-current-buffer
                     (set-buffer
                      (progn
                        (or
                         (progn
                           (and
                            (memq
                             (type-of context)
                             cl-struct-doom-cli-context-tags)
                            t))
                         (signal 'wrong-type-argument
                                 (list 'doom-cli-context context)))
                        (aref context 15)))
                     (while
                         (let*
                             ((in
                               (and t
                                    (condition-case nil
                                        (progn
                                          (read-from-minibuffer ""))
                                      (error nil)))))
                           (if in
                               (insert in "\n")
                             (condition-case nil
                                 (progn
                                   (delete-char -1))
                               (error nil))))))))
             (if
                 (or init-file-debug noninteractive)
                 (progn
                   (let
                       ((inhibit-message t))
                     (message "%s"
                              (propertize
                               (doom-print--format
                                (format "* [%s] %s"
                                        (format "%.06f"
                                                (float-time
                                                 (time-subtract
                                                  (current-time)
                                                  before-init-time)))
                                        "doom-cli-run: %s")
                                command-line-args)
                               'face 'font-lock-doc-face)))))
             (doom-cli--exit
              (condition-case e
                  (let*
                      ((args
                        (cons
                         (if
                             (getenv "__DOOMDUMP")
                             :dump prefix)
                         args))
                       (context
                        (doom-cli-context-restore
                         (getenv "__DOOMCONTEXT")
                         context))
                       (context
                        (doom-cli-context-parse args context)))
                    (run-hook-with-args 'doom-cli-before-run-functions context)
                    (let
                        ((result
                          (doom-cli-context-execute context)))
                      (run-hook-with-args 'doom-cli-after-run-functions context result))
                    0)
                (doom-cli-wrong-number-of-arguments-error
                 (let*
                     ((val
                       (cdr e)))
                   (progn
                     (ignore
                      (consp val))
                     (let*
                         ((x13
                           (car-safe val))
                          (x14
                           (cdr-safe val)))
                       (progn
                         (ignore
                          (consp x14))
                         (let*
                             ((x15
                               (car-safe x14))
                              (x16
                               (cdr-safe x14)))
                           (progn
                             (ignore
                              (consp x16))
                             (let*
                                 ((x17
                                   (car-safe x16))
                                  (x18
                                   (cdr-safe x16)))
                               (progn
                                 (ignore
                                  (consp x18))
                                 (let*
                                     ((x19
                                       (car-safe x18))
                                      (x20
                                       (cdr-safe x18)))
                                   (progn
                                     (ignore
                                      (consp x20))
                                     (let*
                                         ((x21
                                           (car-safe x20))
                                          (x22
                                           (cdr-safe x20)))
                                       (progn
                                         (ignore
                                          (null x22))
                                         (let
                                             ((command x13)
                                              (flag x15)
                                              (args x17)
                                              (min x19)
                                              (max x21))
                                           (progn
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
                                               (or flag
                                                   (doom-cli-command-string
                                                    (if
                                                        (keywordp
                                                         (car command))
                                                        command
                                                      (cdr command))))
                                               (if
                                                   (or
                                                    (= min max)
                                                    (= max most-positive-fixnum))
                                                   min
                                                 (format "%d-%d" min max))
                                               (if
                                                   (or
                                                    (= min 0)
                                                    (> min 1))
                                                   "s" "")
                                               (length args))
                                              :format nil)
                                             (doom-cli-call
                                              (cons ':help
                                                    (cons "--synopsis"
                                                          (cons "--postamble"
                                                                (cdr
                                                                 (doom-cli--command context)))))
                                              context e)))))))))))))))
                 5)
                (doom-cli-unrecognized-option-error
                 (doom-print
                  (doom-print--format
                   (doom-print--style 'red "Error: unknown option %s")
                   (car
                    (cdr e)))
                  :format nil)
                 (doom-cli-call
                  (cons ':help
                        (cons "--synopsis"
                              (cons "--postamble"
                                    (cdr
                                     (doom-cli--command context)))))
                  context e)
                 5)
                (doom-cli-invalid-option-error
                 (let*
                     ((val
                       (cdr e)))
                   (progn
                     (ignore
                      (consp val))
                     (let*
                         ((x23
                           (car-safe val))
                          (x24
                           (cdr-safe val)))
                       (progn
                         (ignore
                          (consp x24))
                         (let*
                             ((x25
                               (car-safe x24))
                              (x26
                               (cdr-safe x24)))
                           (progn
                             (ignore
                              (consp x26))
                             (let*
                                 ((x27
                                   (car-safe x26))
                                  (x28
                                   (cdr-safe x26)))
                               (progn
                                 (ignore
                                  (consp x28))
                                 (let*
                                     ((x29
                                       (car-safe x28))
                                      (x30
                                       (cdr-safe x28)))
                                   (progn
                                     (ignore
                                      (null x30))
                                     (let
                                         ((types x23)
                                          (option x25)
                                          (value x27)
                                          (errors x29))
                                       (progn
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--style 'red "Error: %s received invalid value %S")
                                           (string-join
                                            (progn
                                              (or
                                               (progn
                                                 (and
                                                  (memq
                                                   (type-of option)
                                                   cl-struct-doom-cli-option-tags)
                                                  t))
                                               (signal 'wrong-type-argument
                                                       (list 'doom-cli-option option)))
                                              (aref option 5))
                                            "/")
                                           value)
                                          :format nil)
                                         (doom-print
                                          (doom-print--format
                                           (doom-print--style 'bold "\nValidation errors:"))
                                          :format nil)
                                         (let
                                             ((--dolist-tail-- errors))
                                           (while --dolist-tail--
                                             (let
                                                 ((err
                                                   (car --dolist-tail--)))
                                               (doom-print
                                                (doom-print--format
                                                 (doom-print--class 'item "%s."
                                                                    (doom-print--class 'fill err)))
                                                :format nil)
                                               (setq --dolist-tail--
                                                     (cdr --dolist-tail--)))))))))))))))))
                 (doom-cli-call
                  (cons ':help
                        (cons "--postamble"
                              (cdr
                               (doom-cli--command context))))
                  context e)
                 5)
                (doom-cli-command-not-found-error
                 (let*
                     ((command
                       (cdr e))
                      (cli
                       (doom-cli-get command)))
                   (cond
                    ((null cli)
                     (doom-print
                      (doom-print--format
                       (doom-print--style 'red "Error: unrecognized command '%s'")
                       (doom-cli-command-string
                        (or
                         (cdr command)
                         command)))
                      :format nil)
                     (doom-cli-call
                      (cons ':help
                            (cons "--similar"
                                  (cons "--postamble"
                                        (cdr command))))
                      context e))
                    ((null
                      (progn
                        (or
                         (progn
                           (and
                            (memq
                             (type-of cli)
                             cl-struct-doom-cli-tags)
                            t))
                         (signal 'wrong-type-argument
                                 (list 'doom-cli cli)))
                        (aref cli 9)))
                     (doom-print
                      (doom-print--format
                       (doom-print--style 'red "Error: a subcommand is required"))
                      :format nil)
                     (doom-cli-call
                      (cons ':help
                            (cons "--subcommands"
                                  (cons "--postamble"
                                        (cdr command))))
                      context e))))
                 4)
                (doom-cli-invalid-prefix-error
                 (let
                     ((prefix
                       (car
                        (cdr e))))
                   (doom-print
                    (doom-print--format
                     (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
                     prefix)
                    :format nil)
                   (let*
                       ((suggested
                         (and t
                              (let*
                                  ((--cl-var-- t)
                                   --cl-var--)
                                (catch '--cl-block---cl-finish----
                                  (maphash
                                   #'(lambda
                                       (--cl-var-- cli)
                                       (or
                                        (if
                                            (progn
                                              (or
                                               (progn
                                                 (and
                                                  (memq
                                                   (type-of cli)
                                                   cl-struct-doom-cli-tags)
                                                  t))
                                               (signal 'wrong-type-argument
                                                       (list 'doom-cli cli)))
                                              (aref cli 2))
                                            t
                                          (setq --cl-var--
                                                (car
                                                 (progn
                                                   (or
                                                    (progn
                                                      (and
                                                       (memq
                                                        (type-of cli)
                                                        cl-struct-doom-cli-tags)
                                                       t))
                                                    (signal 'wrong-type-argument
                                                            (list 'doom-cli cli)))
                                                   (aref cli 1)))
                                                --cl-var-- nil))
                                        (throw '--cl-block---cl-finish---- nil)))
                                   doom-cli--table))
                                --cl-var--))))
                     (if suggested
                         (doom-print
                          (doom-print--format "Did you mean %S?" suggested)
                          :format nil)
                       (doom-print
                        (doom-print--format "There are no commands defined under %S." prefix)
                        :format nil))))
                 4)
                (user-error
                 (doom-print
                  (doom-print--format
                   (doom-print--style 'red "Error: %s")
                   (car
                    (cdr e)))
                  :format nil)
                 (doom-print
                  (doom-print--format "\nAborting...")
                  :format nil)
                 3))
              context)))
       (fset #'message old))))
 ((standard-output closure
                   ((args #s(doom-cli-context
                             (25359 42750 192253 0)
                             13992 -1 nil nil nil "doom" nil nil
                             ("doom" "doctor")
                             nil
                             ("doctor")
                             (("--eval")
                              ("-E")
                              ("--strict-load")
                              ("--load")
                              ("-L")
                              ("--color")
                              ("--profile")
                              ("--pager")
                              ("--emacsdir")
                              ("--doomdir")
                              ("--debug")
                              ("-D")
                              ("--force")
                              ("-!"))
                             ((t)
                              (("doom" "doctor"))
                              (("doom")
                               "doctor"))
                             #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
                    (fn . doom-cli--output)
                    t)
                   (&rest pre-args)
                   (apply fn
                          (append pre-args args)))))

;;;; 40
((let
     ((debug-on-error t))
   (let
       ((standard-output
         (doom-rpartial #'doom-cli--output context)))
     (let*
         ((vnew
           (doom-partial #'doom-cli--redirect-output-a context))
          (old
           (symbol-function #'message)))
       (unwind-protect
           (progn
             (fset #'message vnew)
             (progn
               (if
                   (or init-file-debug noninteractive)
                   (progn
                     (let
                         ((inhibit-message t))
                       (message "%s"
                                (propertize
                                 (doom-print--format
                                  (format "* [%s] %s"
                                          (format "%.06f"
                                                  (float-time
                                                   (time-subtract
                                                    (current-time)
                                                    before-init-time)))
                                          "Starting!"))
                                 'face 'font-lock-doc-face)))))
               (add-hook 'kill-emacs-hook show-benchmark-fn 94)
               (add-hook 'kill-emacs-hook write-logs-fn 95)
               (if
                   (doom-cli-context-pipe-p context :out t)
                   (progn
                     (setq doom-print-backend nil)))
               (if
                   (doom-cli-context-pipe-p context :in)
                   (progn
                     (save-current-buffer
                       (set-buffer
                        (progn
                          (or
                           (progn
                             (and
                              (memq
                               (type-of context)
                               cl-struct-doom-cli-context-tags)
                              t))
                           (signal 'wrong-type-argument
                                   (list 'doom-cli-context context)))
                          (aref context 15)))
                       (while
                           (let*
                               ((in
                                 (and t
                                      (condition-case nil
                                          (progn
                                            (read-from-minibuffer ""))
                                        (error nil)))))
                             (if in
                                 (insert in "\n")
                               (condition-case nil
                                   (progn
                                     (delete-char -1))
                                 (error nil))))))))
               (if
                   (or init-file-debug noninteractive)
                   (progn
                     (let
                         ((inhibit-message t))
                       (message "%s"
                                (propertize
                                 (doom-print--format
                                  (format "* [%s] %s"
                                          (format "%.06f"
                                                  (float-time
                                                   (time-subtract
                                                    (current-time)
                                                    before-init-time)))
                                          "doom-cli-run: %s")
                                  command-line-args)
                                 'face 'font-lock-doc-face)))))
               (doom-cli--exit
                (condition-case e
                    (let*
                        ((args
                          (cons
                           (if
                               (getenv "__DOOMDUMP")
                               :dump prefix)
                           args))
                         (context
                          (doom-cli-context-restore
                           (getenv "__DOOMCONTEXT")
                           context))
                         (context
                          (doom-cli-context-parse args context)))
                      (run-hook-with-args 'doom-cli-before-run-functions context)
                      (let
                          ((result
                            (doom-cli-context-execute context)))
                        (run-hook-with-args 'doom-cli-after-run-functions context result))
                      0)
                  (doom-cli-wrong-number-of-arguments-error
                   (let*
                       ((val
                         (cdr e)))
                     (progn
                       (ignore
                        (consp val))
                       (let*
                           ((x13
                             (car-safe val))
                            (x14
                             (cdr-safe val)))
                         (progn
                           (ignore
                            (consp x14))
                           (let*
                               ((x15
                                 (car-safe x14))
                                (x16
                                 (cdr-safe x14)))
                             (progn
                               (ignore
                                (consp x16))
                               (let*
                                   ((x17
                                     (car-safe x16))
                                    (x18
                                     (cdr-safe x16)))
                                 (progn
                                   (ignore
                                    (consp x18))
                                   (let*
                                       ((x19
                                         (car-safe x18))
                                        (x20
                                         (cdr-safe x18)))
                                     (progn
                                       (ignore
                                        (consp x20))
                                       (let*
                                           ((x21
                                             (car-safe x20))
                                            (x22
                                             (cdr-safe x20)))
                                         (progn
                                           (ignore
                                            (null x22))
                                           (let
                                               ((command x13)
                                                (flag x15)
                                                (args x17)
                                                (min x19)
                                                (max x21))
                                             (progn
                                               (doom-print
                                                (doom-print--format
                                                 (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
                                                 (or flag
                                                     (doom-cli-command-string
                                                      (if
                                                          (keywordp
                                                           (car command))
                                                          command
                                                        (cdr command))))
                                                 (if
                                                     (or
                                                      (= min max)
                                                      (= max most-positive-fixnum))
                                                     min
                                                   (format "%d-%d" min max))
                                                 (if
                                                     (or
                                                      (= min 0)
                                                      (> min 1))
                                                     "s" "")
                                                 (length args))
                                                :format nil)
                                               (doom-cli-call
                                                (cons ':help
                                                      (cons "--synopsis"
                                                            (cons "--postamble"
                                                                  (cdr
                                                                   (doom-cli--command context)))))
                                                context e)))))))))))))))
                   5)
                  (doom-cli-unrecognized-option-error
                   (doom-print
                    (doom-print--format
                     (doom-print--style 'red "Error: unknown option %s")
                     (car
                      (cdr e)))
                    :format nil)
                   (doom-cli-call
                    (cons ':help
                          (cons "--synopsis"
                                (cons "--postamble"
                                      (cdr
                                       (doom-cli--command context)))))
                    context e)
                   5)
                  (doom-cli-invalid-option-error
                   (let*
                       ((val
                         (cdr e)))
                     (progn
                       (ignore
                        (consp val))
                       (let*
                           ((x23
                             (car-safe val))
                            (x24
                             (cdr-safe val)))
                         (progn
                           (ignore
                            (consp x24))
                           (let*
                               ((x25
                                 (car-safe x24))
                                (x26
                                 (cdr-safe x24)))
                             (progn
                               (ignore
                                (consp x26))
                               (let*
                                   ((x27
                                     (car-safe x26))
                                    (x28
                                     (cdr-safe x26)))
                                 (progn
                                   (ignore
                                    (consp x28))
                                   (let*
                                       ((x29
                                         (car-safe x28))
                                        (x30
                                         (cdr-safe x28)))
                                     (progn
                                       (ignore
                                        (null x30))
                                       (let
                                           ((types x23)
                                            (option x25)
                                            (value x27)
                                            (errors x29))
                                         (progn
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--style 'red "Error: %s received invalid value %S")
                                             (string-join
                                              (progn
                                                (or
                                                 (progn
                                                   (and
                                                    (memq
                                                     (type-of option)
                                                     cl-struct-doom-cli-option-tags)
                                                    t))
                                                 (signal 'wrong-type-argument
                                                         (list 'doom-cli-option option)))
                                                (aref option 5))
                                              "/")
                                             value)
                                            :format nil)
                                           (doom-print
                                            (doom-print--format
                                             (doom-print--style 'bold "\nValidation errors:"))
                                            :format nil)
                                           (let
                                               ((--dolist-tail-- errors))
                                             (while --dolist-tail--
                                               (let
                                                   ((err
                                                     (car --dolist-tail--)))
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--class 'item "%s."
                                                                      (doom-print--class 'fill err)))
                                                  :format nil)
                                                 (setq --dolist-tail--
                                                       (cdr --dolist-tail--)))))))))))))))))
                   (doom-cli-call
                    (cons ':help
                          (cons "--postamble"
                                (cdr
                                 (doom-cli--command context))))
                    context e)
                   5)
                  (doom-cli-command-not-found-error
                   (let*
                       ((command
                         (cdr e))
                        (cli
                         (doom-cli-get command)))
                     (cond
                      ((null cli)
                       (doom-print
                        (doom-print--format
                         (doom-print--style 'red "Error: unrecognized command '%s'")
                         (doom-cli-command-string
                          (or
                           (cdr command)
                           command)))
                        :format nil)
                       (doom-cli-call
                        (cons ':help
                              (cons "--similar"
                                    (cons "--postamble"
                                          (cdr command))))
                        context e))
                      ((null
                        (progn
                          (or
                           (progn
                             (and
                              (memq
                               (type-of cli)
                               cl-struct-doom-cli-tags)
                              t))
                           (signal 'wrong-type-argument
                                   (list 'doom-cli cli)))
                          (aref cli 9)))
                       (doom-print
                        (doom-print--format
                         (doom-print--style 'red "Error: a subcommand is required"))
                        :format nil)
                       (doom-cli-call
                        (cons ':help
                              (cons "--subcommands"
                                    (cons "--postamble"
                                          (cdr command))))
                        context e))))
                   4)
                  (doom-cli-invalid-prefix-error
                   (let
                       ((prefix
                         (car
                          (cdr e))))
                     (doom-print
                      (doom-print--format
                       (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
                       prefix)
                      :format nil)
                     (let*
                         ((suggested
                           (and t
                                (let*
                                    ((--cl-var-- t)
                                     --cl-var--)
                                  (catch '--cl-block---cl-finish----
                                    (maphash
                                     #'(lambda
                                         (--cl-var-- cli)
                                         (or
                                          (if
                                              (progn
                                                (or
                                                 (progn
                                                   (and
                                                    (memq
                                                     (type-of cli)
                                                     cl-struct-doom-cli-tags)
                                                    t))
                                                 (signal 'wrong-type-argument
                                                         (list 'doom-cli cli)))
                                                (aref cli 2))
                                              t
                                            (setq --cl-var--
                                                  (car
                                                   (progn
                                                     (or
                                                      (progn
                                                        (and
                                                         (memq
                                                          (type-of cli)
                                                          cl-struct-doom-cli-tags)
                                                         t))
                                                      (signal 'wrong-type-argument
                                                              (list 'doom-cli cli)))
                                                     (aref cli 1)))
                                                  --cl-var-- nil))
                                          (throw '--cl-block---cl-finish---- nil)))
                                     doom-cli--table))
                                  --cl-var--))))
                       (if suggested
                           (doom-print
                            (doom-print--format "Did you mean %S?" suggested)
                            :format nil)
                         (doom-print
                          (doom-print--format "There are no commands defined under %S." prefix)
                          :format nil))))
                   4)
                  (user-error
                   (doom-print
                    (doom-print--format
                     (doom-print--style 'red "Error: %s")
                     (car
                      (cdr e)))
                    :format nil)
                   (doom-print
                    (doom-print--format "\nAborting...")
                    :format nil)
                   3))
                context)))
         (fset #'message old)))))
 ((debug-on-error . t)))

;;;; 41
((let
     ((debugger
       (doom-rpartial #'doom-cli-debugger context)))
   (let
       ((debug-on-error t))
     (let
         ((standard-output
           (doom-rpartial #'doom-cli--output context)))
       (let*
           ((vnew
             (doom-partial #'doom-cli--redirect-output-a context))
            (old
             (symbol-function #'message)))
         (unwind-protect
             (progn
               (fset #'message vnew)
               (progn
                 (if
                     (or init-file-debug noninteractive)
                     (progn
                       (let
                           ((inhibit-message t))
                         (message "%s"
                                  (propertize
                                   (doom-print--format
                                    (format "* [%s] %s"
                                            (format "%.06f"
                                                    (float-time
                                                     (time-subtract
                                                      (current-time)
                                                      before-init-time)))
                                            "Starting!"))
                                   'face 'font-lock-doc-face)))))
                 (add-hook 'kill-emacs-hook show-benchmark-fn 94)
                 (add-hook 'kill-emacs-hook write-logs-fn 95)
                 (if
                     (doom-cli-context-pipe-p context :out t)
                     (progn
                       (setq doom-print-backend nil)))
                 (if
                     (doom-cli-context-pipe-p context :in)
                     (progn
                       (save-current-buffer
                         (set-buffer
                          (progn
                            (or
                             (progn
                               (and
                                (memq
                                 (type-of context)
                                 cl-struct-doom-cli-context-tags)
                                t))
                             (signal 'wrong-type-argument
                                     (list 'doom-cli-context context)))
                            (aref context 15)))
                         (while
                             (let*
                                 ((in
                                   (and t
                                        (condition-case nil
                                            (progn
                                              (read-from-minibuffer ""))
                                          (error nil)))))
                               (if in
                                   (insert in "\n")
                                 (condition-case nil
                                     (progn
                                       (delete-char -1))
                                   (error nil))))))))
                 (if
                     (or init-file-debug noninteractive)
                     (progn
                       (let
                           ((inhibit-message t))
                         (message "%s"
                                  (propertize
                                   (doom-print--format
                                    (format "* [%s] %s"
                                            (format "%.06f"
                                                    (float-time
                                                     (time-subtract
                                                      (current-time)
                                                      before-init-time)))
                                            "doom-cli-run: %s")
                                    command-line-args)
                                   'face 'font-lock-doc-face)))))
                 (doom-cli--exit
                  (condition-case e
                      (let*
                          ((args
                            (cons
                             (if
                                 (getenv "__DOOMDUMP")
                                 :dump prefix)
                             args))
                           (context
                            (doom-cli-context-restore
                             (getenv "__DOOMCONTEXT")
                             context))
                           (context
                            (doom-cli-context-parse args context)))
                        (run-hook-with-args 'doom-cli-before-run-functions context)
                        (let
                            ((result
                              (doom-cli-context-execute context)))
                          (run-hook-with-args 'doom-cli-after-run-functions context result))
                        0)
                    (doom-cli-wrong-number-of-arguments-error
                     (let*
                         ((val
                           (cdr e)))
                       (progn
                         (ignore
                          (consp val))
                         (let*
                             ((x13
                               (car-safe val))
                              (x14
                               (cdr-safe val)))
                           (progn
                             (ignore
                              (consp x14))
                             (let*
                                 ((x15
                                   (car-safe x14))
                                  (x16
                                   (cdr-safe x14)))
                               (progn
                                 (ignore
                                  (consp x16))
                                 (let*
                                     ((x17
                                       (car-safe x16))
                                      (x18
                                       (cdr-safe x16)))
                                   (progn
                                     (ignore
                                      (consp x18))
                                     (let*
                                         ((x19
                                           (car-safe x18))
                                          (x20
                                           (cdr-safe x18)))
                                       (progn
                                         (ignore
                                          (consp x20))
                                         (let*
                                             ((x21
                                               (car-safe x20))
                                              (x22
                                               (cdr-safe x20)))
                                           (progn
                                             (ignore
                                              (null x22))
                                             (let
                                                 ((command x13)
                                                  (flag x15)
                                                  (args x17)
                                                  (min x19)
                                                  (max x21))
                                               (progn
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
                                                   (or flag
                                                       (doom-cli-command-string
                                                        (if
                                                            (keywordp
                                                             (car command))
                                                            command
                                                          (cdr command))))
                                                   (if
                                                       (or
                                                        (= min max)
                                                        (= max most-positive-fixnum))
                                                       min
                                                     (format "%d-%d" min max))
                                                   (if
                                                       (or
                                                        (= min 0)
                                                        (> min 1))
                                                       "s" "")
                                                   (length args))
                                                  :format nil)
                                                 (doom-cli-call
                                                  (cons ':help
                                                        (cons "--synopsis"
                                                              (cons "--postamble"
                                                                    (cdr
                                                                     (doom-cli--command context)))))
                                                  context e)))))))))))))))
                     5)
                    (doom-cli-unrecognized-option-error
                     (doom-print
                      (doom-print--format
                       (doom-print--style 'red "Error: unknown option %s")
                       (car
                        (cdr e)))
                      :format nil)
                     (doom-cli-call
                      (cons ':help
                            (cons "--synopsis"
                                  (cons "--postamble"
                                        (cdr
                                         (doom-cli--command context)))))
                      context e)
                     5)
                    (doom-cli-invalid-option-error
                     (let*
                         ((val
                           (cdr e)))
                       (progn
                         (ignore
                          (consp val))
                         (let*
                             ((x23
                               (car-safe val))
                              (x24
                               (cdr-safe val)))
                           (progn
                             (ignore
                              (consp x24))
                             (let*
                                 ((x25
                                   (car-safe x24))
                                  (x26
                                   (cdr-safe x24)))
                               (progn
                                 (ignore
                                  (consp x26))
                                 (let*
                                     ((x27
                                       (car-safe x26))
                                      (x28
                                       (cdr-safe x26)))
                                   (progn
                                     (ignore
                                      (consp x28))
                                     (let*
                                         ((x29
                                           (car-safe x28))
                                          (x30
                                           (cdr-safe x28)))
                                       (progn
                                         (ignore
                                          (null x30))
                                         (let
                                             ((types x23)
                                              (option x25)
                                              (value x27)
                                              (errors x29))
                                           (progn
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--style 'red "Error: %s received invalid value %S")
                                               (string-join
                                                (progn
                                                  (or
                                                   (progn
                                                     (and
                                                      (memq
                                                       (type-of option)
                                                       cl-struct-doom-cli-option-tags)
                                                      t))
                                                   (signal 'wrong-type-argument
                                                           (list 'doom-cli-option option)))
                                                  (aref option 5))
                                                "/")
                                               value)
                                              :format nil)
                                             (doom-print
                                              (doom-print--format
                                               (doom-print--style 'bold "\nValidation errors:"))
                                              :format nil)
                                             (let
                                                 ((--dolist-tail-- errors))
                                               (while --dolist-tail--
                                                 (let
                                                     ((err
                                                       (car --dolist-tail--)))
                                                   (doom-print
                                                    (doom-print--format
                                                     (doom-print--class 'item "%s."
                                                                        (doom-print--class 'fill err)))
                                                    :format nil)
                                                   (setq --dolist-tail--
                                                         (cdr --dolist-tail--)))))))))))))))))
                     (doom-cli-call
                      (cons ':help
                            (cons "--postamble"
                                  (cdr
                                   (doom-cli--command context))))
                      context e)
                     5)
                    (doom-cli-command-not-found-error
                     (let*
                         ((command
                           (cdr e))
                          (cli
                           (doom-cli-get command)))
                       (cond
                        ((null cli)
                         (doom-print
                          (doom-print--format
                           (doom-print--style 'red "Error: unrecognized command '%s'")
                           (doom-cli-command-string
                            (or
                             (cdr command)
                             command)))
                          :format nil)
                         (doom-cli-call
                          (cons ':help
                                (cons "--similar"
                                      (cons "--postamble"
                                            (cdr command))))
                          context e))
                        ((null
                          (progn
                            (or
                             (progn
                               (and
                                (memq
                                 (type-of cli)
                                 cl-struct-doom-cli-tags)
                                t))
                             (signal 'wrong-type-argument
                                     (list 'doom-cli cli)))
                            (aref cli 9)))
                         (doom-print
                          (doom-print--format
                           (doom-print--style 'red "Error: a subcommand is required"))
                          :format nil)
                         (doom-cli-call
                          (cons ':help
                                (cons "--subcommands"
                                      (cons "--postamble"
                                            (cdr command))))
                          context e))))
                     4)
                    (doom-cli-invalid-prefix-error
                     (let
                         ((prefix
                           (car
                            (cdr e))))
                       (doom-print
                        (doom-print--format
                         (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
                         prefix)
                        :format nil)
                       (let*
                           ((suggested
                             (and t
                                  (let*
                                      ((--cl-var-- t)
                                       --cl-var--)
                                    (catch '--cl-block---cl-finish----
                                      (maphash
                                       #'(lambda
                                           (--cl-var-- cli)
                                           (or
                                            (if
                                                (progn
                                                  (or
                                                   (progn
                                                     (and
                                                      (memq
                                                       (type-of cli)
                                                       cl-struct-doom-cli-tags)
                                                      t))
                                                   (signal 'wrong-type-argument
                                                           (list 'doom-cli cli)))
                                                  (aref cli 2))
                                                t
                                              (setq --cl-var--
                                                    (car
                                                     (progn
                                                       (or
                                                        (progn
                                                          (and
                                                           (memq
                                                            (type-of cli)
                                                            cl-struct-doom-cli-tags)
                                                           t))
                                                        (signal 'wrong-type-argument
                                                                (list 'doom-cli cli)))
                                                       (aref cli 1)))
                                                    --cl-var-- nil))
                                            (throw '--cl-block---cl-finish---- nil)))
                                       doom-cli--table))
                                    --cl-var--))))
                         (if suggested
                             (doom-print
                              (doom-print--format "Did you mean %S?" suggested)
                              :format nil)
                           (doom-print
                            (doom-print--format "There are no commands defined under %S." prefix)
                            :format nil))))
                     4)
                    (user-error
                     (doom-print
                      (doom-print--format
                       (doom-print--style 'red "Error: %s")
                       (car
                        (cdr e)))
                      :format nil)
                     (doom-print
                      (doom-print--format "\nAborting...")
                      :format nil)
                     3))
                  context)))
           (fset #'message old))))))
 ((debugger closure
            ((args #s(doom-cli-context
                      (25359 42750 192253 0)
                      13992 -1 nil nil nil "doom" nil nil
                      ("doom" "doctor")
                      nil
                      ("doctor")
                      (("--eval")
                       ("-E")
                       ("--strict-load")
                       ("--load")
                       ("-L")
                       ("--color")
                       ("--profile")
                       ("--pager")
                       ("--emacsdir")
                       ("--doomdir")
                       ("--debug")
                       ("-D")
                       ("--force")
                       ("-!"))
                      ((t)
                       (("doom" "doctor"))
                       (("doom")
                        "doctor"))
                      #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
             (fn . doom-cli-debugger)
             t)
            (&rest pre-args)
            (apply fn
                   (append pre-args args)))))

;;;; 42
((let
     ((show-benchmark-fn
       (doom-partial #'doom-cli--output-benchmark-h context)))
   (let
       ((debugger
         (doom-rpartial #'doom-cli-debugger context)))
     (let
         ((debug-on-error t))
       (let
           ((standard-output
             (doom-rpartial #'doom-cli--output context)))
         (let*
             ((vnew
               (doom-partial #'doom-cli--redirect-output-a context))
              (old
               (symbol-function #'message)))
           (unwind-protect
               (progn
                 (fset #'message vnew)
                 (progn
                   (if
                       (or init-file-debug noninteractive)
                       (progn
                         (let
                             ((inhibit-message t))
                           (message "%s"
                                    (propertize
                                     (doom-print--format
                                      (format "* [%s] %s"
                                              (format "%.06f"
                                                      (float-time
                                                       (time-subtract
                                                        (current-time)
                                                        before-init-time)))
                                              "Starting!"))
                                     'face 'font-lock-doc-face)))))
                   (add-hook 'kill-emacs-hook show-benchmark-fn 94)
                   (add-hook 'kill-emacs-hook write-logs-fn 95)
                   (if
                       (doom-cli-context-pipe-p context :out t)
                       (progn
                         (setq doom-print-backend nil)))
                   (if
                       (doom-cli-context-pipe-p context :in)
                       (progn
                         (save-current-buffer
                           (set-buffer
                            (progn
                              (or
                               (progn
                                 (and
                                  (memq
                                   (type-of context)
                                   cl-struct-doom-cli-context-tags)
                                  t))
                               (signal 'wrong-type-argument
                                       (list 'doom-cli-context context)))
                              (aref context 15)))
                           (while
                               (let*
                                   ((in
                                     (and t
                                          (condition-case nil
                                              (progn
                                                (read-from-minibuffer ""))
                                            (error nil)))))
                                 (if in
                                     (insert in "\n")
                                   (condition-case nil
                                       (progn
                                         (delete-char -1))
                                     (error nil))))))))
                   (if
                       (or init-file-debug noninteractive)
                       (progn
                         (let
                             ((inhibit-message t))
                           (message "%s"
                                    (propertize
                                     (doom-print--format
                                      (format "* [%s] %s"
                                              (format "%.06f"
                                                      (float-time
                                                       (time-subtract
                                                        (current-time)
                                                        before-init-time)))
                                              "doom-cli-run: %s")
                                      command-line-args)
                                     'face 'font-lock-doc-face)))))
                   (doom-cli--exit
                    (condition-case e
                        (let*
                            ((args
                              (cons
                               (if
                                   (getenv "__DOOMDUMP")
                                   :dump prefix)
                               args))
                             (context
                              (doom-cli-context-restore
                               (getenv "__DOOMCONTEXT")
                               context))
                             (context
                              (doom-cli-context-parse args context)))
                          (run-hook-with-args 'doom-cli-before-run-functions context)
                          (let
                              ((result
                                (doom-cli-context-execute context)))
                            (run-hook-with-args 'doom-cli-after-run-functions context result))
                          0)
                      (doom-cli-wrong-number-of-arguments-error
                       (let*
                           ((val
                             (cdr e)))
                         (progn
                           (ignore
                            (consp val))
                           (let*
                               ((x13
                                 (car-safe val))
                                (x14
                                 (cdr-safe val)))
                             (progn
                               (ignore
                                (consp x14))
                               (let*
                                   ((x15
                                     (car-safe x14))
                                    (x16
                                     (cdr-safe x14)))
                                 (progn
                                   (ignore
                                    (consp x16))
                                   (let*
                                       ((x17
                                         (car-safe x16))
                                        (x18
                                         (cdr-safe x16)))
                                     (progn
                                       (ignore
                                        (consp x18))
                                       (let*
                                           ((x19
                                             (car-safe x18))
                                            (x20
                                             (cdr-safe x18)))
                                         (progn
                                           (ignore
                                            (consp x20))
                                           (let*
                                               ((x21
                                                 (car-safe x20))
                                                (x22
                                                 (cdr-safe x20)))
                                             (progn
                                               (ignore
                                                (null x22))
                                               (let
                                                   ((command x13)
                                                    (flag x15)
                                                    (args x17)
                                                    (min x19)
                                                    (max x21))
                                                 (progn
                                                   (doom-print
                                                    (doom-print--format
                                                     (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
                                                     (or flag
                                                         (doom-cli-command-string
                                                          (if
                                                              (keywordp
                                                               (car command))
                                                              command
                                                            (cdr command))))
                                                     (if
                                                         (or
                                                          (= min max)
                                                          (= max most-positive-fixnum))
                                                         min
                                                       (format "%d-%d" min max))
                                                     (if
                                                         (or
                                                          (= min 0)
                                                          (> min 1))
                                                         "s" "")
                                                     (length args))
                                                    :format nil)
                                                   (doom-cli-call
                                                    (cons ':help
                                                          (cons "--synopsis"
                                                                (cons "--postamble"
                                                                      (cdr
                                                                       (doom-cli--command context)))))
                                                    context e)))))))))))))))
                       5)
                      (doom-cli-unrecognized-option-error
                       (doom-print
                        (doom-print--format
                         (doom-print--style 'red "Error: unknown option %s")
                         (car
                          (cdr e)))
                        :format nil)
                       (doom-cli-call
                        (cons ':help
                              (cons "--synopsis"
                                    (cons "--postamble"
                                          (cdr
                                           (doom-cli--command context)))))
                        context e)
                       5)
                      (doom-cli-invalid-option-error
                       (let*
                           ((val
                             (cdr e)))
                         (progn
                           (ignore
                            (consp val))
                           (let*
                               ((x23
                                 (car-safe val))
                                (x24
                                 (cdr-safe val)))
                             (progn
                               (ignore
                                (consp x24))
                               (let*
                                   ((x25
                                     (car-safe x24))
                                    (x26
                                     (cdr-safe x24)))
                                 (progn
                                   (ignore
                                    (consp x26))
                                   (let*
                                       ((x27
                                         (car-safe x26))
                                        (x28
                                         (cdr-safe x26)))
                                     (progn
                                       (ignore
                                        (consp x28))
                                       (let*
                                           ((x29
                                             (car-safe x28))
                                            (x30
                                             (cdr-safe x28)))
                                         (progn
                                           (ignore
                                            (null x30))
                                           (let
                                               ((types x23)
                                                (option x25)
                                                (value x27)
                                                (errors x29))
                                             (progn
                                               (doom-print
                                                (doom-print--format
                                                 (doom-print--style 'red "Error: %s received invalid value %S")
                                                 (string-join
                                                  (progn
                                                    (or
                                                     (progn
                                                       (and
                                                        (memq
                                                         (type-of option)
                                                         cl-struct-doom-cli-option-tags)
                                                        t))
                                                     (signal 'wrong-type-argument
                                                             (list 'doom-cli-option option)))
                                                    (aref option 5))
                                                  "/")
                                                 value)
                                                :format nil)
                                               (doom-print
                                                (doom-print--format
                                                 (doom-print--style 'bold "\nValidation errors:"))
                                                :format nil)
                                               (let
                                                   ((--dolist-tail-- errors))
                                                 (while --dolist-tail--
                                                   (let
                                                       ((err
                                                         (car --dolist-tail--)))
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--class 'item "%s."
                                                                          (doom-print--class 'fill err)))
                                                      :format nil)
                                                     (setq --dolist-tail--
                                                           (cdr --dolist-tail--)))))))))))))))))
                       (doom-cli-call
                        (cons ':help
                              (cons "--postamble"
                                    (cdr
                                     (doom-cli--command context))))
                        context e)
                       5)
                      (doom-cli-command-not-found-error
                       (let*
                           ((command
                             (cdr e))
                            (cli
                             (doom-cli-get command)))
                         (cond
                          ((null cli)
                           (doom-print
                            (doom-print--format
                             (doom-print--style 'red "Error: unrecognized command '%s'")
                             (doom-cli-command-string
                              (or
                               (cdr command)
                               command)))
                            :format nil)
                           (doom-cli-call
                            (cons ':help
                                  (cons "--similar"
                                        (cons "--postamble"
                                              (cdr command))))
                            context e))
                          ((null
                            (progn
                              (or
                               (progn
                                 (and
                                  (memq
                                   (type-of cli)
                                   cl-struct-doom-cli-tags)
                                  t))
                               (signal 'wrong-type-argument
                                       (list 'doom-cli cli)))
                              (aref cli 9)))
                           (doom-print
                            (doom-print--format
                             (doom-print--style 'red "Error: a subcommand is required"))
                            :format nil)
                           (doom-cli-call
                            (cons ':help
                                  (cons "--subcommands"
                                        (cons "--postamble"
                                              (cdr command))))
                            context e))))
                       4)
                      (doom-cli-invalid-prefix-error
                       (let
                           ((prefix
                             (car
                              (cdr e))))
                         (doom-print
                          (doom-print--format
                           (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
                           prefix)
                          :format nil)
                         (let*
                             ((suggested
                               (and t
                                    (let*
                                        ((--cl-var-- t)
                                         --cl-var--)
                                      (catch '--cl-block---cl-finish----
                                        (maphash
                                         #'(lambda
                                             (--cl-var-- cli)
                                             (or
                                              (if
                                                  (progn
                                                    (or
                                                     (progn
                                                       (and
                                                        (memq
                                                         (type-of cli)
                                                         cl-struct-doom-cli-tags)
                                                        t))
                                                     (signal 'wrong-type-argument
                                                             (list 'doom-cli cli)))
                                                    (aref cli 2))
                                                  t
                                                (setq --cl-var--
                                                      (car
                                                       (progn
                                                         (or
                                                          (progn
                                                            (and
                                                             (memq
                                                              (type-of cli)
                                                              cl-struct-doom-cli-tags)
                                                             t))
                                                          (signal 'wrong-type-argument
                                                                  (list 'doom-cli cli)))
                                                         (aref cli 1)))
                                                      --cl-var-- nil))
                                              (throw '--cl-block---cl-finish---- nil)))
                                         doom-cli--table))
                                      --cl-var--))))
                           (if suggested
                               (doom-print
                                (doom-print--format "Did you mean %S?" suggested)
                                :format nil)
                             (doom-print
                              (doom-print--format "There are no commands defined under %S." prefix)
                              :format nil))))
                       4)
                      (user-error
                       (doom-print
                        (doom-print--format
                         (doom-print--style 'red "Error: %s")
                         (car
                          (cdr e)))
                        :format nil)
                       (doom-print
                        (doom-print--format "\nAborting...")
                        :format nil)
                       3))
                    context)))
             (fset #'message old)))))))
 ((prefix . "doom")
  (args
   ("doctor"))
  (args "doctor")
  (context . #s(doom-cli-context
                (25359 42750 192253 0)
                13992 -1 nil nil nil "doom" nil nil
                ("doom" "doctor")
                nil
                ("doctor")
                (("--eval")
                 ("-E")
                 ("--strict-load")
                 ("--load")
                 ("-L")
                 ("--color")
                 ("--profile")
                 ("--pager")
                 ("--emacsdir")
                 ("--doomdir")
                 ("--debug")
                 ("-D")
                 ("--force")
                 ("-!"))
                ((t)
                 (("doom" "doctor"))
                 (("doom")
                  "doctor"))
                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (write-logs-fn .
                 #[128 "\302\300\303\301\4\"\"\207"
                       [doom-cli--output-write-logs-h
                        (#s(doom-cli-context
                            (25359 42750 192253 0)
                            13992 -1 nil nil nil "doom" nil nil
                            ("doom" "doctor")
                            nil
                            ("doctor")
                            (("--eval")
                             ("-E")
                             ("--strict-load")
                             ("--load")
                             ("-L")
                             ("--color")
                             ("--profile")
                             ("--pager")
                             ("--emacsdir")
                             ("--doomdir")
                             ("--debug")
                             ("-D")
                             ("--force")
                             ("-!"))
                            ((t)
                             (("doom" "doctor"))
                             (("doom")
                              "doctor"))
                            #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
                        apply append]
                       6 "\n\n(fn &rest ARGS2)"])
  (show-benchmark-fn .
                     #[128 "\302\300\303\301\4\"\"\207"
                           [doom-cli--output-benchmark-h
                            (#s(doom-cli-context
                                (25359 42750 192253 0)
                                13992 -1 nil nil nil "doom" nil nil
                                ("doom" "doctor")
                                nil
                                ("doctor")
                                (("--eval")
                                 ("-E")
                                 ("--strict-load")
                                 ("--load")
                                 ("-L")
                                 ("--color")
                                 ("--profile")
                                 ("--pager")
                                 ("--emacsdir")
                                 ("--doomdir")
                                 ("--debug")
                                 ("-D")
                                 ("--force")
                                 ("-!"))
                                ((t)
                                 (("doom" "doctor"))
                                 (("doom")
                                  "doctor"))
                                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
                            apply append]
                           6 "\n\n(fn &rest ARGS2)"])))

;;;; 43
((let
     ((write-logs-fn
       (doom-partial #'doom-cli--output-write-logs-h context)))
   (let
       ((show-benchmark-fn
         (doom-partial #'doom-cli--output-benchmark-h context)))
     (let
         ((debugger
           (doom-rpartial #'doom-cli-debugger context)))
       (let
           ((debug-on-error t))
         (let
             ((standard-output
               (doom-rpartial #'doom-cli--output context)))
           (let*
               ((vnew
                 (doom-partial #'doom-cli--redirect-output-a context))
                (old
                 (symbol-function #'message)))
             (unwind-protect
                 (progn
                   (fset #'message vnew)
                   (progn
                     (if
                         (or init-file-debug noninteractive)
                         (progn
                           (let
                               ((inhibit-message t))
                             (message "%s"
                                      (propertize
                                       (doom-print--format
                                        (format "* [%s] %s"
                                                (format "%.06f"
                                                        (float-time
                                                         (time-subtract
                                                          (current-time)
                                                          before-init-time)))
                                                "Starting!"))
                                       'face 'font-lock-doc-face)))))
                     (add-hook 'kill-emacs-hook show-benchmark-fn 94)
                     (add-hook 'kill-emacs-hook write-logs-fn 95)
                     (if
                         (doom-cli-context-pipe-p context :out t)
                         (progn
                           (setq doom-print-backend nil)))
                     (if
                         (doom-cli-context-pipe-p context :in)
                         (progn
                           (save-current-buffer
                             (set-buffer
                              (progn
                                (or
                                 (progn
                                   (and
                                    (memq
                                     (type-of context)
                                     cl-struct-doom-cli-context-tags)
                                    t))
                                 (signal 'wrong-type-argument
                                         (list 'doom-cli-context context)))
                                (aref context 15)))
                             (while
                                 (let*
                                     ((in
                                       (and t
                                            (condition-case nil
                                                (progn
                                                  (read-from-minibuffer ""))
                                              (error nil)))))
                                   (if in
                                       (insert in "\n")
                                     (condition-case nil
                                         (progn
                                           (delete-char -1))
                                       (error nil))))))))
                     (if
                         (or init-file-debug noninteractive)
                         (progn
                           (let
                               ((inhibit-message t))
                             (message "%s"
                                      (propertize
                                       (doom-print--format
                                        (format "* [%s] %s"
                                                (format "%.06f"
                                                        (float-time
                                                         (time-subtract
                                                          (current-time)
                                                          before-init-time)))
                                                "doom-cli-run: %s")
                                        command-line-args)
                                       'face 'font-lock-doc-face)))))
                     (doom-cli--exit
                      (condition-case e
                          (let*
                              ((args
                                (cons
                                 (if
                                     (getenv "__DOOMDUMP")
                                     :dump prefix)
                                 args))
                               (context
                                (doom-cli-context-restore
                                 (getenv "__DOOMCONTEXT")
                                 context))
                               (context
                                (doom-cli-context-parse args context)))
                            (run-hook-with-args 'doom-cli-before-run-functions context)
                            (let
                                ((result
                                  (doom-cli-context-execute context)))
                              (run-hook-with-args 'doom-cli-after-run-functions context result))
                            0)
                        (doom-cli-wrong-number-of-arguments-error
                         (let*
                             ((val
                               (cdr e)))
                           (progn
                             (ignore
                              (consp val))
                             (let*
                                 ((x13
                                   (car-safe val))
                                  (x14
                                   (cdr-safe val)))
                               (progn
                                 (ignore
                                  (consp x14))
                                 (let*
                                     ((x15
                                       (car-safe x14))
                                      (x16
                                       (cdr-safe x14)))
                                   (progn
                                     (ignore
                                      (consp x16))
                                     (let*
                                         ((x17
                                           (car-safe x16))
                                          (x18
                                           (cdr-safe x16)))
                                       (progn
                                         (ignore
                                          (consp x18))
                                         (let*
                                             ((x19
                                               (car-safe x18))
                                              (x20
                                               (cdr-safe x18)))
                                           (progn
                                             (ignore
                                              (consp x20))
                                             (let*
                                                 ((x21
                                                   (car-safe x20))
                                                  (x22
                                                   (cdr-safe x20)))
                                               (progn
                                                 (ignore
                                                  (null x22))
                                                 (let
                                                     ((command x13)
                                                      (flag x15)
                                                      (args x17)
                                                      (min x19)
                                                      (max x21))
                                                   (progn
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
                                                       (or flag
                                                           (doom-cli-command-string
                                                            (if
                                                                (keywordp
                                                                 (car command))
                                                                command
                                                              (cdr command))))
                                                       (if
                                                           (or
                                                            (= min max)
                                                            (= max most-positive-fixnum))
                                                           min
                                                         (format "%d-%d" min max))
                                                       (if
                                                           (or
                                                            (= min 0)
                                                            (> min 1))
                                                           "s" "")
                                                       (length args))
                                                      :format nil)
                                                     (doom-cli-call
                                                      (cons ':help
                                                            (cons "--synopsis"
                                                                  (cons "--postamble"
                                                                        (cdr
                                                                         (doom-cli--command context)))))
                                                      context e)))))))))))))))
                         5)
                        (doom-cli-unrecognized-option-error
                         (doom-print
                          (doom-print--format
                           (doom-print--style 'red "Error: unknown option %s")
                           (car
                            (cdr e)))
                          :format nil)
                         (doom-cli-call
                          (cons ':help
                                (cons "--synopsis"
                                      (cons "--postamble"
                                            (cdr
                                             (doom-cli--command context)))))
                          context e)
                         5)
                        (doom-cli-invalid-option-error
                         (let*
                             ((val
                               (cdr e)))
                           (progn
                             (ignore
                              (consp val))
                             (let*
                                 ((x23
                                   (car-safe val))
                                  (x24
                                   (cdr-safe val)))
                               (progn
                                 (ignore
                                  (consp x24))
                                 (let*
                                     ((x25
                                       (car-safe x24))
                                      (x26
                                       (cdr-safe x24)))
                                   (progn
                                     (ignore
                                      (consp x26))
                                     (let*
                                         ((x27
                                           (car-safe x26))
                                          (x28
                                           (cdr-safe x26)))
                                       (progn
                                         (ignore
                                          (consp x28))
                                         (let*
                                             ((x29
                                               (car-safe x28))
                                              (x30
                                               (cdr-safe x28)))
                                           (progn
                                             (ignore
                                              (null x30))
                                             (let
                                                 ((types x23)
                                                  (option x25)
                                                  (value x27)
                                                  (errors x29))
                                               (progn
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--style 'red "Error: %s received invalid value %S")
                                                   (string-join
                                                    (progn
                                                      (or
                                                       (progn
                                                         (and
                                                          (memq
                                                           (type-of option)
                                                           cl-struct-doom-cli-option-tags)
                                                          t))
                                                       (signal 'wrong-type-argument
                                                               (list 'doom-cli-option option)))
                                                      (aref option 5))
                                                    "/")
                                                   value)
                                                  :format nil)
                                                 (doom-print
                                                  (doom-print--format
                                                   (doom-print--style 'bold "\nValidation errors:"))
                                                  :format nil)
                                                 (let
                                                     ((--dolist-tail-- errors))
                                                   (while --dolist-tail--
                                                     (let
                                                         ((err
                                                           (car --dolist-tail--)))
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--class 'item "%s."
                                                                            (doom-print--class 'fill err)))
                                                        :format nil)
                                                       (setq --dolist-tail--
                                                             (cdr --dolist-tail--)))))))))))))))))
                         (doom-cli-call
                          (cons ':help
                                (cons "--postamble"
                                      (cdr
                                       (doom-cli--command context))))
                          context e)
                         5)
                        (doom-cli-command-not-found-error
                         (let*
                             ((command
                               (cdr e))
                              (cli
                               (doom-cli-get command)))
                           (cond
                            ((null cli)
                             (doom-print
                              (doom-print--format
                               (doom-print--style 'red "Error: unrecognized command '%s'")
                               (doom-cli-command-string
                                (or
                                 (cdr command)
                                 command)))
                              :format nil)
                             (doom-cli-call
                              (cons ':help
                                    (cons "--similar"
                                          (cons "--postamble"
                                                (cdr command))))
                              context e))
                            ((null
                              (progn
                                (or
                                 (progn
                                   (and
                                    (memq
                                     (type-of cli)
                                     cl-struct-doom-cli-tags)
                                    t))
                                 (signal 'wrong-type-argument
                                         (list 'doom-cli cli)))
                                (aref cli 9)))
                             (doom-print
                              (doom-print--format
                               (doom-print--style 'red "Error: a subcommand is required"))
                              :format nil)
                             (doom-cli-call
                              (cons ':help
                                    (cons "--subcommands"
                                          (cons "--postamble"
                                                (cdr command))))
                              context e))))
                         4)
                        (doom-cli-invalid-prefix-error
                         (let
                             ((prefix
                               (car
                                (cdr e))))
                           (doom-print
                            (doom-print--format
                             (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
                             prefix)
                            :format nil)
                           (let*
                               ((suggested
                                 (and t
                                      (let*
                                          ((--cl-var-- t)
                                           --cl-var--)
                                        (catch '--cl-block---cl-finish----
                                          (maphash
                                           #'(lambda
                                               (--cl-var-- cli)
                                               (or
                                                (if
                                                    (progn
                                                      (or
                                                       (progn
                                                         (and
                                                          (memq
                                                           (type-of cli)
                                                           cl-struct-doom-cli-tags)
                                                          t))
                                                       (signal 'wrong-type-argument
                                                               (list 'doom-cli cli)))
                                                      (aref cli 2))
                                                    t
                                                  (setq --cl-var--
                                                        (car
                                                         (progn
                                                           (or
                                                            (progn
                                                              (and
                                                               (memq
                                                                (type-of cli)
                                                                cl-struct-doom-cli-tags)
                                                               t))
                                                            (signal 'wrong-type-argument
                                                                    (list 'doom-cli cli)))
                                                           (aref cli 1)))
                                                        --cl-var-- nil))
                                                (throw '--cl-block---cl-finish---- nil)))
                                           doom-cli--table))
                                        --cl-var--))))
                             (if suggested
                                 (doom-print
                                  (doom-print--format "Did you mean %S?" suggested)
                                  :format nil)
                               (doom-print
                                (doom-print--format "There are no commands defined under %S." prefix)
                                :format nil))))
                         4)
                        (user-error
                         (doom-print
                          (doom-print--format
                           (doom-print--style 'red "Error: %s")
                           (car
                            (cdr e)))
                          :format nil)
                         (doom-print
                          (doom-print--format "\nAborting...")
                          :format nil)
                         3))
                      context)))
               (fset #'message old))))))))
 ((prefix . "doom")
  (args
   ("doctor"))
  (args "doctor")
  (context . #s(doom-cli-context
                (25359 42750 192253 0)
                13992 -1 nil nil nil "doom" nil nil
                ("doom" "doctor")
                nil
                ("doctor")
                (("--eval")
                 ("-E")
                 ("--strict-load")
                 ("--load")
                 ("-L")
                 ("--color")
                 ("--profile")
                 ("--pager")
                 ("--emacsdir")
                 ("--doomdir")
                 ("--debug")
                 ("-D")
                 ("--force")
                 ("-!"))
                ((t)
                 (("doom" "doctor"))
                 (("doom")
                  "doctor"))
                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
  (write-logs-fn .
                 #[128 "\302\300\303\301\4\"\"\207"
                       [doom-cli--output-write-logs-h
                        (#s(doom-cli-context
                            (25359 42750 192253 0)
                            13992 -1 nil nil nil "doom" nil nil
                            ("doom" "doctor")
                            nil
                            ("doctor")
                            (("--eval")
                             ("-E")
                             ("--strict-load")
                             ("--load")
                             ("-L")
                             ("--color")
                             ("--profile")
                             ("--pager")
                             ("--emacsdir")
                             ("--doomdir")
                             ("--debug")
                             ("-D")
                             ("--force")
                             ("-!"))
                            ((t)
                             (("doom" "doctor"))
                             (("doom")
                              "doctor"))
                            #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))
                        apply append]
                       6 "\n\n(fn &rest ARGS2)"])))

;;;; 44
((let
     ((doom-cli--context context))
   (let
       ((write-logs-fn
         (doom-partial #'doom-cli--output-write-logs-h context)))
     (let
         ((show-benchmark-fn
           (doom-partial #'doom-cli--output-benchmark-h context)))
       (let
           ((debugger
             (doom-rpartial #'doom-cli-debugger context)))
         (let
             ((debug-on-error t))
           (let
               ((standard-output
                 (doom-rpartial #'doom-cli--output context)))
             (let*
                 ((vnew
                   (doom-partial #'doom-cli--redirect-output-a context))
                  (old
                   (symbol-function #'message)))
               (unwind-protect
                   (progn
                     (fset #'message vnew)
                     (progn
                       (if
                           (or init-file-debug noninteractive)
                           (progn
                             (let
                                 ((inhibit-message t))
                               (message "%s"
                                        (propertize
                                         (doom-print--format
                                          (format "* [%s] %s"
                                                  (format "%.06f"
                                                          (float-time
                                                           (time-subtract
                                                            (current-time)
                                                            before-init-time)))
                                                  "Starting!"))
                                         'face 'font-lock-doc-face)))))
                       (add-hook 'kill-emacs-hook show-benchmark-fn 94)
                       (add-hook 'kill-emacs-hook write-logs-fn 95)
                       (if
                           (doom-cli-context-pipe-p context :out t)
                           (progn
                             (setq doom-print-backend nil)))
                       (if
                           (doom-cli-context-pipe-p context :in)
                           (progn
                             (save-current-buffer
                               (set-buffer
                                (progn
                                  (or
                                   (progn
                                     (and
                                      (memq
                                       (type-of context)
                                       cl-struct-doom-cli-context-tags)
                                      t))
                                   (signal 'wrong-type-argument
                                           (list 'doom-cli-context context)))
                                  (aref context 15)))
                               (while
                                   (let*
                                       ((in
                                         (and t
                                              (condition-case nil
                                                  (progn
                                                    (read-from-minibuffer ""))
                                                (error nil)))))
                                     (if in
                                         (insert in "\n")
                                       (condition-case nil
                                           (progn
                                             (delete-char -1))
                                         (error nil))))))))
                       (if
                           (or init-file-debug noninteractive)
                           (progn
                             (let
                                 ((inhibit-message t))
                               (message "%s"
                                        (propertize
                                         (doom-print--format
                                          (format "* [%s] %s"
                                                  (format "%.06f"
                                                          (float-time
                                                           (time-subtract
                                                            (current-time)
                                                            before-init-time)))
                                                  "doom-cli-run: %s")
                                          command-line-args)
                                         'face 'font-lock-doc-face)))))
                       (doom-cli--exit
                        (condition-case e
                            (let*
                                ((args
                                  (cons
                                   (if
                                       (getenv "__DOOMDUMP")
                                       :dump prefix)
                                   args))
                                 (context
                                  (doom-cli-context-restore
                                   (getenv "__DOOMCONTEXT")
                                   context))
                                 (context
                                  (doom-cli-context-parse args context)))
                              (run-hook-with-args 'doom-cli-before-run-functions context)
                              (let
                                  ((result
                                    (doom-cli-context-execute context)))
                                (run-hook-with-args 'doom-cli-after-run-functions context result))
                              0)
                          (doom-cli-wrong-number-of-arguments-error
                           (let*
                               ((val
                                 (cdr e)))
                             (progn
                               (ignore
                                (consp val))
                               (let*
                                   ((x13
                                     (car-safe val))
                                    (x14
                                     (cdr-safe val)))
                                 (progn
                                   (ignore
                                    (consp x14))
                                   (let*
                                       ((x15
                                         (car-safe x14))
                                        (x16
                                         (cdr-safe x14)))
                                     (progn
                                       (ignore
                                        (consp x16))
                                       (let*
                                           ((x17
                                             (car-safe x16))
                                            (x18
                                             (cdr-safe x16)))
                                         (progn
                                           (ignore
                                            (consp x18))
                                           (let*
                                               ((x19
                                                 (car-safe x18))
                                                (x20
                                                 (cdr-safe x18)))
                                             (progn
                                               (ignore
                                                (consp x20))
                                               (let*
                                                   ((x21
                                                     (car-safe x20))
                                                    (x22
                                                     (cdr-safe x20)))
                                                 (progn
                                                   (ignore
                                                    (null x22))
                                                   (let
                                                       ((command x13)
                                                        (flag x15)
                                                        (args x17)
                                                        (min x19)
                                                        (max x21))
                                                     (progn
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
                                                         (or flag
                                                             (doom-cli-command-string
                                                              (if
                                                                  (keywordp
                                                                   (car command))
                                                                  command
                                                                (cdr command))))
                                                         (if
                                                             (or
                                                              (= min max)
                                                              (= max most-positive-fixnum))
                                                             min
                                                           (format "%d-%d" min max))
                                                         (if
                                                             (or
                                                              (= min 0)
                                                              (> min 1))
                                                             "s" "")
                                                         (length args))
                                                        :format nil)
                                                       (doom-cli-call
                                                        (cons ':help
                                                              (cons "--synopsis"
                                                                    (cons "--postamble"
                                                                          (cdr
                                                                           (doom-cli--command context)))))
                                                        context e)))))))))))))))
                           5)
                          (doom-cli-unrecognized-option-error
                           (doom-print
                            (doom-print--format
                             (doom-print--style 'red "Error: unknown option %s")
                             (car
                              (cdr e)))
                            :format nil)
                           (doom-cli-call
                            (cons ':help
                                  (cons "--synopsis"
                                        (cons "--postamble"
                                              (cdr
                                               (doom-cli--command context)))))
                            context e)
                           5)
                          (doom-cli-invalid-option-error
                           (let*
                               ((val
                                 (cdr e)))
                             (progn
                               (ignore
                                (consp val))
                               (let*
                                   ((x23
                                     (car-safe val))
                                    (x24
                                     (cdr-safe val)))
                                 (progn
                                   (ignore
                                    (consp x24))
                                   (let*
                                       ((x25
                                         (car-safe x24))
                                        (x26
                                         (cdr-safe x24)))
                                     (progn
                                       (ignore
                                        (consp x26))
                                       (let*
                                           ((x27
                                             (car-safe x26))
                                            (x28
                                             (cdr-safe x26)))
                                         (progn
                                           (ignore
                                            (consp x28))
                                           (let*
                                               ((x29
                                                 (car-safe x28))
                                                (x30
                                                 (cdr-safe x28)))
                                             (progn
                                               (ignore
                                                (null x30))
                                               (let
                                                   ((types x23)
                                                    (option x25)
                                                    (value x27)
                                                    (errors x29))
                                                 (progn
                                                   (doom-print
                                                    (doom-print--format
                                                     (doom-print--style 'red "Error: %s received invalid value %S")
                                                     (string-join
                                                      (progn
                                                        (or
                                                         (progn
                                                           (and
                                                            (memq
                                                             (type-of option)
                                                             cl-struct-doom-cli-option-tags)
                                                            t))
                                                         (signal 'wrong-type-argument
                                                                 (list 'doom-cli-option option)))
                                                        (aref option 5))
                                                      "/")
                                                     value)
                                                    :format nil)
                                                   (doom-print
                                                    (doom-print--format
                                                     (doom-print--style 'bold "\nValidation errors:"))
                                                    :format nil)
                                                   (let
                                                       ((--dolist-tail-- errors))
                                                     (while --dolist-tail--
                                                       (let
                                                           ((err
                                                             (car --dolist-tail--)))
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--class 'item "%s."
                                                                              (doom-print--class 'fill err)))
                                                          :format nil)
                                                         (setq --dolist-tail--
                                                               (cdr --dolist-tail--)))))))))))))))))
                           (doom-cli-call
                            (cons ':help
                                  (cons "--postamble"
                                        (cdr
                                         (doom-cli--command context))))
                            context e)
                           5)
                          (doom-cli-command-not-found-error
                           (let*
                               ((command
                                 (cdr e))
                                (cli
                                 (doom-cli-get command)))
                             (cond
                              ((null cli)
                               (doom-print
                                (doom-print--format
                                 (doom-print--style 'red "Error: unrecognized command '%s'")
                                 (doom-cli-command-string
                                  (or
                                   (cdr command)
                                   command)))
                                :format nil)
                               (doom-cli-call
                                (cons ':help
                                      (cons "--similar"
                                            (cons "--postamble"
                                                  (cdr command))))
                                context e))
                              ((null
                                (progn
                                  (or
                                   (progn
                                     (and
                                      (memq
                                       (type-of cli)
                                       cl-struct-doom-cli-tags)
                                      t))
                                   (signal 'wrong-type-argument
                                           (list 'doom-cli cli)))
                                  (aref cli 9)))
                               (doom-print
                                (doom-print--format
                                 (doom-print--style 'red "Error: a subcommand is required"))
                                :format nil)
                               (doom-cli-call
                                (cons ':help
                                      (cons "--subcommands"
                                            (cons "--postamble"
                                                  (cdr command))))
                                context e))))
                           4)
                          (doom-cli-invalid-prefix-error
                           (let
                               ((prefix
                                 (car
                                  (cdr e))))
                             (doom-print
                              (doom-print--format
                               (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
                               prefix)
                              :format nil)
                             (let*
                                 ((suggested
                                   (and t
                                        (let*
                                            ((--cl-var-- t)
                                             --cl-var--)
                                          (catch '--cl-block---cl-finish----
                                            (maphash
                                             #'(lambda
                                                 (--cl-var-- cli)
                                                 (or
                                                  (if
                                                      (progn
                                                        (or
                                                         (progn
                                                           (and
                                                            (memq
                                                             (type-of cli)
                                                             cl-struct-doom-cli-tags)
                                                            t))
                                                         (signal 'wrong-type-argument
                                                                 (list 'doom-cli cli)))
                                                        (aref cli 2))
                                                      t
                                                    (setq --cl-var--
                                                          (car
                                                           (progn
                                                             (or
                                                              (progn
                                                                (and
                                                                 (memq
                                                                  (type-of cli)
                                                                  cl-struct-doom-cli-tags)
                                                                 t))
                                                              (signal 'wrong-type-argument
                                                                      (list 'doom-cli cli)))
                                                             (aref cli 1)))
                                                          --cl-var-- nil))
                                                  (throw '--cl-block---cl-finish---- nil)))
                                             doom-cli--table))
                                          --cl-var--))))
                               (if suggested
                                   (doom-print
                                    (doom-print--format "Did you mean %S?" suggested)
                                    :format nil)
                                 (doom-print
                                  (doom-print--format "There are no commands defined under %S." prefix)
                                  :format nil))))
                           4)
                          (user-error
                           (doom-print
                            (doom-print--format
                             (doom-print--style 'red "Error: %s")
                             (car
                              (cdr e)))
                            :format nil)
                           (doom-print
                            (doom-print--format "\nAborting...")
                            :format nil)
                           3))
                        context)))
                 (fset #'message old)))))))))
 ((doom-cli--context . #s(doom-cli-context
                          (25359 42750 192253 0)
                          13992 -1 nil nil nil "doom" nil nil
                          ("doom" "doctor")
                          nil
                          ("doctor")
                          (("--eval")
                           ("-E")
                           ("--strict-load")
                           ("--load")
                           ("-L")
                           ("--color")
                           ("--profile")
                           ("--pager")
                           ("--emacsdir")
                           ("--doomdir")
                           ("--debug")
                           ("-D")
                           ("--force")
                           ("-!"))
                          ((t)
                           (("doom" "doctor"))
                           (("doom")
                            "doctor"))
                          #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))))

;;;; 45
((let
     ((context
       (doom-cli-context-create :prefix prefix :whole args)))
   (let
       ((doom-cli--context context))
     (let
         ((write-logs-fn
           (doom-partial #'doom-cli--output-write-logs-h context)))
       (let
           ((show-benchmark-fn
             (doom-partial #'doom-cli--output-benchmark-h context)))
         (let
             ((debugger
               (doom-rpartial #'doom-cli-debugger context)))
           (let
               ((debug-on-error t))
             (let
                 ((standard-output
                   (doom-rpartial #'doom-cli--output context)))
               (let*
                   ((vnew
                     (doom-partial #'doom-cli--redirect-output-a context))
                    (old
                     (symbol-function #'message)))
                 (unwind-protect
                     (progn
                       (fset #'message vnew)
                       (progn
                         (if
                             (or init-file-debug noninteractive)
                             (progn
                               (let
                                   ((inhibit-message t))
                                 (message "%s"
                                          (propertize
                                           (doom-print--format
                                            (format "* [%s] %s"
                                                    (format "%.06f"
                                                            (float-time
                                                             (time-subtract
                                                              (current-time)
                                                              before-init-time)))
                                                    "Starting!"))
                                           'face 'font-lock-doc-face)))))
                         (add-hook 'kill-emacs-hook show-benchmark-fn 94)
                         (add-hook 'kill-emacs-hook write-logs-fn 95)
                         (if
                             (doom-cli-context-pipe-p context :out t)
                             (progn
                               (setq doom-print-backend nil)))
                         (if
                             (doom-cli-context-pipe-p context :in)
                             (progn
                               (save-current-buffer
                                 (set-buffer
                                  (progn
                                    (or
                                     (progn
                                       (and
                                        (memq
                                         (type-of context)
                                         cl-struct-doom-cli-context-tags)
                                        t))
                                     (signal 'wrong-type-argument
                                             (list 'doom-cli-context context)))
                                    (aref context 15)))
                                 (while
                                     (let*
                                         ((in
                                           (and t
                                                (condition-case nil
                                                    (progn
                                                      (read-from-minibuffer ""))
                                                  (error nil)))))
                                       (if in
                                           (insert in "\n")
                                         (condition-case nil
                                             (progn
                                               (delete-char -1))
                                           (error nil))))))))
                         (if
                             (or init-file-debug noninteractive)
                             (progn
                               (let
                                   ((inhibit-message t))
                                 (message "%s"
                                          (propertize
                                           (doom-print--format
                                            (format "* [%s] %s"
                                                    (format "%.06f"
                                                            (float-time
                                                             (time-subtract
                                                              (current-time)
                                                              before-init-time)))
                                                    "doom-cli-run: %s")
                                            command-line-args)
                                           'face 'font-lock-doc-face)))))
                         (doom-cli--exit
                          (condition-case e
                              (let*
                                  ((args
                                    (cons
                                     (if
                                         (getenv "__DOOMDUMP")
                                         :dump prefix)
                                     args))
                                   (context
                                    (doom-cli-context-restore
                                     (getenv "__DOOMCONTEXT")
                                     context))
                                   (context
                                    (doom-cli-context-parse args context)))
                                (run-hook-with-args 'doom-cli-before-run-functions context)
                                (let
                                    ((result
                                      (doom-cli-context-execute context)))
                                  (run-hook-with-args 'doom-cli-after-run-functions context result))
                                0)
                            (doom-cli-wrong-number-of-arguments-error
                             (let*
                                 ((val
                                   (cdr e)))
                               (progn
                                 (ignore
                                  (consp val))
                                 (let*
                                     ((x13
                                       (car-safe val))
                                      (x14
                                       (cdr-safe val)))
                                   (progn
                                     (ignore
                                      (consp x14))
                                     (let*
                                         ((x15
                                           (car-safe x14))
                                          (x16
                                           (cdr-safe x14)))
                                       (progn
                                         (ignore
                                          (consp x16))
                                         (let*
                                             ((x17
                                               (car-safe x16))
                                              (x18
                                               (cdr-safe x16)))
                                           (progn
                                             (ignore
                                              (consp x18))
                                             (let*
                                                 ((x19
                                                   (car-safe x18))
                                                  (x20
                                                   (cdr-safe x18)))
                                               (progn
                                                 (ignore
                                                  (consp x20))
                                                 (let*
                                                     ((x21
                                                       (car-safe x20))
                                                      (x22
                                                       (cdr-safe x20)))
                                                   (progn
                                                     (ignore
                                                      (null x22))
                                                     (let
                                                         ((command x13)
                                                          (flag x15)
                                                          (args x17)
                                                          (min x19)
                                                          (max x21))
                                                       (progn
                                                         (doom-print
                                                          (doom-print--format
                                                           (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
                                                           (or flag
                                                               (doom-cli-command-string
                                                                (if
                                                                    (keywordp
                                                                     (car command))
                                                                    command
                                                                  (cdr command))))
                                                           (if
                                                               (or
                                                                (= min max)
                                                                (= max most-positive-fixnum))
                                                               min
                                                             (format "%d-%d" min max))
                                                           (if
                                                               (or
                                                                (= min 0)
                                                                (> min 1))
                                                               "s" "")
                                                           (length args))
                                                          :format nil)
                                                         (doom-cli-call
                                                          (cons ':help
                                                                (cons "--synopsis"
                                                                      (cons "--postamble"
                                                                            (cdr
                                                                             (doom-cli--command context)))))
                                                          context e)))))))))))))))
                             5)
                            (doom-cli-unrecognized-option-error
                             (doom-print
                              (doom-print--format
                               (doom-print--style 'red "Error: unknown option %s")
                               (car
                                (cdr e)))
                              :format nil)
                             (doom-cli-call
                              (cons ':help
                                    (cons "--synopsis"
                                          (cons "--postamble"
                                                (cdr
                                                 (doom-cli--command context)))))
                              context e)
                             5)
                            (doom-cli-invalid-option-error
                             (let*
                                 ((val
                                   (cdr e)))
                               (progn
                                 (ignore
                                  (consp val))
                                 (let*
                                     ((x23
                                       (car-safe val))
                                      (x24
                                       (cdr-safe val)))
                                   (progn
                                     (ignore
                                      (consp x24))
                                     (let*
                                         ((x25
                                           (car-safe x24))
                                          (x26
                                           (cdr-safe x24)))
                                       (progn
                                         (ignore
                                          (consp x26))
                                         (let*
                                             ((x27
                                               (car-safe x26))
                                              (x28
                                               (cdr-safe x26)))
                                           (progn
                                             (ignore
                                              (consp x28))
                                             (let*
                                                 ((x29
                                                   (car-safe x28))
                                                  (x30
                                                   (cdr-safe x28)))
                                               (progn
                                                 (ignore
                                                  (null x30))
                                                 (let
                                                     ((types x23)
                                                      (option x25)
                                                      (value x27)
                                                      (errors x29))
                                                   (progn
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--style 'red "Error: %s received invalid value %S")
                                                       (string-join
                                                        (progn
                                                          (or
                                                           (progn
                                                             (and
                                                              (memq
                                                               (type-of option)
                                                               cl-struct-doom-cli-option-tags)
                                                              t))
                                                           (signal 'wrong-type-argument
                                                                   (list 'doom-cli-option option)))
                                                          (aref option 5))
                                                        "/")
                                                       value)
                                                      :format nil)
                                                     (doom-print
                                                      (doom-print--format
                                                       (doom-print--style 'bold "\nValidation errors:"))
                                                      :format nil)
                                                     (let
                                                         ((--dolist-tail-- errors))
                                                       (while --dolist-tail--
                                                         (let
                                                             ((err
                                                               (car --dolist-tail--)))
                                                           (doom-print
                                                            (doom-print--format
                                                             (doom-print--class 'item "%s."
                                                                                (doom-print--class 'fill err)))
                                                            :format nil)
                                                           (setq --dolist-tail--
                                                                 (cdr --dolist-tail--)))))))))))))))))
                             (doom-cli-call
                              (cons ':help
                                    (cons "--postamble"
                                          (cdr
                                           (doom-cli--command context))))
                              context e)
                             5)
                            (doom-cli-command-not-found-error
                             (let*
                                 ((command
                                   (cdr e))
                                  (cli
                                   (doom-cli-get command)))
                               (cond
                                ((null cli)
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--style 'red "Error: unrecognized command '%s'")
                                   (doom-cli-command-string
                                    (or
                                     (cdr command)
                                     command)))
                                  :format nil)
                                 (doom-cli-call
                                  (cons ':help
                                        (cons "--similar"
                                              (cons "--postamble"
                                                    (cdr command))))
                                  context e))
                                ((null
                                  (progn
                                    (or
                                     (progn
                                       (and
                                        (memq
                                         (type-of cli)
                                         cl-struct-doom-cli-tags)
                                        t))
                                     (signal 'wrong-type-argument
                                             (list 'doom-cli cli)))
                                    (aref cli 9)))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--style 'red "Error: a subcommand is required"))
                                  :format nil)
                                 (doom-cli-call
                                  (cons ':help
                                        (cons "--subcommands"
                                              (cons "--postamble"
                                                    (cdr command))))
                                  context e))))
                             4)
                            (doom-cli-invalid-prefix-error
                             (let
                                 ((prefix
                                   (car
                                    (cdr e))))
                               (doom-print
                                (doom-print--format
                                 (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
                                 prefix)
                                :format nil)
                               (let*
                                   ((suggested
                                     (and t
                                          (let*
                                              ((--cl-var-- t)
                                               --cl-var--)
                                            (catch '--cl-block---cl-finish----
                                              (maphash
                                               #'(lambda
                                                   (--cl-var-- cli)
                                                   (or
                                                    (if
                                                        (progn
                                                          (or
                                                           (progn
                                                             (and
                                                              (memq
                                                               (type-of cli)
                                                               cl-struct-doom-cli-tags)
                                                              t))
                                                           (signal 'wrong-type-argument
                                                                   (list 'doom-cli cli)))
                                                          (aref cli 2))
                                                        t
                                                      (setq --cl-var--
                                                            (car
                                                             (progn
                                                               (or
                                                                (progn
                                                                  (and
                                                                   (memq
                                                                    (type-of cli)
                                                                    cl-struct-doom-cli-tags)
                                                                   t))
                                                                (signal 'wrong-type-argument
                                                                        (list 'doom-cli cli)))
                                                               (aref cli 1)))
                                                            --cl-var-- nil))
                                                    (throw '--cl-block---cl-finish---- nil)))
                                               doom-cli--table))
                                            --cl-var--))))
                                 (if suggested
                                     (doom-print
                                      (doom-print--format "Did you mean %S?" suggested)
                                      :format nil)
                                   (doom-print
                                    (doom-print--format "There are no commands defined under %S." prefix)
                                    :format nil))))
                             4)
                            (user-error
                             (doom-print
                              (doom-print--format
                               (doom-print--style 'red "Error: %s")
                               (car
                                (cdr e)))
                              :format nil)
                             (doom-print
                              (doom-print--format "\nAborting...")
                              :format nil)
                             3))
                          context)))
                   (fset #'message old))))))))))
 ((prefix . "doom")
  (args
   ("doctor"))
  (args "doctor")
  (context . #s(doom-cli-context
                (25359 42750 192253 0)
                13992 -1 nil nil nil "doom" nil nil
                ("doom" "doctor")
                nil
                ("doctor")
                (("--eval")
                 ("-E")
                 ("--strict-load")
                 ("--load")
                 ("-L")
                 ("--color")
                 ("--profile")
                 ("--pager")
                 ("--emacsdir")
                 ("--doomdir")
                 ("--debug")
                 ("-D")
                 ("--force")
                 ("-!"))
                ((t)
                 (("doom" "doctor"))
                 (("doom")
                  "doctor"))
                #<buffer  *doom-cli stdin*> #<buffer  *doom-cli stdout*> #<buffer  *doom-cli stderr*> nil))))

;;;; 46
((let
     ((args
       (flatten-list args)))
   (let
       ((context
         (doom-cli-context-create :prefix prefix :whole args)))
     (let
         ((doom-cli--context context))
       (let
           ((write-logs-fn
             (doom-partial #'doom-cli--output-write-logs-h context)))
         (let
             ((show-benchmark-fn
               (doom-partial #'doom-cli--output-benchmark-h context)))
           (let
               ((debugger
                 (doom-rpartial #'doom-cli-debugger context)))
             (let
                 ((debug-on-error t))
               (let
                   ((standard-output
                     (doom-rpartial #'doom-cli--output context)))
                 (let*
                     ((vnew
                       (doom-partial #'doom-cli--redirect-output-a context))
                      (old
                       (symbol-function #'message)))
                   (unwind-protect
                       (progn
                         (fset #'message vnew)
                         (progn
                           (if
                               (or init-file-debug noninteractive)
                               (progn
                                 (let
                                     ((inhibit-message t))
                                   (message "%s"
                                            (propertize
                                             (doom-print--format
                                              (format "* [%s] %s"
                                                      (format "%.06f"
                                                              (float-time
                                                               (time-subtract
                                                                (current-time)
                                                                before-init-time)))
                                                      "Starting!"))
                                             'face 'font-lock-doc-face)))))
                           (add-hook 'kill-emacs-hook show-benchmark-fn 94)
                           (add-hook 'kill-emacs-hook write-logs-fn 95)
                           (if
                               (doom-cli-context-pipe-p context :out t)
                               (progn
                                 (setq doom-print-backend nil)))
                           (if
                               (doom-cli-context-pipe-p context :in)
                               (progn
                                 (save-current-buffer
                                   (set-buffer
                                    (progn
                                      (or
                                       (progn
                                         (and
                                          (memq
                                           (type-of context)
                                           cl-struct-doom-cli-context-tags)
                                          t))
                                       (signal 'wrong-type-argument
                                               (list 'doom-cli-context context)))
                                      (aref context 15)))
                                   (while
                                       (let*
                                           ((in
                                             (and t
                                                  (condition-case nil
                                                      (progn
                                                        (read-from-minibuffer ""))
                                                    (error nil)))))
                                         (if in
                                             (insert in "\n")
                                           (condition-case nil
                                               (progn
                                                 (delete-char -1))
                                             (error nil))))))))
                           (if
                               (or init-file-debug noninteractive)
                               (progn
                                 (let
                                     ((inhibit-message t))
                                   (message "%s"
                                            (propertize
                                             (doom-print--format
                                              (format "* [%s] %s"
                                                      (format "%.06f"
                                                              (float-time
                                                               (time-subtract
                                                                (current-time)
                                                                before-init-time)))
                                                      "doom-cli-run: %s")
                                              command-line-args)
                                             'face 'font-lock-doc-face)))))
                           (doom-cli--exit
                            (condition-case e
                                (let*
                                    ((args
                                      (cons
                                       (if
                                           (getenv "__DOOMDUMP")
                                           :dump prefix)
                                       args))
                                     (context
                                      (doom-cli-context-restore
                                       (getenv "__DOOMCONTEXT")
                                       context))
                                     (context
                                      (doom-cli-context-parse args context)))
                                  (run-hook-with-args 'doom-cli-before-run-functions context)
                                  (let
                                      ((result
                                        (doom-cli-context-execute context)))
                                    (run-hook-with-args 'doom-cli-after-run-functions context result))
                                  0)
                              (doom-cli-wrong-number-of-arguments-error
                               (let*
                                   ((val
                                     (cdr e)))
                                 (progn
                                   (ignore
                                    (consp val))
                                   (let*
                                       ((x13
                                         (car-safe val))
                                        (x14
                                         (cdr-safe val)))
                                     (progn
                                       (ignore
                                        (consp x14))
                                       (let*
                                           ((x15
                                             (car-safe x14))
                                            (x16
                                             (cdr-safe x14)))
                                         (progn
                                           (ignore
                                            (consp x16))
                                           (let*
                                               ((x17
                                                 (car-safe x16))
                                                (x18
                                                 (cdr-safe x16)))
                                             (progn
                                               (ignore
                                                (consp x18))
                                               (let*
                                                   ((x19
                                                     (car-safe x18))
                                                    (x20
                                                     (cdr-safe x18)))
                                                 (progn
                                                   (ignore
                                                    (consp x20))
                                                   (let*
                                                       ((x21
                                                         (car-safe x20))
                                                        (x22
                                                         (cdr-safe x20)))
                                                     (progn
                                                       (ignore
                                                        (null x22))
                                                       (let
                                                           ((command x13)
                                                            (flag x15)
                                                            (args x17)
                                                            (min x19)
                                                            (max x21))
                                                         (progn
                                                           (doom-print
                                                            (doom-print--format
                                                             (doom-print--style 'red "Error: %S expected %s argument%s, but got %d")
                                                             (or flag
                                                                 (doom-cli-command-string
                                                                  (if
                                                                      (keywordp
                                                                       (car command))
                                                                      command
                                                                    (cdr command))))
                                                             (if
                                                                 (or
                                                                  (= min max)
                                                                  (= max most-positive-fixnum))
                                                                 min
                                                               (format "%d-%d" min max))
                                                             (if
                                                                 (or
                                                                  (= min 0)
                                                                  (> min 1))
                                                                 "s" "")
                                                             (length args))
                                                            :format nil)
                                                           (doom-cli-call
                                                            (cons ':help
                                                                  (cons "--synopsis"
                                                                        (cons "--postamble"
                                                                              (cdr
                                                                               (doom-cli--command context)))))
                                                            context e)))))))))))))))
                               5)
                              (doom-cli-unrecognized-option-error
                               (doom-print
                                (doom-print--format
                                 (doom-print--style 'red "Error: unknown option %s")
                                 (car
                                  (cdr e)))
                                :format nil)
                               (doom-cli-call
                                (cons ':help
                                      (cons "--synopsis"
                                            (cons "--postamble"
                                                  (cdr
                                                   (doom-cli--command context)))))
                                context e)
                               5)
                              (doom-cli-invalid-option-error
                               (let*
                                   ((val
                                     (cdr e)))
                                 (progn
                                   (ignore
                                    (consp val))
                                   (let*
                                       ((x23
                                         (car-safe val))
                                        (x24
                                         (cdr-safe val)))
                                     (progn
                                       (ignore
                                        (consp x24))
                                       (let*
                                           ((x25
                                             (car-safe x24))
                                            (x26
                                             (cdr-safe x24)))
                                         (progn
                                           (ignore
                                            (consp x26))
                                           (let*
                                               ((x27
                                                 (car-safe x26))
                                                (x28
                                                 (cdr-safe x26)))
                                             (progn
                                               (ignore
                                                (consp x28))
                                               (let*
                                                   ((x29
                                                     (car-safe x28))
                                                    (x30
                                                     (cdr-safe x28)))
                                                 (progn
                                                   (ignore
                                                    (null x30))
                                                   (let
                                                       ((types x23)
                                                        (option x25)
                                                        (value x27)
                                                        (errors x29))
                                                     (progn
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--style 'red "Error: %s received invalid value %S")
                                                         (string-join
                                                          (progn
                                                            (or
                                                             (progn
                                                               (and
                                                                (memq
                                                                 (type-of option)
                                                                 cl-struct-doom-cli-option-tags)
                                                                t))
                                                             (signal 'wrong-type-argument
                                                                     (list 'doom-cli-option option)))
                                                            (aref option 5))
                                                          "/")
                                                         value)
                                                        :format nil)
                                                       (doom-print
                                                        (doom-print--format
                                                         (doom-print--style 'bold "\nValidation errors:"))
                                                        :format nil)
                                                       (let
                                                           ((--dolist-tail-- errors))
                                                         (while --dolist-tail--
                                                           (let
                                                               ((err
                                                                 (car --dolist-tail--)))
                                                             (doom-print
                                                              (doom-print--format
                                                               (doom-print--class 'item "%s."
                                                                                  (doom-print--class 'fill err)))
                                                              :format nil)
                                                             (setq --dolist-tail--
                                                                   (cdr --dolist-tail--)))))))))))))))))
                               (doom-cli-call
                                (cons ':help
                                      (cons "--postamble"
                                            (cdr
                                             (doom-cli--command context))))
                                context e)
                               5)
                              (doom-cli-command-not-found-error
                               (let*
                                   ((command
                                     (cdr e))
                                    (cli
                                     (doom-cli-get command)))
                                 (cond
                                  ((null cli)
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--style 'red "Error: unrecognized command '%s'")
                                     (doom-cli-command-string
                                      (or
                                       (cdr command)
                                       command)))
                                    :format nil)
                                   (doom-cli-call
                                    (cons ':help
                                          (cons "--similar"
                                                (cons "--postamble"
                                                      (cdr command))))
                                    context e))
                                  ((null
                                    (progn
                                      (or
                                       (progn
                                         (and
                                          (memq
                                           (type-of cli)
                                           cl-struct-doom-cli-tags)
                                          t))
                                       (signal 'wrong-type-argument
                                               (list 'doom-cli cli)))
                                      (aref cli 9)))
                                   (doom-print
                                    (doom-print--format
                                     (doom-print--style 'red "Error: a subcommand is required"))
                                    :format nil)
                                   (doom-cli-call
                                    (cons ':help
                                          (cons "--subcommands"
                                                (cons "--postamble"
                                                      (cdr command))))
                                    context e))))
                               4)
                              (doom-cli-invalid-prefix-error
                               (let
                                   ((prefix
                                     (car
                                      (cdr e))))
                                 (doom-print
                                  (doom-print--format
                                   (doom-print--style 'red "Error: `run!' called with invalid prefix %S")
                                   prefix)
                                  :format nil)
                                 (let*
                                     ((suggested
                                       (and t
                                            (let*
                                                ((--cl-var-- t)
                                                 --cl-var--)
                                              (catch '--cl-block---cl-finish----
                                                (maphash
                                                 #'(lambda
                                                     (--cl-var-- cli)
                                                     (or
                                                      (if
                                                          (progn
                                                            (or
                                                             (progn
                                                               (and
                                                                (memq
                                                                 (type-of cli)
                                                                 cl-struct-doom-cli-tags)
                                                                t))
                                                             (signal 'wrong-type-argument
                                                                     (list 'doom-cli cli)))
                                                            (aref cli 2))
                                                          t
                                                        (setq --cl-var--
                                                              (car
                                                               (progn
                                                                 (or
                                                                  (progn
                                                                    (and
                                                                     (memq
                                                                      (type-of cli)
                                                                      cl-struct-doom-cli-tags)
                                                                     t))
                                                                  (signal 'wrong-type-argument
                                                                          (list 'doom-cli cli)))
                                                                 (aref cli 1)))
                                                              --cl-var-- nil))
                                                      (throw '--cl-block---cl-finish---- nil)))
                                                 doom-cli--table))
                                              --cl-var--))))
                                   (if suggested
                                       (doom-print
                                        (doom-print--format "Did you mean %S?" suggested)
                                        :format nil)
                                     (doom-print
                                      (doom-print--format "There are no commands defined under %S." prefix)
                                      :format nil))))
                               4)
                              (user-error
                               (doom-print
                                (doom-print--format
                                 (doom-print--style 'red "Error: %s")
                                 (car
                                  (cdr e)))
                                :format nil)
                               (doom-print
                                (doom-print--format "\nAborting...")
                                :format nil)
                               3))
                            context)))
                     (fset #'message old)))))))))))
 ((prefix . "doom")
  (args
   ("doctor"))
  (args "doctor")))

;;;; 47
((run! "doom"
       ("doctor"))
 ((prefix . "doom")
  (args
   ("doctor"))))

;;;; 48
((load-with-code-conversion "c:/Users/threddast/.emacs.d/bin/doom" "c:/Users/threddast/.emacs.d/bin/doom" nil t)
 ((load-in-progress . t)
  (inhibit-file-name-operation)
  (set-auto-coding-for-load . t)
  (load-file-name . "c:/Users/threddast/.emacs.d/bin/doom")
  (load-true-file-name . "c:/Users/threddast/.emacs.d/bin/doom")
  (read-symbol-shorthands)
  (eval-buffer-list #<buffer  *load*>)
  (standard-output)
  (lexical-binding)
  (standard-input . #<buffer  *load*>)
  (current-load-list
   (defun . doom--projectile-default-generic-command-a)
   (defun . doom--only-use-generic-command-a)
   (defun . doom-cleanup-project-cache-h)
   (defun . doom--projectile-dirconfig-file-a)
   (defun . doom--transient-3-h)
   (require . projectile)
   (require . evil-collection-indent)
   (require . finder-inf)
   (require . evil-collection-package-menu)
   (require . doom-packages)
   (require . package)
   (require . straight)
   (require . doom-start)
   doom-reloading-p
   (require . doom-cli)
   "c:/Users/threddast/.emacs.d/bin/doom")))

;;;; 49
((command-line-1
  ("-scriptload" ".\\doom" "--" "doctor"))
 ((command-line-args-left "--" "doctor")
  (argi . "-scriptload")
  (lexical-binding)
  (lread--unescaped-character-literals)))

;;;; 50
((command-line)
 nil)

;;;; 51
((normal-top-level)
 nil)

