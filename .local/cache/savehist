;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(pdf-annot-color-history org-roam-node-history evil-ex-search-history evil-ex-history minibuffer-history eww-prompt-history file-name-history empty-history extended-command-history))
(setq org-roam-node-history '("inbox"))
(setq evil-ex-search-history '("noter"))
(setq evil-ex-history '(#("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1))))
(setq minibuffer-history '("some note" "http://google.com" "google.com" "http://google.com" "http://emacs.com"))
(setq eww-prompt-history '("threddast.com"))
(setq file-name-history '("~/.doom.d/doom.org" "~/my-emacs-config/.doom.d/config.el" "~/.doom.d/config.el" "~/my-emacs-config/.doom.d/doom.org" "~/.doom.d/doom.org" "~/.doom.d/config.el" "~/.doom.d/doom.org" "~/Downloads/sample.pdf" "~/Downloads/" "~/.doom.d/config.el" "~/.doom.d/doom.org" "~/roam/0-inbox/" "~/.doom.d/doom.org" "~/scoop/apps/msys2/current/var/" "~/scoop/apps/msys2/current/mingw64/bin/./" "~/scoop/shims/../" "~/roam/0-inbox/inbox.org"))
(setq extended-command-history '("org-noter" "elisp-def-mode" "doom/reload" "+doom-dashboard/open" "org-pandoc-export-to-latex-pdf-and-open" "org-noter-kill-session" "org-noter" "org-noter-kill-session" "org-noter" "pdf-info-check-epdfinfo" "doom/reload" "comment-line" "doom/reload" "evil-save" "doom/open-private-config" "browse-url" "browse-web" "pdf-tools-install"))
(setq tablist-named-filter 'nil)
(setq evil-jumps-history '((19635 "c:/Users/threddast/.doom.d/doom.org") (19635 "c:/Users/threddast/.doom.d/doom.org") (1273 "c:/Users/threddast/my-emacs-config/.doom.d/doom.org") (394 "c:/Users/threddast/.doom.d/config.el") (32006 "c:/Users/threddast/.doom.d/doom.org") (34985 "c:/Users/threddast/.doom.d/doom.org") (18583 "c:/Users/threddast/.doom.d/doom.org") (34986 "c:/Users/threddast/.doom.d/doom.org") (1 "c:/Users/threddast/Downloads/sample.pdf") (148 "c:/Users/threddast/roam/0-inbox/inbox.org") (10626 "c:/Users/threddast/.doom.d/doom.org")))
(setq projectile-project-command-history '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ()))
(setq kill-ring '("(use-package! org-noter-pdftools
  :after org-noter
  :config
  ;; Add a function to ensure precise note is inserted
  (defun org-noter-pdftools-insert-precise-note (&optional toggle-no-questions)
    (interactive \"P\")
    (org-noter--with-valid-session
     (let ((org-noter-insert-note-no-questions (if toggle-no-questions
                                                   (not org-noter-insert-note-no-questions)
                                                 org-noter-insert-note-no-questions))
           (org-pdftools-use-isearch-link t)
           (org-pdftools-use-freepointer-annot t))
       (org-noter-insert-note (org-noter--get-precise-info)))))

  ;; fix https://github.com/weirdNox/org-noter/pull/93/commits/f8349ae7575e599f375de1be6be2d0d5de4e6cbf
  (defun org-noter-set-start-location (&optional arg)
    \"When opening a session with this document, go to the current location.
     With a prefix ARG, remove start location.\"
    (interactive \"P\")
    (org-noter--with-valid-session
     (let ((inhibit-read-only t)
           (ast (org-noter--parse-root))
           (location (org-noter--doc-approx-location (when (called-interactively-p ;'any) 'interactive))))
       (with-current-buffer (org-noter--session-notes-buffer session)
         (org-with-wide-buffer
          (goto-char (org-element-property :begin ast))
          (if arg
              (org-entry-delete nil org-noter-property-note-location)
            (org-entry-put nil org-noter-property-note-location
                           (org-noter--pretty-print-location location))))))))
  (with-eval-after-load 'pdf-annot
    (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))

" "#+end_src
" "(use-package! org-noter-pdftools
  :after org-noter
  :config
  ;; Add a function to ensure precise note is inserted
  (defun org-noter-pdftools-insert-precise-note (&optional toggle-no-questions)
    (interactive \"P\")
    (org-noter--with-valid-session
     (let ((org-noter-insert-note-no-questions (if toggle-no-questions
                                                   (not org-noter-insert-note-no-questions)
                                                 org-noter-insert-note-no-questions))
           (org-pdftools-use-isearch-link t)
           (org-pdftools-use-freepointer-annot t))
       (org-noter-insert-note (org-noter--get-precise-info)))))

  ;; fix https://github.com/weirdNox/org-noter/pull/93/commits/f8349ae7575e599f375de1be6be2d0d5de4e6cbf
  (defun org-noter-set-start-location (&optional arg)
    \"When opening a session with this document, go to the current location.
     With a prefix ARG, remove start location.\"
    (interactive \"P\")
    (org-noter--with-valid-session
     (let ((inhibit-read-only t)
           (ast (org-noter--parse-root))
           (location (org-noter--doc-approx-location (when (called-interactively-p ;'any) 'interactive))))
       (with-current-buffer (org-noter--session-notes-buffer session)
         (org-with-wide-buffer
          (goto-char (org-element-property :begin ast))
          (if arg
              (org-entry-delete nil org-noter-property-note-location)
            (org-entry-put nil org-noter-property-note-location
                           (org-noter--pretty-print-location location))))))))
  (with-eval-after-load 'pdf-annot
    (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+end_src

" "    (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+end_src
" "    
" "    
" "    
" "    (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)
" "
" "* Super agenda
#+begin_src elisp :tangle packages.el
;(package! org-super-agenda)
(package! org-timeline)
#+end_src

#+begin_src elisp :tangle config.el

(require 'org-super-agenda)
(use-package! org-super-agenda
  :config
  (add-hook! 'after-init-hook 'org-super-agenda-mode)
  (require 'org-habit)
  (setq
   org-agenda-skip-scheduled-if-done nil
   org-agenda-skip-deadline-if-done t
   org-agenda-include-deadlines t
   org-agenda-include-diary t
   org-agenda-block-separator t
   org-agenda-compact-blocks t
   org-agenda-remove-tags t
   org-agenda-start-with-log-mode t)
  )

(setq

  org-habit-preceding-days 14
  +org-habit-min-width 21
  org-habit-show-all-today t
  org-habit-show-done-always-green t
  +org-habit-graph-padding 1
  )
;; set the files for the agenda
;; Thanks to [[https://stackoverflow.com/questions/11384516/how-to-make-all-org-files-under-a-folder-added-in-agenda-list-automatically][Stackoverflow]]
(setq org-agenda-files (directory-files-recursively \"~/roam/\" \"\\\\.org$\"))
(setq org-icalendar-combined-agenda-file \"~/roam/calendar.ics\")
;(setq org-agenda-files '(\"~/roam/0-inbox\" \"~/roam/pages/MTEC/\" \"~/roam/pages/MTEC/FS2022/\"))

;; start the week on Monday
(setq calendar-week-start-day 1)

;; set the todo keywords and its shortcuts
(setq org-todo-keywords  '((sequence \"TODO(t)\" \"NEXT(n)\" \"WAIT(w)\" \"SDAY(s)\" \"IDEA(i)\" \"BUY(b)\" \"|\" \"DONE(d)\" \"CANC(c@)\")))
(setq org-log-done 'time)
; instead of trying to do all this shit, just always put a timestamp to a deadline
;(when-let ((day (org-find-text-property-in-string 'ts-date item)))
 ;            (= day this-day)))

;; this might be relevant for the clock table
;; https://github.com/trev-dev/emacs#org

;; set up the super agenda view
(setq org-agenda-custom-commands
      '((\"x\" alltodo \"\" nil ,(list org-agenda-private-local-path))
        (\"o\" \"Overview\"
         (
          ;; (alltodo \"\" ((org-agenda-overriding-header \"\")
          ;;              (org-super-agenda-groups
          ;;              '((:name \"Weekly goal\"
          ;;                       :todo \"GOAL\"
          ;;                       :discard (:anything t)
          ;;                       :order 1)
          ;;                ))))
          ;; display ONLY today and overdue
          (agenda \"\" ((org-agenda-span 'day)
                      (org-agenda-overriding-header \"\")
                      (org-agenda-start-day \"\") ;; start from today
                      ;(org-agenda-start-on-weekday 1)
                      (org-agenda-remove-tags t)
                      (org-agenda-start-with-log-mode '(closed))
                    ;  (org-agenda-format-date \"\")
                      (org-agenda-prefix-format '((agenda . \"   %-21c%?-12t \")))
                      (org-clocktable-defaults '(:fileskip0 t :formula % :indent t :hidefiles t))
                     ; (org-agenda-clockreport-mode t)
                      (org-super-agenda-groups
                       '(
                         (:name \"Today\"
                                :discard (:habit t)
                                :time-grid t
                                :date today
                             ;   :transformer  (parse-time-string (substring (buffer-string) 0 22))
                                :order 1)
                         (:name \"Discard all\"
                                :discard (:anything t)
                                :order 3)
                         ))))
            (agenda \"\" ((org-agenda-span 'day)
                      (org-agenda-overriding-header \"\")
                      (org-agenda-start-day \"\") ;; start from today
                      (org-agenda-remove-tags t)
                      (org-agenda-format-date \"\") ;; remove the date title
                      (org-super-agenda-groups
                       '(
                         (:name  \"Discard habits\"
                                :discard (:habit t)
                                :order 2)
                         (:name  \"Overdue\"
                                :scheduled past
                                :deadline past
                                :order 1)
                         (:name \"Discard all the rest\"
                                :discard (:anything t)
                                :order 3)
                         ))))

          ;; Display only NEXT objects
          (alltodo \"\" ((org-agenda-overriding-header \"\")
                       (org-super-agenda-groups
                        '((:name \"\\n Next\"
                                 :todo \"NEXT\"
                                 :discard (:anything t)
                                 :order 11)
                         ))))
          ;; now show agenda for incoming items and habits
          (agenda \"\" ((org-agenda-span 'day)
                      (org-agenda-overriding-header \"\")
                      (org-agenda-start-day \"\") ;; start from today
                      ;(org-agenda-start-on-weekday 1)
                      (org-agenda-remove-tags t)
                      (org-agenda-format-date \"\") ;; remove the date title
                      (org-super-agenda-groups
                       '((:name  \"Habits\"
                                :habit t
                                :order 1)
                         (:name \"Discard already selected\"
                                :discard (:date today
                                          :time-grid t
                                          :deadline past
                                          :scheduled past)
                                :order 3)
                         (:name \"\\n Due soon\"
                                :anything t
                                :order 2)
                         ))))
         (alltodo \"\" ((org-agenda-overriding-header \"\")
                       (org-super-agenda-groups
                        '((:name \"Discard Next\"
                                 :discard (:todo \"NEXT\")
                                 :order 1)
                          (:name \"\\n Inbox\"
                                 :file-path \"/pages/inbox.org\"
                                 :order 2)
                          (:name \"\\n Waiting\"
                                 :todo \"WAIT\"
                                 :order 3)
                          (:name \"\\n Other items\"
                                 :discard (:deadline past)
                                 :anything t
                                 :order 4)
                          ))))
          ))))

(defun threddast/org-agenda-get-day-face (date)
\"Return the face DATE should be displayed with.\"
  (let ((day-of-week (calendar-day-of-week date)))
    (cond
     ; ((or (= day-of-week 1) (= day-of-week 3))
     ;   '(:background \"red\"))
      ((org-agenda-todayp date)
        '(:inherit org-agenda-date-today :foreground \"#a3be8c\"))
      ;((member day-of-week org-agenda-weekend-days)
      ;  'org-agenda-date)
      (t 'org-agenda-date))))

(setq org-agenda-day-face-function 'threddast/org-agenda-get-day-face)

;; check this thing, should make the format a little beter
(setq org-agenda-prefix-format
      '((agenda . \"   %-21c%?-12t%5s \")
        ;(timeline . \"% s\")
        (todo . \"   %-21c%5s \")
        (tags . \"%-12c\")
        (search . \"%-12c\")))

(setq org-agenda-deadline-leaders  '(\"\" \"%3d \" \"%3d \"))
(setq org-agenda-scheduled-leaders '(\"\" \"%3d \" \"%3d \"))
;(setq org-agenda-closed-leaders \"\")

  ;; Agenda styling
(setq
  org-agenda-block-separator ?─
  org-agenda-time-grid
  '((daily today remove-match)
   ()
    \"\" ;\" ┄┄┄┄┄ \"
    \"┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄\")
  org-agenda-current-time-string
 \"now ───────────\")

; this stuff doesn't work but it would be nice otherwise
;; (defadvice org-agenda-add-time-grid-maybe (around mde-org-agenda-grid-tweakify
;;                                                   (list ndays todayp))
;;   (if (member 'remove-match (car org-agenda-time-grid))
;;       (flet ((extract-window
;;               (line)
;;               (let ((start (get-text-property 1 'time-of-day line))
;;                     (dur (get-text-property 1 'duration line)))
;;                 (cond
;;                  ((and start dur)
;;                   (cons start
;;                         (org-time-from-minutes
;;                          (truncate
;;                           (+ dur (org-time-to-minutes start))))))
;;                  (start start)
;;                  (t nil)))))
;;         (let* ((windows (delq nil (mapcar 'extract-window list)))
;;                (org-agenda-time-grid
;;                 (list
;;                  (car org-agenda-time-grid)
;;                  (remove-if
;;                   (lambda (time)
;;                     (find-if (lambda (w)
;;                                (if (numberp w)
;;                                    (equal w time)
;;                                  (and (>= time (car w))
;;                                       (< time (cdr w)))))
;;                              windows))
;;                   (cadr org-agenda-time-grid) )
;;                  (caddr org-agenda-time-grid)
;;                  (cadddr org-agenda-time-grid)
;;                  )))
;;           ad-do-it))
;;     ad-do-it))
;; (ad-activate 'org-agenda-add-time-grid-maybe)

;; I should tweak this when I have time, but it actually does exactly what I was looking for

;; work with org-agenda dispatcher [c] \"Today Clocked Tasks\" to view today's clocked tasks.
;; (defun org-agenda-log-mode-colorize-block ()
;;   \"Set different line spacing based on clock time duration.\"
;;   (save-excursion
;;     (let* ((colors (cl-case (alist-get 'background-mode (frame-parameters))
;;                                  ('light
;;                                   (list \"#F6B1C3\" \"#FFFF9D\" \"#BEEB9F\" \"#ADD5F7\"))
;;                                  ('dark
;;                                   (list \"#aa557f\" \"DarkGreen\" \"DarkSlateGray\" \"DarkSlateBlue\"))))
;;            pos
;;            duration)
;;       (nconc colors colors)
;;       (goto-char (point-min))
;;       (while (setq pos (next-single-property-change (point) 'duration))
;;         (goto-char pos)
;;         (when (and (not (equal pos (point-at-eol)))
;;                    (setq duration (org-get-at-bol 'duration)))
;;           ;; larger duration bar height
;;           (let ((line-height (if (< duration 15) 1.0 (+ 0.5 (/ duration 30))))
;;                 (ov (make-overlay (point-at-bol) (1+ (point-at-eol)))))
;;          ;   (overlay-put ov 'face `(:background ,(car colors) :foreground \"black\"))
;;             (setq colors (cdr colors))
;;             (overlay-put ov 'line-height line-height)
;;             (overlay-put ov 'line-spacing (1- line-height))))))))

;; ;(add-hook 'org-agenda-finalize-hook #'org-agenda-log-mode-colorize-block)

#+end_src
" "* Gcal integration
org-gcal is included in Doom's =calendar= module

Set up id and secret to communicate with the gcal API
#+begin_src elisp :tangle config.el
;; (setq org-gcal-client-id  (threddast/get-secret 'org-gcal-client-id)
;;       org-gcal-client-secret (threddast/get-secret 'org-gcal-client-secret)
;;       org-gcal-fetch-file-alist '(((threddast/get-secret 'org-gcal-email-1) .  \"~/roam/pages/gcal.org\")
;;                                   ((threddast/get-secret 'org-gcal-email-2) . \"~/roam/agenda.org\")))
;; (setq! org-gcal-auto-archive nil)

(setq org-agenda-private-local-path \"~/roam/calendar.ics\")

;; Define a custom command to save the org agenda to a file
;(setq org-agenda-custom-commands
;      `((\"X\" agenda \"\" nil ,(list org-agenda-private-local-path))))

(defun org-agenda-export-to-ics ()
  (interactive)
 ; (set-org-agenda-files)
  ;; Run all custom agenda commands that have a file argument.
  (org-batch-store-agenda-views)

  ;; Org mode correctly exports TODO keywords as VTODO events in ICS.
  ;; However, some proprietary calendars do not really work with
  ;; standards (looking at you Google), so VTODO is ignored and only
  ;; VEVENT is read.
  ;; (with-current-buffer (find-file-noselect org-agenda-private-local-path)
  ;;   (goto-char (point-min))
  ;;   (while (re-search-forward \"VTODO\" nil t)
  ;;     (replace-match \"VEVENT\"))
  ;;   (save-buffer))
  )
#+end_src
" ": /home/threddast/.doom.d/snippets
" "#+RESULTS:
" "* Org-sidebar
#+begin_src elisp :tangle packages.el
(package! org-sidebar)
#+end_src

#+begin_src elisp :tangle config.el
(defun my/org-sidebar ()
  \"Display my Org Sidebar.\"
  (interactive)
  (org-sidebar
   :sidebars (make-org-sidebar
              :name \"My Sidebar\"
              :description \"My sidebar items\"
              :items (org-ql (org-agenda-files)
                       (and (not (done))
                            (or (deadline auto)
                                (scheduled :on today)))
                       :action element-with-markers))))
#+end_src
" "
" "
" "* Org-ql

#+begin_src elisp :tangle packages.el
;(package! org-ql)
#+end_src

#+begin_src elisp :tangle config.el
;;(add-hook 'window-setup-hook #'org-ql-view-sidebar 'append)
#+end_src
" "* Treemacs

#+begin_src elisp :tangle config.el
(setq doom-themes-treemacs-theme \"doom-colors\")
;(require 'treemacs-all-the-icons)
;(treemacs-load-theme \"all-the-icons\")
;(add-hook 'window-setup-hook #'treemacs 'append)
;; this should truncate lines but it's not really working
(add-hook 'treemacs-mode-hook  (lambda () (setq-local truncate-lines t)))
(setq treemacs-width 25)
#+end_src
** TODO figure out how to truncate lines
" "
" "
" "* Xkcd

#+begin_src elisp :tangle packages.el
(package! xkcd)
#+end_src
" "* Selectric mode
#+begin_src elisp :tangle packages.el
(package! selectric-mode)
#+end_src
" "* math at point

#+begin_src elisp :tangle packages.el
(package! math-at-point :recipe (:host github :repo \"shankar2k/math-at-point\"))
                                   #+end_src
" "(package! org-tree-slide)
" "This would be a config for org-tree-slide, included with the org =+present= flag. However, I find it difficult to customise, =org-present= is more than enough for my use case at the moment

  #+begin_src elisp
;(setq +org-present-text-scale 1.5)
;(setq +org-present-hide-first-heading t)
;(require 'org-tree-slide)
(defun threddast/org-start-presentation ()
  (interactive)
  (org-display-inline-images) ;; Can also use org-startup-with-inline-images
  (centered-window-mode t)
  )

(defun threddast/org-end-presentation ()
  (interactive)
  ;; Show the mode line again
)

(use-package org-tree-slide
  :hook ((org-tree-slide-play . threddast/org-start-presentation)
         (org-tree-slide-stop . threddast/org-end-presentation))
  :custom
  (evil-define-key 'normal org-tree-slide-mode-map
    (kbd \"q\") 'dw/org-end-presentation
    (kbd \"C-<right>\") 'org-tree-slide-move-next-tree
    (kbd \"C-<left>\") 'org-tree-slide-move-previous-tree)
  (org-tree-slide-activate-message \"Presentation started!\")
  (org-tree-slide-deactivate-message \"Presentation finished!\")
  ;; activate the presentation profile
  (org-tree-slide-header t)
  (org-tree-slide-slide-in-effect t)
  (org-tree-slide-heading-emphasis nil)
  (org-tree-slide-cursor-init t)
  (org-tree-slide-modeline-display 'outside)
  (org-tree-slide-skip-done nil)
  (org-tree-slide-skip-comments t)
  )
#+end_src

" "* Lorem ipsum generator
#+begin_src elisp :tangle packages.el
(package! lorem-ipsum)
#+end_src
" "
" "
" "
" "
" "* Gif-screencast

#+begin_src elisp :tangle packages.el
;(package! gif-screencast)
#+end_src

#+begin_src elisp :tangle config.el
;(with-eval-after-load 'gif-screencast
;  (define-key gif-screencast-mode-map (kbd \"<f8>\") 'gif-screencast-toggle-pause)
;  (define-key gif-screencast-mode-map (kbd \"<f9>\") 'gif-screencast-stop))
#+end_src
" "* Telegram

#+begin_src elisp :tangle packages.el
;(package! telega)
#+end_src

#+begin_src elisp :tangle config.el
;; (use-package! telega)
;; (after! telega
;;   (set-company-backend! 'telega-chat-mode
;;     '(:separate
;;       telega-company-telegram-emoji
;;       telega-company-username
;;       telega-company-botcmd
;;       telega-company-hashtag
;;       company-ispell
;;       company-dabbrev)))

;; (map! :leader
;;     :desc \"telegram\" :mv \"o m\" #'telega)

;; (add-hook! '(telega-root-mode-hook telega-chat-mode-hook)
;;            #'hl-line-mode)

;; (add-hook! telega-load
;;            ;; core
;;            #'telega-mode-line-mode
;;            #'global-telega-squash-message-mode
;;            #'telega-notifications-mode

;;            ;; contrib
;;            #'global-telega-url-shorten-mode
;;            #'global-telega-mnz-mode
;;            #'telega-alert-mode
;;            #'telega-transient-mode
;;            #'telega-status-history-mode)

;; (setq telega-chat-input-markups '(\"org\" \"markdown2\" nil))
#+end_src
" "* Org-chef

#+begin_src elisp :tangle packages.el
;(package! org-chef)
#+end_src
" "* Git auto commit and push

This automatically commits and pushes to GitLab, needs a =.dir-locals.el= file in the =roam= directory to enable git-auto-commit-mode.
This also applies to subdirectories. This line is needed in the directory:

~((nil . ((eval git-auto-commit-mode 1))))~

#+begin_src elisp :tangle packages.el
;(package! git-auto-commit-mode)
#+end_src

#+begin_src elisp :tangle config.el
;(setq gac-automatically-push-p t)
;(setq gac-automatically-add-new-files-p t)
;(add-hook 'after-save-hook 'git-auto-commit-mode)
#+end_src
" "
" "* Emacs application framework
Seems cool but couldn't get it to work with Doom
#+begin_src elisp :tangle config.el
;(use-package! eaf)
;(require 'eaf-demo)
#+end_src

#+begin_src elisp :tangle packages.el
;(package! eaf :recipe (:host github
;                       :repo \"manateelazycat/emacs-application-framework\"
;                       :files (\"*\")
;                       :build (:not compile)))
#+end_src
" "
" "* Background transparency
Just in case I want to make the background transparent
#+begin_src elisp :tangle config.el
;; (doom/set-frame-opacity 100)
#+end_src
" "+end_src
" "* Anki
#+begin_src elisp :tangle packages.el
;(package! org-anki)
#+end_src

#+begin_src elisp :tangle config.el
;(map! :leader
;      (:prefix-map (\"a\" . \"anki\")
;       (:desc \"Org-Anki sync entry\" \"s\" #'org-anki-sync-entry
;        :desc \"Org-Anki delete entry\" \"d\" #'org-anki-delete-entry)))
#" "* Org-ref
Used for references
#+begin_src elisp :tangle packages.el
;(package! org-ref)
#+end_src

" "
* Habitica
#+begin_src elisp :tangle packages.el
;(package! habitica)
#+end_src
Login detail
#+begin_src elisp :tangle config.el
;(setq habitica-uid (threddast/get-secret 'habitica-uid-secret)
;      habitica-token (threddast/get-secret 'habitica-token-secret))
;(setq habitica-show-streak t)
#+end_src

" "* Org-dashboard

#+begin_src elisp :tangle packages.el
;(package! org-dashboard)
#+end_src

All files need to be specified
#+begin_src elisp :tangle config.el
;(setq org-dashboard-files '(
;                            \"~/roam/pages/MTEC/FS2022/human_resource_management.org\"
;                            ))
#+end_src

Also change the displayed colors
#+begin_src elisp :tangle config.el
;(setq org-dashboard-show-category nil)
;(defun org-dashboard--progress-color (percent)
;  (cond ((< percent 33) \"red\")
;        ((< percent 66) \"orange\")
;        ((< percent 100) \"yellow\")
;        (t \"green\")))
#+end_src

" "
" "
* Ob-ein
To get jupyter notebooks working in org-mode, but not sure I really understand it
#+begin_src elisp :tangle config.el
;; (org-babel-do-load-languages
;;  'org-babel-load-languages
;;  '(
;;    (ein . t)
;;    (python . t)
;;    (ipython . t)
;;    ))
;; ;(add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
#+end_src"))
(setq register-alist '((48 . "(use-package! org-noter-pdftools
  :after org-noter
  :config
  ;; Add a function to ensure precise note is inserted
  (defun org-noter-pdftools-insert-precise-note (&optional toggle-no-questions)
    (interactive \"P\")
    (org-noter--with-valid-session
     (let ((org-noter-insert-note-no-questions (if toggle-no-questions
                                                   (not org-noter-insert-note-no-questions)
                                                 org-noter-insert-note-no-questions))
           (org-pdftools-use-isearch-link t)
           (org-pdftools-use-freepointer-annot t))
       (org-noter-insert-note (org-noter--get-precise-info)))))

  ;; fix https://github.com/weirdNox/org-noter/pull/93/commits/f8349ae7575e599f375de1be6be2d0d5de4e6cbf
  (defun org-noter-set-start-location (&optional arg)
    \"When opening a session with this document, go to the current location.
     With a prefix ARG, remove start location.\"
    (interactive \"P\")
    (org-noter--with-valid-session
     (let ((inhibit-read-only t)
           (ast (org-noter--parse-root))
           (location (org-noter--doc-approx-location (when (called-interactively-p ;'any) 'interactive))))
       (with-current-buffer (org-noter--session-notes-buffer session)
         (org-with-wide-buffer
          (goto-char (org-element-property :begin ast))
          (if arg
              (org-entry-delete nil org-noter-property-note-location)
            (org-entry-put nil org-noter-property-note-location
                           (org-noter--pretty-print-location location))))))))
  (with-eval-after-load 'pdf-annot
    (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+end_src

")))
(setq mark-ring 'nil)
(setq global-mark-ring 'nil)
(setq search-ring 'nil)
(setq regexp-search-ring 'nil)
