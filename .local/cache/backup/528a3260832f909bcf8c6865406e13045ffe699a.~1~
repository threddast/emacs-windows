#+title: Doom
#+auto_tangle: t

* Table of contents :TOC_1:
- [[#preamble][Preamble]]
- [[#initel][Init.el]]
- [[#dooms-configel-and-packagesel][Doom's config.el and packages.el]]
- [[#general-config][General config]]
- [[#gcal-integration][Gcal integration]]
- [[#org-roam][Org-roam]]
- [[#org-download][Org-download]]
- [[#org-export-to-latex][Org export to LaTeX]]
- [[#org-noter--org-pdftools][Org-noter & org-pdftools]]
- [[#org-tables-move-single-cells][Org tables move single cells]]
- [[#super-agenda][Super agenda]]
- [[#org-modern][Org-modern]]
- [[#org-dashboard][Org-dashboard]]
- [[#ob-ein][Ob-ein]]
- [[#colemak-dh-keybindings][Colemak-DH keybindings]]
- [[#habitica][Habitica]]
- [[#org-ref][Org-ref]]
- [[#anki][Anki]]
- [[#background-transparency][Background transparency]]
- [[#org-clock][Org-clock]]
- [[#automatic-tangling][Automatic tangling]]
- [[#emacs-application-framework][Emacs application framework]]
- [[#git-auto-commit-and-push][Git auto commit and push]]
- [[#org-chef][Org-chef]]
- [[#telegram][Telegram]]
- [[#gif-screencast][Gif-screencast]]
- [[#lorem-ipsum-generator][Lorem ipsum generator]]
- [[#presentations-with-org][Presentations with org]]
- [[#math-at-point][math at point]]
- [[#selectric-mode][Selectric mode]]
- [[#xkcd][Xkcd]]
- [[#treemacs][Treemacs]]
- [[#org-ql][Org-ql]]
- [[#latex-fragments-in-org-mode][Latex fragments in org mode]]
- [[#org-sidebar][Org-sidebar]]
- [[#snippets][Snippets]]

* Preamble
** Fonts
Just select Fira code regular as monospace font. For the icons, you need to have =nerd-fonts-fira-code= installed from the AUR
** Emacsclient shortcut
To call emacsclient and open it as the focused window in gnome execute:
=emacsclient -c -e "(select-frame-set-input-focus (selected-frame))" "(+doom-dashboard-mode)"=
** Some useful configs
- [[https://github.com/danilevy1212/doom]]
- [[https://www.gtrun.org/post/config/]]
- https://xqzp.net/pmy/blog/sync-org-mode-agenda-to-calendar-apps/
- https://github.com/daviwil/dotfiles/blob/master/Emacs.org

* Init.el
#+begin_src elisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a link to Doom's Module Index where all
;;      of our modules are listed, including what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       (company +childframe)            ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       vertico             ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom                ; what makes DOOM look the way it does
       doom-dashboard      ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; 🙂
       hl-todo             ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       ligatures           ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline            ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints             ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       (treemacs +lsp)     ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter           ; vcs diff in the fringe
       vi-tilde-fringe     ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       ;;workspaces        ; tab emulation, persistence & separate workspaces
       ;; zen              ; distraction-free coding or writing

       :editor
       (evil +everywhere)  ; come to the dark side, we have cookies
       file-templates      ; auto-snippets for empty files
       fold                ; (nigh) universal code folding
       (format +onsave)    ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets            ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired               ; making dired pretty [functional]
       electric            ; smarter, keyword-based electric-indent
       ;;ibuffer           ; interactive buffer management
       undo                ; persistent, smarter undo for your inevitable mistakes
       vc                  ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       (syntax             ; tasing you for every semicolon you forget
        +childframe
        )
       (spell              ; tasing you for misspelling mispelling
        +everywhere
        +hunspell
        +flyspell
        )
       grammar             ; tasing grammar mistake every you make

       :tools
       ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;(ein +notebook)     ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp                 ; M-x vscode
       magit               ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf                 ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       rgb                 ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       (beancount +lsp)    ; mind the GAAP
       ;;(cc +lsp)         ; C > C++ == 1
       (clojure +lsp)      ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp          ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json                ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       (latex              ; writing papers in Emacs has never been so fu
        +cdlatex
        +fold
        ;+latexmk
        +lsp)
       ;;lean              ; for folks with too much to prove
       ledger              ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown            ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       nix                 ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org                ; organize your plain life in plain text
        ;+pretty   -> Don't use this, conflicts with org-modern
        +dragndrop
        +journal
        +jupyter
        +hugo
        +pandoc
        +pomodoro
        ;+present  -> rather just use org-present, org-tree-slide is more complex to customise
        +roam2)
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       python              ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       ;;sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       ;;yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings))
#+end_src

* Doom's config.el and packages.el
#+begin_src elisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
(setq user-full-name "Erik Giorgis"
      user-mail-address "giorgiserik@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-unicode-font' -- for unicode glyphs
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;;(setq doom-theme 'doom-nord)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/roam/")


;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src

#+begin_src elisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)
#+end_src

* General config

In order:
- auto-save files
- make backups
- auto-confirm exiting emacs
- show all habits in org-agenda-view
- set custom image in the Doom dashboard
- enable auto-revert mode (refresh buffer if file changed on the file system)
- custom function to cycle between light and dark theme at 6:00 and 18:00
- poor man's function to get secrets from a json file so that they are not in the public repo

#+begin_src elisp :tangle config.el
(setq auto-save-default t
      make-backup-files t
      confirm-kill-emacs nil
      org-habit-show-habits-only-for-today nil
      fancy-splash-image (expand-file-name "images/doom_256x256.png" doom-private-dir)
      inhibit-x-resources t
      )

(global-auto-revert-mode)

;; theme
(defun synchronize-theme ()
  (let* ((light-theme 'doom-nord-light)
         (dark-theme 'doom-nord)
         (start-time-light-theme 5)
         (end-time-light-theme 18)
         (hour (string-to-number (substring (current-time-string) 11 13)))
         (next-theme (if (member hour (number-sequence start-time-light-theme end-time-light-theme))
                         light-theme dark-theme)))
    (when (not (equal doom-theme next-theme))
      (setq doom-theme next-theme)
      (load-theme next-theme t))))

(run-with-timer 0 900 'synchronize-theme)

(require 'json)
(defun threddast/get-secret (key)
  "Return the value of the json file secret for key"
  (cdr (assoc key (json-read-file (expand-file-name "secrets/secrets.json" doom-private-dir))))
  )

(setq initial-buffer-choice "~/roam/0-inbox/inbox.org")
#+end_src

* Gcal integration
org-gcal is included in Doom's =calendar= module

Set up id and secret to communicate with the gcal API
#+begin_src elisp :tangle config.el
;; (setq org-gcal-client-id  (threddast/get-secret 'org-gcal-client-id)
;;       org-gcal-client-secret (threddast/get-secret 'org-gcal-client-secret)
;;       org-gcal-fetch-file-alist '(((threddast/get-secret 'org-gcal-email-1) .  "~/roam/pages/gcal.org")
;;                                   ((threddast/get-secret 'org-gcal-email-2) . "~/roam/agenda.org")))
;; (setq! org-gcal-auto-archive nil)

(setq org-agenda-private-local-path "~/roam/calendar.ics")

;; Define a custom command to save the org agenda to a file
;(setq org-agenda-custom-commands
;      `(("X" agenda "" nil ,(list org-agenda-private-local-path))))

(defun org-agenda-export-to-ics ()
  (interactive)
 ; (set-org-agenda-files)
  ;; Run all custom agenda commands that have a file argument.
  (org-batch-store-agenda-views)

  ;; Org mode correctly exports TODO keywords as VTODO events in ICS.
  ;; However, some proprietary calendars do not really work with
  ;; standards (looking at you Google), so VTODO is ignored and only
  ;; VEVENT is read.
  ;; (with-current-buffer (find-file-noselect org-agenda-private-local-path)
  ;;   (goto-char (point-min))
  ;;   (while (re-search-forward "VTODO" nil t)
  ;;     (replace-match "VEVENT"))
  ;;   (save-buffer))
  )
#+end_src

* Org-roam

#+begin_src elisp :tangle config.el
(use-package org-roam
  :hook
  (after-init . org-roam-mode)
  :custom
  (org-roam-directory "~/roam")
  (org-roam-completion-everywhere t)
  (org-roam-capture-templates
    '(("d" "default" plain "%?"
      :target (file+head "0-inbox/${slug}.org"
                         "#+title: ${title}\n\n")
      :unnarrowed t)))
  (org-roam-dailies-capture-templates
    '(("d" "default" plain "%?"
       :target (file+head "%<%Y-%m-%d>.org"
                          "#+title: %<%Y-%m-%d>\n\n")
       :unarrowed t)))
  (org-roam-dailies-directory "~/roam/5-logs/daily"))

(defun threddast/print-journal-template (date)
  "Returns the daily journal if the date is a weekday, weekly journal if date is Sunday"
  (let ((year  (string-to-number (substring date 0 4)))
        (month (string-to-number (substring date 5 7)))
        (day   (string-to-number (substring date 8))))
    (concat "#+title: " date "\n"
            (f-read-text "~/roam/templates/daily.org")
            (if (eq (calendar-day-of-week (list month day year)) 0)
              (f-read-text "~/roam/templates/weekly.org") nil))))

(defun threddast/org-roam-capture-inbox ()
  (interactive)
  (org-roam-capture- :node (org-roam-node-create)
                     :templates '(("t" "TODO" plain "* TODO %?"
                                  :target (file+head "0-inbox/inbox.org" "Inbox\n"))
                                  ("b" "BUY" plain "* BUY %?"
                                  :target (file+head "0-inbox/inbox.org" "Inbox\n"))
                                  ("i" "IDEA" plain "* IDEA %?"
                                  :target (file+head "0-inbox/inbox.org" "Inbox\n"))
                                  )))
#+end_src

#+RESULTS:
: threddast/org-roam-capture-inbox

Change the keybindings for roam
#+begin_src elisp :tangle config.el
(map! :leader
      (:prefix-map ("r" . "roam")
       (:desc "Insert node"       "i" #'org-roam-node-insert
        :desc "Find node"         "f" #'org-roam-node-find
        :desc "Today's journal"   "t" #'org-roam-dailies-goto-today
        :desc "Journal goto date" "d" #'org-roam-dailies-goto-date
        :desc "Capture to inbox"  "c" #'threddast/org-roam-capture-inbox
        :desc "Open agenda menu"  "a" #'org-agenda
        )))
#+end_src

* Org-download
Provided in the doom org flag +dragndrop

#+begin_src elisp :tangle config.el
(setq org-download-method 'directory)
#+end_src

* Org export to LaTeX
Especially used to export the CV
#+begin_src elisp :tangle config.el
(setq +latex-viewers '(evince))

(after! org
  (use-package! ox-extra
    :config
    (ox-extras-activate '(latex-header-blocks ignore-headlines))))

(after! org
  ;; Import ox-latex to get org-latex-classes and other funcitonality
  ;; for exporting to LaTeX from org
  (use-package! ox-latex
    :init
    ;; code here will run immediately
    :config
    ;; code here will run after the package is loaded
    (setq org-latex-pdf-process
          '("pdflatex -interaction nonstopmode -output-directory %o %f"
            "bibtex %b"
            "pdflatex -interaction nonstopmode -output-directory %o %f"
            "pdflatex -interaction nonstopmode -output-directory %o %f"))
    (setq org-latex-with-hyperref nil) ;; stop org adding hypersetup{author..} to latex export
    ;; (setq org-latex-prefer-user-labels t)

    ;; deleted unwanted file extensions after latexMK
    (setq org-latex-logfiles-extensions
          (quote ("lof" "lot" "tex~" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl" "xmpi" "run.xml" "bcf" "acn" "acr" "alg" "glg" "gls" "ist")))

    (unless (boundp 'org-latex-classes)
      (setq org-latex-classes nil)))
)
#+end_src

* Org-noter & org-pdftools
#+begin_src elisp :tangle packages.el
(package! org-noter)
(package! org-noter-pdftools)
(package! org-pdftools)
#+end_src

#+begin_src elisp :tangle config.el
;; custom keybindings for noter
(map! :leader
      (:prefix ("n")
       (:desc "Insert note at point" "i" #'org-noter-insert-note)))
;; prevent from collapsing everything
(use-package org-noter
  :after (:any org pdf-view)
  :config
  (setq
   ;; I want to see the whole file
   org-noter-hide-other t
   ;; I want to not open a new frame every time
   org-noter-always-create-frame nil
   )
  )
;; for lone truncation
(defun my/no-op (&rest args))
(advice-add 'org-noter--set-notes-scroll :override 'my/no-op)
;; noter pdf-tools
(use-package! org-pdftools
  :hook (org-mode . org-pdftools-setup-link))

(use-package! org-noter-pdftools
  :after org-noter
  :config
  ;; Add a function to ensure precise note is inserted
  (defun org-noter-pdftools-insert-precise-note (&optional toggle-no-questions)
    (interactive "P")
    (org-noter--with-valid-session
     (let ((org-noter-insert-note-no-questions (if toggle-no-questions
                                                   (not org-noter-insert-note-no-questions)
                                                 org-noter-insert-note-no-questions))
           (org-pdftools-use-isearch-link t)
           (org-pdftools-use-freepointer-annot t))
       (org-noter-insert-note (org-noter--get-precise-info)))))

  ;; fix https://github.com/weirdNox/org-noter/pull/93/commits/f8349ae7575e599f375de1be6be2d0d5de4e6cbf
  (defun org-noter-set-start-location (&optional arg)
    "When opening a session with this document, go to the current location.
With a prefix ARG, remove start location."
    (interactive "P")
    (org-noter--with-valid-session
     (let ((inhibit-read-only t)
           (ast (org-noter--parse-root))
           (location (org-noter--doc-approx-location (when (called-interactively-p 'any) 'interactive))))
       (with-current-buffer (org-noter--session-notes-buffer session)
         (org-with-wide-buffer
          (goto-char (org-element-property :begin ast))
          (if arg
              (org-entry-delete nil org-noter-property-note-location)
            (org-entry-put nil org-noter-property-note-location
                           (org-noter--pretty-print-location location))))))))
  (with-eval-after-load 'pdf-annot
    (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+end_src

* Org tables move single cells
Move single cells using C-M-up C-M-down C-M-left C-M-right, got from [[https://cs.gmu.edu/~kauffman/software/org-table-move-single-cell.el][George Mason University]]
#+begin_src elisp :tangle config.el
(add-hook 'org-mode-hook
 #'(lambda ()
    (local-set-key [C-M-up] (quote org-table-move-single-cell-up))
    (local-set-key [C-M-down] (quote org-table-move-single-cell-down))
    (local-set-key [C-M-left] (quote org-table-move-single-cell-left))
    (local-set-key [C-M-right] (quote org-table-move-single-cell-right))))

(defun org-table-swap-cells (i1 j1 i2 j2)
  "Swap two cells"
  (let ((c1 (org-table-get i1 j1))
  (c2 (org-table-get i2 j2)))
    (org-table-put i1 j1 c2)
    (org-table-put i2 j2 c1)
    (org-table-align)))

(defun org-table-move-single-cell (direction)
  "Move the current cell in a cardinal direction according to the
  parameter symbol: 'up 'down 'left 'right. Swaps contents of
  adjacent cell with current one."
  (unless (org-at-table-p)
    (error "No table at point"))
  (let ((di 0) (dj 0))
    (cond ((equal direction 'up) (setq di -1))
          ((equal direction 'down) (setq di +1))
          ((equal direction 'left) (setq dj -1))
          ((equal direction 'right) (setq dj +1))
          (t (error "Not a valid direction, must be up down left right")))
    (let* ((i1 (org-table-current-line))
           (j1 (org-table-current-column))
           (i2 (+ i1 di))
           (j2 (+ j1 dj)))
      (org-table-swap-cells i1 j1 i2 j2)
      (org-table-goto-line i2)
      (org-table-goto-column j2))))

(defun org-table-move-single-cell-up ()
  "Move a single cell up in a table; swap with anything in target cell"
  (interactive)
  (org-table-move-single-cell 'up))

(defun org-table-move-single-cell-down ()
  "Move a single cell down in a table; swap with anything in target cell"
  (interactive)
  (org-table-move-single-cell 'down))

(defun org-table-move-single-cell-left ()
  "Move a single cell left in a table; swap with anything in target cell"
  (interactive)
  (org-table-move-single-cell 'left))

(defun org-table-move-single-cell-right ()
  "Move a single cell right in a table; swap with anything in target cell"
  (interactive)
  (org-table-move-single-cell 'right))
#+end_src

* Super agenda
#+begin_src elisp :tangle packages.el
;(package! org-super-agenda)
(package! org-timeline)
#+end_src

#+begin_src elisp :tangle config.el

(require 'org-super-agenda)
(use-package! org-super-agenda
  :config
  (add-hook! 'after-init-hook 'org-super-agenda-mode)
  (require 'org-habit)
  (setq
   org-agenda-skip-scheduled-if-done nil
   org-agenda-skip-deadline-if-done t
   org-agenda-include-deadlines t
   org-agenda-include-diary t
   org-agenda-block-separator t
   org-agenda-compact-blocks t
   org-agenda-remove-tags t
   org-agenda-start-with-log-mode t)
  )

(setq

  org-habit-preceding-days 14
  +org-habit-min-width 21
  org-habit-show-all-today t
  org-habit-show-done-always-green t
  +org-habit-graph-padding 1
  )
;; set the files for the agenda
;; Thanks to [[https://stackoverflow.com/questions/11384516/how-to-make-all-org-files-under-a-folder-added-in-agenda-list-automatically][Stackoverflow]]
(setq org-agenda-files (directory-files-recursively "~/roam/" "\\.org$"))
(setq org-icalendar-combined-agenda-file "~/roam/calendar.ics")
;(setq org-agenda-files '("~/roam/0-inbox" "~/roam/pages/MTEC/" "~/roam/pages/MTEC/FS2022/"))

;; start the week on Monday
(setq calendar-week-start-day 1)

;; set the todo keywords and its shortcuts
(setq org-todo-keywords  '((sequence "TODO(t)" "NEXT(n)" "WAIT(w)" "SDAY(s)" "IDEA(i)" "BUY(b)" "|" "DONE(d)" "CANC(c@)")))
(setq org-log-done 'time)
; instead of trying to do all this shit, just always put a timestamp to a deadline
;(when-let ((day (org-find-text-property-in-string 'ts-date item)))
 ;            (= day this-day)))

;; this might be relevant for the clock table
;; https://github.com/trev-dev/emacs#org

;; set up the super agenda view
(setq org-agenda-custom-commands
      '(("x" alltodo "" nil ,(list org-agenda-private-local-path))
        ("o" "Overview"
         (
          ;; (alltodo "" ((org-agenda-overriding-header "")
          ;;              (org-super-agenda-groups
          ;;              '((:name "Weekly goal"
          ;;                       :todo "GOAL"
          ;;                       :discard (:anything t)
          ;;                       :order 1)
          ;;                ))))
          ;; display ONLY today and overdue
          (agenda "" ((org-agenda-span 'day)
                      (org-agenda-overriding-header "")
                      (org-agenda-start-day "") ;; start from today
                      ;(org-agenda-start-on-weekday 1)
                      (org-agenda-remove-tags t)
                      (org-agenda-start-with-log-mode '(closed))
                    ;  (org-agenda-format-date "")
                      (org-agenda-prefix-format '((agenda . "   %-21c%?-12t ")))
                      (org-clocktable-defaults '(:fileskip0 t :formula % :indent t :hidefiles t))
                     ; (org-agenda-clockreport-mode t)
                      (org-super-agenda-groups
                       '(
                         (:name "Today"
                                :discard (:habit t)
                                :time-grid t
                                :date today
                             ;   :transformer  (parse-time-string (substring (buffer-string) 0 22))
                                :order 1)
                         (:name "Discard all"
                                :discard (:anything t)
                                :order 3)
                         ))))
            (agenda "" ((org-agenda-span 'day)
                      (org-agenda-overriding-header "")
                      (org-agenda-start-day "") ;; start from today
                      (org-agenda-remove-tags t)
                      (org-agenda-format-date "") ;; remove the date title
                      (org-super-agenda-groups
                       '(
                         (:name  "Discard habits"
                                :discard (:habit t)
                                :order 2)
                         (:name  "Overdue"
                                :scheduled past
                                :deadline past
                                :order 1)
                         (:name "Discard all the rest"
                                :discard (:anything t)
                                :order 3)
                         ))))

          ;; Display only NEXT objects
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:name "\n Next"
                                 :todo "NEXT"
                                 :discard (:anything t)
                                 :order 11)
                         ))))
          ;; now show agenda for incoming items and habits
          (agenda "" ((org-agenda-span 'day)
                      (org-agenda-overriding-header "")
                      (org-agenda-start-day "") ;; start from today
                      ;(org-agenda-start-on-weekday 1)
                      (org-agenda-remove-tags t)
                      (org-agenda-format-date "") ;; remove the date title
                      (org-super-agenda-groups
                       '((:name  "Habits"
                                :habit t
                                :order 1)
                         (:name "Discard already selected"
                                :discard (:date today
                                          :time-grid t
                                          :deadline past
                                          :scheduled past)
                                :order 3)
                         (:name "\n Due soon"
                                :anything t
                                :order 2)
                         ))))
         (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:name "Discard Next"
                                 :discard (:todo "NEXT")
                                 :order 1)
                          (:name "\n Inbox"
                                 :file-path "/pages/inbox.org"
                                 :order 2)
                          (:name "\n Waiting"
                                 :todo "WAIT"
                                 :order 3)
                          (:name "\n Other items"
                                 :discard (:deadline past)
                                 :anything t
                                 :order 4)
                          ))))
          ))))

(defun threddast/org-agenda-get-day-face (date)
"Return the face DATE should be displayed with."
  (let ((day-of-week (calendar-day-of-week date)))
    (cond
     ; ((or (= day-of-week 1) (= day-of-week 3))
     ;   '(:background "red"))
      ((org-agenda-todayp date)
        '(:inherit org-agenda-date-today :foreground "#a3be8c"))
      ;((member day-of-week org-agenda-weekend-days)
      ;  'org-agenda-date)
      (t 'org-agenda-date))))

(setq org-agenda-day-face-function 'threddast/org-agenda-get-day-face)

;; check this thing, should make the format a little beter
(setq org-agenda-prefix-format
      '((agenda . "   %-21c%?-12t%5s ")
        ;(timeline . "% s")
        (todo . "   %-21c%5s ")
        (tags . "%-12c")
        (search . "%-12c")))

(setq org-agenda-deadline-leaders  '("" "%3d " "%3d "))
(setq org-agenda-scheduled-leaders '("" "%3d " "%3d "))
;(setq org-agenda-closed-leaders "")

  ;; Agenda styling
(setq
  org-agenda-block-separator ?─
  org-agenda-time-grid
  '((daily today remove-match)
   ()
    "" ;" ┄┄┄┄┄ "
    "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
  org-agenda-current-time-string
 "now ───────────")

; this stuff doesn't work but it would be nice otherwise
;; (defadvice org-agenda-add-time-grid-maybe (around mde-org-agenda-grid-tweakify
;;                                                   (list ndays todayp))
;;   (if (member 'remove-match (car org-agenda-time-grid))
;;       (flet ((extract-window
;;               (line)
;;               (let ((start (get-text-property 1 'time-of-day line))
;;                     (dur (get-text-property 1 'duration line)))
;;                 (cond
;;                  ((and start dur)
;;                   (cons start
;;                         (org-time-from-minutes
;;                          (truncate
;;                           (+ dur (org-time-to-minutes start))))))
;;                  (start start)
;;                  (t nil)))))
;;         (let* ((windows (delq nil (mapcar 'extract-window list)))
;;                (org-agenda-time-grid
;;                 (list
;;                  (car org-agenda-time-grid)
;;                  (remove-if
;;                   (lambda (time)
;;                     (find-if (lambda (w)
;;                                (if (numberp w)
;;                                    (equal w time)
;;                                  (and (>= time (car w))
;;                                       (< time (cdr w)))))
;;                              windows))
;;                   (cadr org-agenda-time-grid) )
;;                  (caddr org-agenda-time-grid)
;;                  (cadddr org-agenda-time-grid)
;;                  )))
;;           ad-do-it))
;;     ad-do-it))
;; (ad-activate 'org-agenda-add-time-grid-maybe)

;; I should tweak this when I have time, but it actually does exactly what I was looking for

;; work with org-agenda dispatcher [c] "Today Clocked Tasks" to view today's clocked tasks.
;; (defun org-agenda-log-mode-colorize-block ()
;;   "Set different line spacing based on clock time duration."
;;   (save-excursion
;;     (let* ((colors (cl-case (alist-get 'background-mode (frame-parameters))
;;                                  ('light
;;                                   (list "#F6B1C3" "#FFFF9D" "#BEEB9F" "#ADD5F7"))
;;                                  ('dark
;;                                   (list "#aa557f" "DarkGreen" "DarkSlateGray" "DarkSlateBlue"))))
;;            pos
;;            duration)
;;       (nconc colors colors)
;;       (goto-char (point-min))
;;       (while (setq pos (next-single-property-change (point) 'duration))
;;         (goto-char pos)
;;         (when (and (not (equal pos (point-at-eol)))
;;                    (setq duration (org-get-at-bol 'duration)))
;;           ;; larger duration bar height
;;           (let ((line-height (if (< duration 15) 1.0 (+ 0.5 (/ duration 30))))
;;                 (ov (make-overlay (point-at-bol) (1+ (point-at-eol)))))
;;          ;   (overlay-put ov 'face `(:background ,(car colors) :foreground "black"))
;;             (setq colors (cdr colors))
;;             (overlay-put ov 'line-height line-height)
;;             (overlay-put ov 'line-spacing (1- line-height))))))))

;; ;(add-hook 'org-agenda-finalize-hook #'org-agenda-log-mode-colorize-block)

#+end_src

* Org-modern
#+begin_src elisp :tangle packages.el
(package! org-modern)
#+end_src

#+begin_src elisp :tangle config.el
;; org-modern enable as minor mode
(global-org-modern-mode)

;; org-modern minimal design
 ;; Minimal UI
 ;; (package-initialize)
 ;; (menu-bar-mode -1)
 ;; (tool-bar-mode -1)
 ;; (scroll-bar-mode -1)

;; Choose some fonts
(set-face-attribute 'org-drawer nil :height 0.8)
(set-face-attribute 'org-document-title nil :height 1.5)
(use-package doom-themes
  :custom-face
  (org-ellipsis ((t (:height 0.8 :inherit 'shadow))))
  ;;(org-level-1 ((t (:inherit outline-1 :height 1.5))))
  )
 ;; (set-face-attribute 'default nil :family "???")
 ;; (set-face-attribute 'variable-pitch nil :family "???")
 ;; (set-face-attribute 'org-modern-symbol nil :family "Iosevka")

;; Add frame borders and window dividers
 ;;(modify-all-frames-parameters
 ;; '((right-divider-width . 40)
 ;;   (internal-border-width . 40)))
 ;;(dolist (face '(window-divider
 ;;                window-divider-first-pixel
 ;;                window-divider-last-pixel))
 ;;  (face-spec-reset-face face)
 ;;  (set-face-foreground face (face-attribute 'default :background)))
 ;;(set-face-background 'fringe (face-attribute 'default :background))
 (setq
  ;; Edit settings
  org-auto-align-tags nil
  org-tags-column 0
  org-catch-invisible-edits 'show-and-error
  org-special-ctrl-a/e t
  org-insert-heading-respect-content t
  org-ellipsis  " ⬎ " ;; ⤵ ▼ 
  ;; Org styling, hide markup etc.
  org-hide-emphasis-markers t
  org-pretty-entities t
  org-cycle-separator-lines -1
  org-modern-todo nil
  org-fontify-done-headline nil
)



(setq org-modern-star '("◉" "○" "◈" "◇"))

(setq org-modern-todo-faces
      '(("WAIT" :background "#AC4426" :foreground "#ECEFF4" :weight bold)
        ("NEXT" :background "#398EAC" :foreground "#ECEFF4" :weight bold)
        ("TODO" :background "#4F894C" :foreground "#ECEFF4" :weight bold)
        ("SDAY" :background "#B48EAD" :foreground "#ECEFF4" :weight bold :height 1.0)
        ))
;; (setq org-todo-keyword-faces
;;  '(("TODO" . ,(doom-color 'green))
;;    ("NEXT" . ,(doom-color 'cyan))
;;    ("WAIT" . ,(doom-color 'orange))
;;    ("SDAY" . ,(doom-color 'magenta))
;;  ))
#+end_src

#+RESULTS:
| TODO | , | (doom-color 'green)   |
| NEXT | , | (doom-color 'cyan)    |
| WAIT | , | (doom-color 'orange)  |
| SDAY | , | (doom-color 'magenta) |

#+begin_src elisp
   (red        '("#BF616A" "#ff6655" "red"          )) ;; Nord11
   (orange     '("#D08770" "#dd8844" "brightred"    )) ;; Nord12
   (green      '("#A3BE8C" "#99bb66" "green"        )) ;; Nord14
   (teal       '("#8FBCBB" "#44b9b1" "brightgreen"  )) ;; Nord7
   (yellow     '("#EBCB8B" "#ECBE7B" "yellow"       )) ;; Nord13
   (blue       '("#81A1C1" "#51afef" "brightblue"   )) ;; Nord9
   (dark-blue  '("#5E81AC" "#2257A0" "blue"         )) ;; Nord10
   (magenta    '("#B48EAD" "#c678dd" "magenta"      )) ;; Nord15
   (violet     '("#5D80AE" "#a9a1e1" "brightmagenta")) ;; ??
   (cyan       '("#88C0D0" "#46D9FF" "brightcyan"   )) ;; Nord8
   (dark-cyan  '("#507681" "#5699AF" "cyan"         )) ;; ??
   (red       '("#99324B" "#ff6655" "red"))
   (orange    '("#AC4426" "#dd8844" "brightred"))
   (green     '("#4F894C" "#99bb66" "green"))
   (teal      '("#29838D" "#44b9b1" "brightgreen"))
   (yellow    '("#9A7500" "#ECBE7B" "yellow"))
   (blue      '("#3B6EA8" "#51afef" "brightblue"))
   (dark-blue '("#5272AF" "#2257A0" "blue"))
   (magenta   '("#97365B" "#c678dd" "magenta"))
   (violet    '("#842879" "#a9a1e1" "brightmagenta"))
   (cyan      '("#398EAC" "#46D9FF" "brightcyan"))
   (dark-cyan '("#2C7088" "#5699AF" "cyan"))
#+end_src


* Org-dashboard

#+begin_src elisp :tangle packages.el
;(package! org-dashboard)
#+end_src

All files need to be specified
#+begin_src elisp :tangle config.el
;(setq org-dashboard-files '(
;                            "~/roam/pages/MTEC/FS2022/human_resource_management.org"
;                            ))
#+end_src

Also change the displayed colors
#+begin_src elisp :tangle config.el
;(setq org-dashboard-show-category nil)
;(defun org-dashboard--progress-color (percent)
;  (cond ((< percent 33) "red")
;        ((< percent 66) "orange")
;        ((< percent 100) "yellow")
;        (t "green")))
#+end_src

* Ob-ein
To get jupyter notebooks working in org-mode, but not sure I really understand it
#+begin_src elisp :tangle config.el
;; (org-babel-do-load-languages
;;  'org-babel-load-languages
;;  '(
;;    (ein . t)
;;    (python . t)
;;    (ipython . t)
;;    ))
;; ;(add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
#+end_src

* Colemak-DH keybindings
Remap evil keybindings for Coolemak-DH
- j -> move left
- h -> move down
- l and k don't change
#+begin_src elisp :tangle config.el
(define-key evil-window-map "j" 'evil-window-left)
(define-key evil-window-map "J" 'evil-window-move-far-left)
(define-key evil-motion-state-map "j" 'evil-backward-char)
(define-key evil-motion-state-map "J" 'evil-window-top)

(define-key evil-window-map "h" 'evil-window-down)
(define-key evil-window-map "H" 'evil-window-move-very-bottom)
(define-key evil-motion-state-map "h" 'evil-next-line)
#+end_src

* Habitica
#+begin_src elisp :tangle packages.el
;(package! habitica)
#+end_src
Login detail
#+begin_src elisp :tangle config.el
;(setq habitica-uid (threddast/get-secret 'habitica-uid-secret)
;      habitica-token (threddast/get-secret 'habitica-token-secret))
;(setq habitica-show-streak t)
#+end_src

* Org-ref
Used for references
#+begin_src elisp :tangle packages.el
(package! org-ref)
#+end_src

* Anki
#+begin_src elisp :tangle packages.el
(package! org-anki)
#+end_src

#+begin_src elisp :tangle config.el
(map! :leader
      (:prefix-map ("a" . "anki")
       (:desc "Org-Anki sync entry" "s" #'org-anki-sync-entry
        :desc "Org-Anki delete entry" "d" #'org-anki-delete-entry)))
#+end_src

* Background transparency
Just in case I want to make the background transparent
#+begin_src elisp :tangle config.el
;; (doom/set-frame-opacity 100)
#+end_src

* Org-clock

Change the keymaps to clock in and out
#+begin_src elisp :tangle config.el
(map! :leader
      (:prefix-map ("k" . "clock")
       (:desc "Org clock-in" "i" #'org-clock-in
        :desc "Org clock-out" "o" #'org-clock-out
        :desc "Org clock goto" "g" #'org-clock-goto)))

;; to get this to work I needed to install alsa-utils: aplay is used to play the sound
(setq org-clock-sound (expand-file-name "sounds/school_bell.wav" doom-private-dir))
#+end_src

* Automatic tangling
#+begin_src elisp :tangle packages.el
(package! org-auto-tangle)
#+end_src

#+begin_src elisp :tangle config.el
 (require 'org-auto-tangle)
 (add-hook 'org-mode-hook 'org-auto-tangle-mode)
#+end_src

* Emacs application framework
Seems cool but couldn't get it to work with Doom
#+begin_src elisp :tangle config.el
;(use-package! eaf)
;(require 'eaf-demo)
#+end_src

#+begin_src elisp :tangle packages.el
;(package! eaf :recipe (:host github
;                       :repo "manateelazycat/emacs-application-framework"
;                       :files ("*")
;                       :build (:not compile)))
#+end_src

* Git auto commit and push

This automatically commits and pushes to GitLab, needs a =.dir-locals.el= file in the =roam= directory to enable git-auto-commit-mode.
This also applies to subdirectories. This line is needed in the directory:

~((nil . ((eval git-auto-commit-mode 1))))~

#+begin_src elisp :tangle packages.el
(package! git-auto-commit-mode)
#+end_src

#+begin_src elisp :tangle config.el
(setq gac-automatically-push-p t)
(setq gac-automatically-add-new-files-p t)
(add-hook 'after-save-hook 'git-auto-commit-mode)
#+end_src

* Org-chef

#+begin_src elisp :tangle packages.el
(package! org-chef)
#+end_src

* Telegram

#+begin_src elisp :tangle packages.el
(package! telega)
#+end_src

#+begin_src elisp :tangle config.el
(use-package! telega)
(after! telega
  (set-company-backend! 'telega-chat-mode
    '(:separate
      telega-company-telegram-emoji
      telega-company-username
      telega-company-botcmd
      telega-company-hashtag
      company-ispell
      company-dabbrev)))

(map! :leader
    :desc "telegram" :mv "o m" #'telega)

(add-hook! '(telega-root-mode-hook telega-chat-mode-hook)
           #'hl-line-mode)

(add-hook! telega-load
           ;; core
           #'telega-mode-line-mode
           #'global-telega-squash-message-mode
           #'telega-notifications-mode

           ;; contrib
           #'global-telega-url-shorten-mode
           #'global-telega-mnz-mode
           #'telega-alert-mode
           #'telega-transient-mode
           #'telega-status-history-mode)

(setq telega-chat-input-markups '("org" "markdown2" nil))
#+end_src

* Gif-screencast

#+begin_src elisp :tangle packages.el
(package! gif-screencast)
#+end_src

#+begin_src elisp :tangle config.el
(with-eval-after-load 'gif-screencast
  (define-key gif-screencast-mode-map (kbd "<f8>") 'gif-screencast-toggle-pause)
  (define-key gif-screencast-mode-map (kbd "<f9>") 'gif-screencast-stop))
#+end_src

* Lorem ipsum generator
#+begin_src elisp :tangle packages.el
(package! lorem-ipsum)
#+end_src

* Presentations with org

#+begin_src elisp :tangle packages.el
(package! org-present)
(package! org-tree-slide)
(package! centered-window)
#+end_src

https://github.com/daviwil/dotfiles/blob/master/Emacs.org#org-present helped a lot

#+begin_src elisp :tangle config.el
(setq cwm-incremental-padding t)
(setq cwm-use-vertical-padding t)
(setq cwm-incremental-padding-% 5)
(setq cwm-frame-internal-border 50)
(setq cwm-centered-window-width 3000)
(remove-hook 'doom-first-buffer-hook #'global-hl-line-mode)
(setq indicate-empty-lines nil)
(defun threddast/org-present-prepare-slide ()
  (org-overview)
  (org-show-entry)
  (org-show-children)
  (org-latex-preview)
  )

(defun threddast/org-present-hook ()
  ;(setq-local face-remapping-alist '((header-line (:height 1.5) variable-pitch)))
  ;;                                    (header-line (:height 4.5) variable-pitch)
  ;;                                    (org-code (:height 1.55) org-code)
  ;;                                    (org-verbatim (:height 1.55) org-verbatim)
  ;;                                    (org-block (:height 1.25) org-block)
  ;;                                    (org-block-begin-line (:height 0.7) org-block)))
  (set-face-attribute 'header-line t :background "#ffffff")
  (setq header-line-format " ")
  (org-display-inline-images)
  (centered-window-mode 1)
  (display-line-numbers-mode 0)
  (org-present-hide-cursor)
  (threddast/org-present-prepare-slide))

(defun threddast/org-present-quit-hook ()
 ; (setq-local face-remapping-alist '((default variable-pitch default)))
  (org-present-show-cursor)
  (setq header-line-format nil)
  (centered-window-mode 0)
)

(defun threddast/org-present-prev ()
  (interactive)
  (org-present-prev)
  (threddast/org-present-prepare-slide))

(defun threddast/org-present-next ()
  (interactive)
  (org-present-next)
  (threddast/org-present-prepare-slide))

(use-package org-present
  :bind (:map org-present-mode-keymap
         ("[right]" . nil)
         ("[left]" . nil)
         ("C-<down>" . org-present-hide-cursor)
         ("C-<up>" . org-present-show-cursor)
         ("C-<right>" . threddast/org-present-next)
         ("C-<left>" . threddast/org-present-prev))
  :hook (;(org-present-mode . evil-normalize-keymaps)
         (org-present-mode . threddast/org-present-hook)
         (org-present-mode-quit . threddast/org-present-quit-hook)))
#+end_src

This would be a config for org-tree-slide, included with the org =+present= flag. However, I find it difficult to customise, =org-present= is more than enough for my use case at the moment

  #+begin_src elisp
;(setq +org-present-text-scale 1.5)
;(setq +org-present-hide-first-heading t)
;(require 'org-tree-slide)
(defun threddast/org-start-presentation ()
  (interactive)
  (org-display-inline-images) ;; Can also use org-startup-with-inline-images
  (centered-window-mode t)
  )

(defun threddast/org-end-presentation ()
  (interactive)
  ;; Show the mode line again
)

(use-package org-tree-slide
  :hook ((org-tree-slide-play . threddast/org-start-presentation)
         (org-tree-slide-stop . threddast/org-end-presentation))
  :custom
  (evil-define-key 'normal org-tree-slide-mode-map
    (kbd "q") 'dw/org-end-presentation
    (kbd "C-<right>") 'org-tree-slide-move-next-tree
    (kbd "C-<left>") 'org-tree-slide-move-previous-tree)
  (org-tree-slide-activate-message "Presentation started!")
  (org-tree-slide-deactivate-message "Presentation finished!")
  ;; activate the presentation profile
  (org-tree-slide-header t)
  (org-tree-slide-slide-in-effect t)
  (org-tree-slide-heading-emphasis nil)
  (org-tree-slide-cursor-init t)
  (org-tree-slide-modeline-display 'outside)
  (org-tree-slide-skip-done nil)
  (org-tree-slide-skip-comments t)
  )
#+end_src

* math at point

#+begin_src elisp :tangle packages.el
(package! math-at-point :recipe (:host github :repo "shankar2k/math-at-point"))
                                   #+end_src

* Selectric mode
#+begin_src elisp :tangle packages.el
(package! selectric-mode)
#+end_src

* Xkcd

#+begin_src elisp :tangle packages.el
(package! xkcd)
#+end_src

* Treemacs

#+begin_src elisp :tangle config.el
(setq doom-themes-treemacs-theme "doom-colors")
;(require 'treemacs-all-the-icons)
;(treemacs-load-theme "all-the-icons")
(add-hook 'window-setup-hook #'treemacs 'append)
;; this should truncate lines but it's not really working
(add-hook 'treemacs-mode-hook  (lambda () (setq-local truncate-lines t)))
(setq treemacs-width 25)
#+end_src
** TODO figure out how to truncate lines

* Org-ql

#+begin_src elisp :tangle packages.el
(package! org-ql)
#+end_src

#+begin_src elisp :tangle config.el
;;(add-hook 'window-setup-hook #'org-ql-view-sidebar 'append)
#+end_src

* Latex fragments in org mode
See https://lists.gnu.org/archive/html/emacs-orgmode/2014-03/msg00747.html for a description of the problem
#+begin_src elisp :tangle config.el
;; (add-hook 'cdlatex-mode-hook
;;  (lambda () (when (eq major-mode 'org-mode)
;;   (make-local-variable 'org-pretty-entities-include-sub-superscripts)
;;    (setq org-pretty-entities-include-sub-superscripts nil))))
(setq org-pretty-entities-include-sub-superscripts nil)
#+end_src

* Org-sidebar
#+begin_src elisp :tangle packages.el
(package! org-sidebar)
#+end_src

#+begin_src elisp :tangle config.el
(defun my/org-sidebar ()
  "Display my Org Sidebar."
  (interactive)
  (org-sidebar
   :sidebars (make-org-sidebar
              :name "My Sidebar"
              :description "My sidebar items"
              :items (org-ql (org-agenda-files)
                       (and (not (done))
                            (or (deadline auto)
                                (scheduled :on today)))
                       :action element-with-markers))))
#+end_src

* Snippets

#+begin_src elisp :tangle config.el
(setq yas-snippet-dirs '("~/.doom.d/snippets"))
(expand-file-name "snippets" doom-private-dir)
#+end_src

#+RESULTS:
: /home/threddast/.doom.d/snippets
